<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-8ea72dc5fed832574809a9c94082fbbb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.40">

  <meta name="dcterms.date" content="2024-04-08">
  <title>{{&lt; var course.title &gt;}} – Scripting</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Scripting – Connected Objects">
<meta property="og:description" content="Tips and tricks for effective scripting in Python">
<meta property="og:image" content="{{< var site.url >}}/lectures/docs/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Scripting</h1>
  <p class="subtitle">Tips and tricks for effective scripting in Python</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2024-04-08</p>
</section>
<section id="overview" class="slide level2">
<h2>Overview</h2>
<p>This section explores intermediate Python topics to improve our technique at specific linux/IoT scripting tasks.</p>
<p>We’ll explore:</p>
<ul>
<li>Passing terminal arguments to a script</li>
<li><code>__main__</code> and <em>top-level</em> environment</li>
<li>Running modules as scripts using <code>__main__</code></li>
<li>Tip for managing <code>gpio</code> dependencies</li>
</ul>
</section>
<section id="passing-script-arguments" class="slide level2">
<h2>Passing Script Arguments</h2>
<p>It’s possible to pass command line arguments to a Python script directly from your shell:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><a></a><span class="ex">$</span> python myscript.py first 2 True</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The arguments passed are <code>first</code>, <code>2</code> and <code>True</code> .</p>
<h3 id="sys.argv"><code>sys.argv</code></h3>
<p>The Python <code>sys</code> module provides access to these arguments via <code>sys.argv</code>:</p>
<ul>
<li><code>sys.argv</code> is a <strong>Python list</strong> of arguments.</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource pyhton number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1"><a></a># myscript.py</span>
<span id="cb2-2"><a></a></span>
<span id="cb2-3"><a></a>print(f'Argument List: {sys.argv}')</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><a></a><span class="ex">$</span> python myscript.py first 2 True</span>
<span id="cb3-2"><a></a></span>
<span id="cb3-3"><a></a><span class="ex">Argument</span> List: [<span class="st">'myscript.py'</span>, <span class="st">'first'</span>, <span class="st">'2'</span>, <span class="st">'True'</span>]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Notice the following:</p>
<ul>
<li>The first element in the list is the name of the script.</li>
<li>Arguments are available as strings.</li>
</ul>
<p>Unfortunately, we can’t trust that the user will always pass arguments in the correct order and using appropriate data types. We would still need to parse the arguments and make sure they are valid.</p>
<p>Fortunately, there is a built-in module that can help us do that.</p>
<h3 id="argparse"><code>argparse</code></h3>
<p><a href="https://docs.python.org/3.10/library/argparse.html#module-argparse" title="argparse: Command-line option and argument parsing library."><code>argparse</code></a> is a built-in module that makes it easy to write user-friendly command-line interfaces.</p>
<p>Once the script defines what arguments are required, <code>argparse</code> will figure out how to parse those out of <a href="https://docs.python.org/3.10/library/sys.html#sys.argv" title="sys.argv"><code>sys.argv</code></a>. The <a href="https://docs.python.org/3.10/library/argparse.html#module-argparse" title="argparse: Command-line option and argument parsing library."><code>argparse</code></a> module also automatically generates help and usage messages, and issues errors when users give the program invalid arguments.</p>
<blockquote>
<p>For a basic tutorial of <code>argparse</code>, see <a href="https://docs.python.org/3.10/howto/argparse.html#id1">this page</a>.</p>
</blockquote>
<p>In its simplest form, <code>argparse</code> must be imported and a parser must be instantiated:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><a></a><span class="co"># myscript.py</span></span>
<span id="cb4-2"><a></a></span>
<span id="cb4-3"><a></a><span class="im">import</span> argparse</span>
<span id="cb4-4"><a></a>parser <span class="op">=</span> argparse.ArgumentParser()</span>
<span id="cb4-5"><a></a>args <span class="op">=</span> parser.parse_args()</span>
<span id="cb4-6"><a></a><span class="bu">print</span>(args)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>However, this will generate an error because we must tell argparse what argument flags and what data types to parse.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><a></a><span class="ex">$</span> python myscript.py first 2 True</span>
<span id="cb5-2"><a></a></span>
<span id="cb5-3"><a></a><span class="ex">usage:</span> myscript.py <span class="pp">[-</span><span class="ss">h</span><span class="pp">]</span></span>
<span id="cb5-4"><a></a><span class="ex">myscript.py:</span> error: unrecognized arguments: first 2 True</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>To “teach” <code>argparse</code> how to parse an argument we use the command <code>parser.add_argument()</code></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><a></a><span class="co"># myscript.py</span></span>
<span id="cb6-2"><a></a><span class="im">import</span> argparse</span>
<span id="cb6-3"><a></a>parser <span class="op">=</span> argparse.ArgumentParser()</span>
<span id="cb6-4"><a></a></span>
<span id="cb6-5"><a></a>parser.add_argument(<span class="st">"word"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">str</span>)</span>
<span id="cb6-6"><a></a>parser.add_argument(<span class="st">"number"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>)</span>
<span id="cb6-7"><a></a>parser.add_argument(<span class="st">"toggle"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">bool</span>)</span>
<span id="cb6-8"><a></a></span>
<span id="cb6-9"><a></a>args <span class="op">=</span> parser.parse_args()</span>
<span id="cb6-10"><a></a></span>
<span id="cb6-11"><a></a><span class="bu">print</span>(args)</span>
<span id="cb6-12"><a></a><span class="bu">print</span>(args.word)</span>
<span id="cb6-13"><a></a><span class="bu">print</span>(args.number)</span>
<span id="cb6-14"><a></a><span class="bu">print</span>(args.toggle)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><a></a><span class="ex">$</span> python myscript.py first 2 True</span>
<span id="cb7-2"><a></a></span>
<span id="cb7-3"><a></a><span class="ex">Namespace</span><span class="er">(</span><span class="va">word</span><span class="op">=</span><span class="st">'first'</span>, <span class="va">number</span><span class="op">=</span>2, <span class="va">toggle</span><span class="op">=</span>True<span class="kw">)</span></span>
<span id="cb7-4"><a></a><span class="ex">first</span></span>
<span id="cb7-5"><a></a><span class="ex">2</span></span>
<span id="cb7-6"><a></a><span class="ex">True</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Notice how in the example above, <strong>all arguments were positional</strong>, which makes them <strong>mandatory</strong>. In other words, the order in which they are passed determines which variable they were being assigned to.</p>
<p>It’s also possible to make arguments optional. In this case, they must be specified with the correct “Flag”.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><a></a><span class="co"># myscript.py</span></span>
<span id="cb8-2"><a></a><span class="im">import</span> argparse</span>
<span id="cb8-3"><a></a>parser <span class="op">=</span> argparse.ArgumentParser()</span>
<span id="cb8-4"><a></a></span>
<span id="cb8-5"><a></a>parser.add_argument(<span class="st">"--word"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">str</span>)</span>
<span id="cb8-6"><a></a>parser.add_argument(<span class="st">"--number"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>)</span>
<span id="cb8-7"><a></a>parser.add_argument(<span class="st">"--toggle"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">bool</span>)</span>
<span id="cb8-8"><a></a></span>
<span id="cb8-9"><a></a>args <span class="op">=</span> parser.parse_args()</span>
<span id="cb8-10"><a></a></span>
<span id="cb8-11"><a></a><span class="bu">print</span>(args)</span>
<span id="cb8-12"><a></a><span class="bu">print</span>(args.word)</span>
<span id="cb8-13"><a></a><span class="bu">print</span>(args.number)</span>
<span id="cb8-14"><a></a><span class="bu">print</span>(args.toggle)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><a></a><span class="ex">$</span> python myscript.py <span class="at">--word</span> first <span class="at">--number</span> 2</span>
<span id="cb9-2"><a></a></span>
<span id="cb9-3"><a></a><span class="ex">Namespace</span><span class="er">(</span><span class="va">word</span><span class="op">=</span><span class="st">'first'</span>, <span class="va">number</span><span class="op">=</span>2, <span class="va">toggle</span><span class="op">=</span>None<span class="kw">)</span></span>
<span id="cb9-4"><a></a><span class="ex">first</span></span>
<span id="cb9-5"><a></a><span class="ex">2</span></span>
<span id="cb9-6"><a></a><span class="ex">None</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="argparse-references"><code>argparse</code> References</h3>
<ul>
<li>Article <a href="https://www.codeforests.com/2020/10/18/passing-arguments-to-python-script/">10 tips for passing arguments to Python script</a></li>
</ul>
</section>
<section id="background-whats-the-deal-with-__main__" class="slide level2 scrollable">
<h2>Background: What’s the deal with <code>__main__</code>?</h2>
<p>Why include a <code>if __name__ == "__main__":</code> in your script?</p>
<p>There are two ways of executing Python code. Depending on how the code is executed, the global <em>string</em> variable <code>__name__</code> will take one of two values:</p>
<ol type="1">
<li><p>If the script is run by the Python interpreter :</p>
<ul>
<li><code>__name__</code> has the value of <code>__main__</code></li>
</ul></li>
<li><p>Importing script as a separate Python module:</p>
<ul>
<li><code>__name__</code> has the value of the <em>module name</em>.</li>
</ul></li>
</ol>
<p>Let’s illustrate these two cases below.</p>
<blockquote>
<p><strong>TL:DR</strong></p>
<ul>
<li>Official docs:
<ul>
<li><a href="https://docs.python.org/3/library/__main__.html#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code>__main__</code>— Top-level code environment</a></li>
</ul></li>
<li>Summary discussion at Stackoverflow:
<ul>
<li><a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">What does if <strong>name</strong> == “<strong>main</strong>”: do?</a></li>
</ul></li>
</ul>
</blockquote>
<h3 id="executing-as-a-script">Executing as a Script</h3>
<p>Consider the following script:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_script.py</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="my_script.py"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><a></a><span class="bu">print</span>(<span class="st">'Inside my_script.py, variable `__name__` is: '</span>, <span class="va">__name__</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Executing this file with the Python interpreter:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><a></a><span class="ex">$</span> python my_script.py</span>
<span id="cb11-2"><a></a></span>
<span id="cb11-3"><a></a><span class="co"># Output</span></span>
<span id="cb11-4"><a></a><span class="co"># Inside my_script, variable `__name__` is: __main__</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="executing-as-a-module">Executing as a Module</h3>
<p>Consider a new file:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>your_script.py</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="your_script.py"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><a></a></span>
<span id="cb12-2"><a></a><span class="bu">print</span>(<span class="st">'Inside your_script.py, variable `__name__` is: '</span>, <span class="va">__name__</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Now modify <code>my_script.py</code> to import <code>your_script.py</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>my_script.py</strong></pre>
</div>
<div class="sourceCode" id="cb13" data-filename="my_script.py"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><a></a></span>
<span id="cb13-2"><a></a><span class="im">import</span> your_script</span>
<span id="cb13-3"><a></a></span>
<span id="cb13-4"><a></a><span class="bu">print</span>(<span class="st">'Inside my_script.py, variable `__name__` is: '</span>, <span class="va">__name__</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<blockquote>
<p>When a file is imported as a module, <strong>its top-level code gets executed immediately</strong>.</p>
</blockquote>
<p>When we execute <code>my_script.py</code> again using the Python interpreter:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><a></a><span class="ex">$</span> python my_script.py</span>
<span id="cb14-2"><a></a></span>
<span id="cb14-3"><a></a><span class="co"># Output</span></span>
<span id="cb14-4"><a></a><span class="co"># Inside your_script, variable `__name__` is: your_script</span></span>
<span id="cb14-5"><a></a><span class="co"># Inside my_script, variable `__name__` is: __main__</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The first print statement came from <code>your_script.py</code> when it was imported by <code>my_script.py</code>.</p>
<p>Notice how inside <code>your_script.py</code>, the <strong>variable <code>__name__</code> was the file name because it was being run as a module</strong> - from a different script (<code>my_script.py</code>).</p>
<h3 id="top-level-code">Top-level Code</h3>
<p>All of the code that is at indentation level 0 gets executed is called the <strong>top-level</strong>.</p>
<p><code>__main__</code> is the name of the environment where top-level code is run.</p>
<p>If a module is being run as a script (as in <code>mys_cript.py</code> above), then <code>__name__</code> is instead set to the string <code>"__main__"</code>.</p>
<p>You can test whether your script is being run directly or being imported by something else by testing what <code>__name__</code> evaluates to:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><a></a><span class="co"># another_script.py</span></span>
<span id="cb15-2"><a></a></span>
<span id="cb15-3"><a></a><span class="kw">def</span> main():</span>
<span id="cb15-4"><a></a>    <span class="co"># Include whatever code here.</span></span>
<span id="cb15-5"><a></a></span>
<span id="cb15-6"><a></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb15-7"><a></a>    main()  <span class="co"># Will only run if executing file as a script.</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">
<p>© Copyright 2024-2025 Michael Haaf. All rights reserved.</p>
</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': true,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("?var:site\.url");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>