<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-8ea72dc5fed832574809a9c94082fbbb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.40">

  <meta name="dcterms.date" content="2024-04-08">
  <title>{{&lt; var course.title &gt;}} – OOP</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="OOP – Connected Objects">
<meta property="og:description" content="Tips and tricks for effective OOP in Python">
<meta property="og:image" content="{{< var site.url >}}/lectures/docs/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">OOP</h1>
  <p class="subtitle">Tips and tricks for effective OOP in Python</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2024-04-08</p>
</section>
<section id="overview" class="slide level2">
<h2>Overview</h2>
<p>This section explores intermediate Python topics that will write better IoT applications.</p>
<p>We’ll explore:</p>
<ul>
<li>Type annotations for Python variables, functions, and classes</li>
<li>Inheritance, interfaces</li>
<li>Enums</li>
</ul>
</section>
<section id="typings" class="slide level2">
<h2>Typings</h2>
<p><em>This section adapted from https://docs.python.org/3/library/typing.html and https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</em></p>
<p>This section is a quick cheat sheet showing how to use type annotations for various common types in Python.</p>
<p>::: .callout-note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc. :::</p>
<h3 id="variables">Variables</h3>
<p>Basics:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><a></a><span class="co"># This is how you declare the type of a variable</span></span>
<span id="cb1-2"><a></a>age: <span class="bu">int</span> <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb1-3"><a></a></span>
<span id="cb1-4"><a></a><span class="co"># You don't need to initialize a variable to annotate it</span></span>
<span id="cb1-5"><a></a>a: <span class="bu">int</span>  <span class="co"># Ok (no value at runtime until assigned)</span></span>
<span id="cb1-6"><a></a></span>
<span id="cb1-7"><a></a><span class="co"># Doing so can be useful in conditional branches</span></span>
<span id="cb1-8"><a></a>child: <span class="bu">bool</span></span>
<span id="cb1-9"><a></a><span class="cf">if</span> age <span class="op">&lt;</span> <span class="dv">18</span>:</span>
<span id="cb1-10"><a></a>    child <span class="op">=</span> <span class="va">True</span></span>
<span id="cb1-11"><a></a><span class="cf">else</span>:</span>
<span id="cb1-12"><a></a>    child <span class="op">=</span> <span class="va">False</span></span>
<span id="cb1-13"><a></a></span>
<span id="cb1-14"><a></a><span class="co"># built-in-types: basically what you'd expect</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Useful build-in types:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><a></a><span class="co"># the common basic "primitive" types in Python</span></span>
<span id="cb2-2"><a></a>x: <span class="bu">int</span> <span class="op">=</span> <span class="dv">1</span></span>
<span id="cb2-3"><a></a>x: <span class="bu">float</span> <span class="op">=</span> <span class="fl">1.0</span></span>
<span id="cb2-4"><a></a>x: <span class="bu">bool</span> <span class="op">=</span> <span class="va">True</span></span>
<span id="cb2-5"><a></a>x: <span class="bu">str</span> <span class="op">=</span> <span class="st">"test"</span></span>
<span id="cb2-6"><a></a>x: <span class="bu">bytes</span> <span class="op">=</span> <span class="st">b"test"</span></span>
<span id="cb2-7"><a></a></span>
<span id="cb2-8"><a></a><span class="co"># Collections (Python 3.9+)</span></span>
<span id="cb2-9"><a></a>x: <span class="bu">list</span>[<span class="bu">int</span>] <span class="op">=</span> [<span class="dv">1</span>]</span>
<span id="cb2-10"><a></a>x: <span class="bu">set</span>[<span class="bu">int</span>] <span class="op">=</span> {<span class="dv">6</span>, <span class="dv">7</span>}</span>
<span id="cb2-11"><a></a></span>
<span id="cb2-12"><a></a><span class="co"># For mappings, we need the types of both keys and values</span></span>
<span id="cb2-13"><a></a>x: <span class="bu">dict</span>[<span class="bu">str</span>, <span class="bu">float</span>] <span class="op">=</span> {<span class="st">"field"</span>: <span class="fl">2.0</span>}  <span class="co"># Python 3.9+</span></span>
<span id="cb2-14"><a></a></span>
<span id="cb2-15"><a></a><span class="co"># For tuples of fixed size, we specify the types of all the elements</span></span>
<span id="cb2-16"><a></a>x: <span class="bu">tuple</span>[<span class="bu">int</span>, <span class="bu">str</span>, <span class="bu">float</span>] <span class="op">=</span> (<span class="dv">3</span>, <span class="st">"yes"</span>, <span class="fl">7.5</span>)  <span class="co"># Python 3.9+</span></span>
<span id="cb2-17"><a></a></span>
<span id="cb2-18"><a></a><span class="co"># For tuples of variable size, we use one type and ellipsis</span></span>
<span id="cb2-19"><a></a>x: <span class="bu">tuple</span>[<span class="bu">int</span>, ...] <span class="op">=</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)  <span class="co"># Python 3.9+</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="functions">Functions</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><a></a><span class="im">from</span> typing <span class="im">import</span> Callable, Iterator, Union, Optional</span>
<span id="cb3-2"><a></a></span>
<span id="cb3-3"><a></a><span class="co"># This is how you annotate a function definition</span></span>
<span id="cb3-4"><a></a><span class="kw">def</span> stringify(num: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb3-5"><a></a>    <span class="cf">return</span> <span class="bu">str</span>(num)</span>
<span id="cb3-6"><a></a></span>
<span id="cb3-7"><a></a><span class="co"># And here's how you specify multiple arguments</span></span>
<span id="cb3-8"><a></a><span class="kw">def</span> plus(num1: <span class="bu">int</span>, num2: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="bu">int</span>:</span>
<span id="cb3-9"><a></a>    <span class="cf">return</span> num1 <span class="op">+</span> num2</span>
<span id="cb3-10"><a></a></span>
<span id="cb3-11"><a></a><span class="co"># If a function does not return a value, use None as the return type</span></span>
<span id="cb3-12"><a></a><span class="co"># Default value for an argument goes after the type annotation</span></span>
<span id="cb3-13"><a></a><span class="kw">def</span> show(value: <span class="bu">str</span>, excitement: <span class="bu">int</span> <span class="op">=</span> <span class="dv">10</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb3-14"><a></a>    <span class="bu">print</span>(value <span class="op">+</span> <span class="st">"!"</span> <span class="op">*</span> excitement)</span>
<span id="cb3-15"><a></a></span>
<span id="cb3-16"><a></a><span class="co"># Note that arguments without a type are dynamically typed (treated as Any)</span></span>
<span id="cb3-17"><a></a><span class="co"># and that functions without any annotations are not checked</span></span>
<span id="cb3-18"><a></a><span class="kw">def</span> untyped(x):</span>
<span id="cb3-19"><a></a>    x.anything() <span class="op">+</span> <span class="dv">1</span> <span class="op">+</span> <span class="st">"string"</span>  <span class="co"># no errors</span></span>
<span id="cb3-20"><a></a></span>
<span id="cb3-21"><a></a><span class="co"># You can of course split a function annotation over multiple lines</span></span>
<span id="cb3-22"><a></a><span class="kw">def</span> send_email(address: Union[<span class="bu">str</span>, <span class="bu">list</span>[<span class="bu">str</span>]],</span>
<span id="cb3-23"><a></a>               sender: <span class="bu">str</span>,</span>
<span id="cb3-24"><a></a>               cc: Optional[<span class="bu">list</span>[<span class="bu">str</span>]],</span>
<span id="cb3-25"><a></a>               bcc: Optional[<span class="bu">list</span>[<span class="bu">str</span>]],</span>
<span id="cb3-26"><a></a>               subject: <span class="bu">str</span> <span class="op">=</span> <span class="st">''</span>,</span>
<span id="cb3-27"><a></a>               body: Optional[<span class="bu">list</span>[<span class="bu">str</span>]] <span class="op">=</span> <span class="va">None</span></span>
<span id="cb3-28"><a></a>               ) <span class="op">-&gt;</span> <span class="bu">bool</span>:</span>
<span id="cb3-29"><a></a>    ...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="classes">Classes</h3>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><a></a><span class="kw">class</span> BankAccount:</span>
<span id="cb4-2"><a></a>    <span class="co"># The "__init__" method doesn't return anything, so it gets return</span></span>
<span id="cb4-3"><a></a>    <span class="co"># type "None" just like any other method that doesn't return anything</span></span>
<span id="cb4-4"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, account_name: <span class="bu">str</span>, initial_balance: <span class="bu">int</span> <span class="op">=</span> <span class="dv">0</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-5"><a></a>        <span class="co"># mypy will infer the correct types for these instance variables</span></span>
<span id="cb4-6"><a></a>        <span class="co"># based on the types of the parameters.</span></span>
<span id="cb4-7"><a></a>        <span class="va">self</span>.account_name <span class="op">=</span> account_name</span>
<span id="cb4-8"><a></a>        <span class="va">self</span>.balance <span class="op">=</span> initial_balance</span>
<span id="cb4-9"><a></a></span>
<span id="cb4-10"><a></a>    <span class="co"># For instance methods, omit type for "self"</span></span>
<span id="cb4-11"><a></a>    <span class="kw">def</span> deposit(<span class="va">self</span>, amount: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-12"><a></a>        <span class="va">self</span>.balance <span class="op">+=</span> amount</span>
<span id="cb4-13"><a></a></span>
<span id="cb4-14"><a></a>    <span class="kw">def</span> withdraw(<span class="va">self</span>, amount: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-15"><a></a>        <span class="va">self</span>.balance <span class="op">-=</span> amount</span>
<span id="cb4-16"><a></a></span>
<span id="cb4-17"><a></a><span class="co"># User-defined classes are valid as types in annotations</span></span>
<span id="cb4-18"><a></a>account: BankAccount <span class="op">=</span> BankAccount(<span class="st">"Alice"</span>, <span class="dv">400</span>)</span>
<span id="cb4-19"><a></a><span class="kw">def</span> transfer(src: BankAccount, dst: BankAccount, amount: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-20"><a></a>    src.withdraw(amount)</span>
<span id="cb4-21"><a></a>    dst.deposit(amount)</span>
<span id="cb4-22"><a></a></span>
<span id="cb4-23"><a></a><span class="co"># Functions that accept BankAccount also accept any subclass of BankAccount!</span></span>
<span id="cb4-24"><a></a><span class="kw">class</span> AuditedBankAccount(BankAccount):</span>
<span id="cb4-25"><a></a>    <span class="co"># You can optionally declare instance variables in the class body</span></span>
<span id="cb4-26"><a></a>    audit_log: <span class="bu">list</span>[<span class="bu">str</span>]</span>
<span id="cb4-27"><a></a></span>
<span id="cb4-28"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, account_name: <span class="bu">str</span>, initial_balance: <span class="bu">int</span> <span class="op">=</span> <span class="dv">0</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-29"><a></a>        <span class="bu">super</span>().<span class="fu">__init__</span>(account_name, initial_balance)</span>
<span id="cb4-30"><a></a>        <span class="va">self</span>.audit_log: <span class="bu">list</span>[<span class="bu">str</span>] <span class="op">=</span> []</span>
<span id="cb4-31"><a></a></span>
<span id="cb4-32"><a></a>    <span class="kw">def</span> deposit(<span class="va">self</span>, amount: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-33"><a></a>        <span class="va">self</span>.audit_log.append(<span class="ss">f"Deposited </span><span class="sc">{</span>amount<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb4-34"><a></a>        <span class="va">self</span>.balance <span class="op">+=</span> amount</span>
<span id="cb4-35"><a></a></span>
<span id="cb4-36"><a></a>    <span class="kw">def</span> withdraw(<span class="va">self</span>, amount: <span class="bu">int</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span>
<span id="cb4-37"><a></a>        <span class="va">self</span>.audit_log.append(<span class="ss">f"Withdrew </span><span class="sc">{</span>amount<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb4-38"><a></a>        <span class="va">self</span>.balance <span class="op">-=</span> amount</span>
<span id="cb4-39"><a></a></span>
<span id="cb4-40"><a></a>audited <span class="op">=</span> AuditedBankAccount(<span class="st">"Bob"</span>, <span class="dv">300</span>)</span>
<span id="cb4-41"><a></a>transfer(audited, account, <span class="dv">100</span>)  <span class="co"># type checks!</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</section>
<section id="virtual-environments" class="slide level2 scrollable">
<h2>Virtual Environments</h2>
<p>This section shows the use the python virtual environments (virt. envs.) with the <code>venv</code> build-in tool.</p>
<p><code>venv</code> is the officially recommended way to manage virt. envs. but it’s not the only one. Other tools such as <a href="https://docs.conda.io/en/latest/index.html">Conda</a>, <a href="https://pipenv.pypa.io/en/latest/">Pipenv</a>, <a href="https://python-poetry.org/">Poetry</a> and <a href="https://pdm.fming.dev/latest/">PDM</a> are other options.</p>
<blockquote>
<p><strong>Short guide by <em>python.org</em></strong> - <a href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#installing-packages-using-pip-and-virtual-environments">Installing packages using pip and virtual environments</a></p>
<p><strong>Detailed guide by <em>RealPython.com</em></strong> - <em><a href="https://realpython.com/python-virtual-environments-a-primer/">Python Virtual Environments: A Primer</a> &gt; </em></p>
</blockquote>
<h3 id="why-virtual-environments">Why Virtual Environments?</h3>
<p>Python is not good at dependency management. We want to avoid:</p>
<ol type="1">
<li><strong>Avoid system pollution</strong>
<ul>
<li>Installing packages to the OS’s global Python will mix them with OS relevant packages. This could have unexpected side effects on OS tasks.</li>
<li>Because of the reason above, updating OS packages might overwrite or delete global Python packages.</li>
</ul></li>
<li><strong>Avoid project dependency conflicts</strong>
<ul>
<li>Python projects might require different versions the same external library.</li>
</ul></li>
<li><strong>Making projects reproducible in other environments.</strong>
<ul>
<li>Since all dependencies are isolated to a specific project, it is easier to identify and document them.</li>
<li>Once the dependencies are “locked”, the project depency can be easily reproduced in other environments.</li>
</ul></li>
</ol>
<h3 id="virtual-dependency-steps">Virtual Dependency Steps</h3>
<p>Creating and using virtual environments involved the following steps:</p>
<ol type="1">
<li>Creation</li>
<li>Activation</li>
<li>Installing dependencies</li>
<li>Deactivation</li>
<li>Locking dependencies</li>
</ol>
<h3 id="creating">Creating</h3>
<ol type="1">
<li><p>Create a new folder for the project (if one doesn’t already exist).</p></li>
<li><p><code>cd</code> into the folder and create a new virt. env.:</p></li>
</ol>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1"><a></a>$ python3 -m venv my-env</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Note that <code>my-env</code> is the name of your virtual environment. <code>venv</code> is a popular choice.</p>
<h3 id="activate-deactivate">Activate &amp; Deactivate</h3>
<p>Once created, the virt. env. needs to be activated.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1"><a></a># Linux</span>
<span id="cb6-2"><a></a>$ source my-env/bin/activate</span>
<span id="cb6-3"><a></a></span>
<span id="cb6-4"><a></a># Windows</span>
<span id="cb6-5"><a></a>$ my-env/Scripts/activate.bat</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<blockquote>
<p><strong>Note:</strong> You can work with virtual environments without activating it. To do this, <a href="https://realpython.com/python-virtual-environments-a-primer/#it-runs-from-anywhere-with-absolute-paths">provide the full path</a> to its Python interpreter when executing a command.</p>
<p>Typically, you’ll want to activate the virtual environment to avoid repeatedly having to type long paths.</p>
</blockquote>
<p>To deactivate:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1"><a></a># Notice the shell prompt indicates a virt. env. is active</span>
<span id="cb7-2"><a></a>$ (my-env) deactivate</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="installing-packages-with-pip">Installing Packages with <code>pip</code></h3>
<p>Once a virtual environment is active, <strong>packages installed with <code>pip</code> will be local to that virtual environment.</strong></p>
<p>By default, project packages are installed in:</p>
<pre><code>project-folder
    |- &lt;project-venv&gt;
    |       |- lib
    |           |- python3.X
    |                   |- site-packages</code></pre>
<p>For example, installing <code>aiohttp</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1"><a></a># Notice the shell prompt indicates a virt. env. is active</span>
<span id="cb9-2"><a></a>$ (my-env) pip install aiohttp</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="using-requirements.txt">Using <code>requirements.txt</code></h3>
<p>Project dependencies can be listed in a file for portability. By convention, the file <code>requirements.txt</code> contains all the dependencies of a project created with a virtual environment.</p>
<blockquote>
<p>This is analogous to <code>package.json</code> for Node.Js projects</p>
</blockquote>
<p><strong>To generate</strong> a <code>requirements.txt</code> for an existing project:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode numberSource shell number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1"><a></a>$ pip freeze &gt; requirements.txt</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p><strong>To install</strong> packages from a <code>requirements.txt</code>:</p>
<pre><code>$ pip install -r requirements.txt</code></pre>
<h3 id="moving-virtual-environments">Moving Virtual Environments</h3>
<p>If you move a project that uses virtual environments to a different folder, <strong>you must re-initialize the virtual environment.</strong></p>
<p>From the <a href="https://docs.python.org/3/library/venv.html#how-venvs-work">official docs</a>:</p>
<blockquote>
<p>Scripts installed in environments contain the absolute paths to their environment’s interpreters.</p>
<ul>
<li>Because of this, environments are inherently non-portable. You should always have a simple means of recreating an environment (for example, have a requirements file <code>requirements.txt</code>, and invoke <code>pip install -r requirements.txt</code>.</li>
</ul>
</blockquote>
<h3 id="virtual-env-exercises">Virtual Env Exercises</h3>
<p>The following exercises are meant for familiarization with <code>venv</code>.</p>
<ol type="1">
<li><p>Compare packages installed with <code>pip</code> inside and outside of a new virtual environment (virt. env.):</p>
<ol type="1">
<li>List all globally installed <code>pip</code> packages: <code>pip list</code></li>
<li>Create a new folder and use <code>venv</code> to create a virtual environment inside.</li>
<li>Activate the new virt. env..</li>
<li>List the <code>pip</code> packages as seen from inside the active virtual environment.</li>
<li>Deactivate the new virtual environment.</li>
</ol></li>
<li><p>Complete the following steps inside the virtual environment (virt. env.) you created in the previous question.</p>
<ol type="1">
<li>Activate the virt. env.</li>
<li>install the following libraries:
<ul>
<li><a href="https://pypi.org/project/howdoi/">howdoi</a></li>
<li><a href="https://pyjok.es/">pyjokes</a></li>
</ul></li>
<li>List all pip packages to see the extra dependencies that got installed.</li>
<li>Have some fun using both installed packages (see their docs).</li>
<li>Export the dependency list to <code>requirements.txt</code> by using <code>pip freeze</code>.</li>
<li>Deactivate the virt. env.</li>
<li>Move <code>requirements.txt</code> to one folder level above the project folder (so it’s not deleted in the next step).</li>
<li>Delete the project folder.</li>
</ol></li>
<li><p>Create a new project and virtual environment using the <code>requirements.txt</code> from the previous exercise.</p>
<ol type="1">
<li>Create a new project folder with a virtual environment inside.</li>
<li>Move <code>requirements.txt</code> inside the new project folder.</li>
<li>Install project packages using <code>requirements.txt</code></li>
</ol></li>
</ol>


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">
<p>© Copyright 2024-2025 Michael Haaf. All rights reserved.</p>
</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': true,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("?var:site\.url");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>