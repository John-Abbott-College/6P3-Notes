<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-d166b450ba5a8e9f7a0ab969bf6592c1.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.39">

  <meta name="dcterms.date" content="2024-03-11">
  <title>{{&lt; var course.title &gt;}} – Serial protocols</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Serial protocols – Connected Objects">
<meta property="og:description" content="A deeper dive into the protocols used to communicate between GPIO and the kernel">
<meta property="og:image" content="https://john-abbott-college.github.io/6P3-Notes/lectures/docs/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Serial protocols</h1>
  <p class="subtitle">A deeper dive into the protocols used to communicate between GPIO and the kernel</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2024-03-11</p>
</section>
<section id="serial-protocols" class="slide level2">
<h2>Serial Protocols</h2>
<p>Many of the reTerminal’s General Purpose Input and Output (GPIO) pins also have specialized functions. These specialized functions typically include <strong>specific digital communication protocols</strong>:</p>
<ul>
<li><strong>Serial</strong></li>
<li><strong>SPI</strong> (serial peripheral interface)</li>
<li><strong>I2C</strong> (inter-integrated circuit)</li>
<li><strong>PWM</strong> (pulse-width modulation)</li>
<li><strong>PCM</strong> (pulse-code modulation)</li>
</ul>
<p>Below is the <strong>pin out diagram illustrating the specialized pins</strong>:</p>

<img data-src="../assets/9-serial-digital-reterminal-40-pin-header.png" class="r-stretch quarto-figure-center"><p class="caption">Breakout of 40-pin header for reTerminal</p><p class="img-info">
<a href="https://wiki.seeedstudio.com/reTerminal/#pinout-diagram"> GPIO and pin diagram of the reTerminal </a>&nbsp; - reTerminal Official Wiki, Seeed.
</p>
</section>
<section id="serial-communication" class="slide level2">
<h2>Serial Communication</h2>
<p>In order for two devices to exchange information, they must share a common communication protocol.</p>
<p>Serial interfaces stream their data, <strong>one bit at a time</strong>. These interfaces can operate with as little as one wire (for unidirectional communication), however they typically use 2 to 4 wires.</p>
<p>Serial communication can be either: <strong>synchronous</strong> and <strong>asynchronous</strong>.</p>
<h3 id="synchronous-serial">Synchronous Serial</h3>
<p>A synchronous serial interface always pairs its data line(s) with a clock signal. Therefore, all devices on the same data bus share a common clock.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="../assets/9-serial-sync-unidirectional.png"></p>
<figcaption>Synonymous unidirectional serial communication with a clock line</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/serial-communication"> Serial interface unidirectionally transmitting one bit at every clock pulse </a>&nbsp; Serial Communication, Sparkfun.
</p>
<blockquote>
<p>How many wires are used in the image above? Can information flow in both directions?</p>
</blockquote>
<p>Having a line dedicated to a clock makes for faster serial transfer, however, it also requires an extra wire between communicating devices.</p>
<p>Below are examples of synchronous digital protocols:</p>
<ul>
<li>SPI</li>
<li>I2C</li>
<li>USB (uses clock-synchronization)</li>
</ul>
<h3 id="asynchronous-serial">Asynchronous Serial</h3>
<p>Asynchronous means that data is transferred <strong>without support from an external clock signal</strong>.</p>
<p>This transmission method minimizes wires and I/O pins, however, extra effort is put into reliably transferring and receiving data.</p>
<p>Asynchronous serial communication is typically intended for <strong>only two devices</strong> to communicate</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="../assets/9-serial-wiring.png"></p>
<figcaption>Wiring diagram of two serial communication devices</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/serial-communication"> Wiring diagram for two devices communicating with the Serial protocol </a>&nbsp; Serial Communication, Sparkfun.
</p>
<blockquote>
<p>This is the most common type of serial communication between devices.</p>
<p><strong>The term “Serial” is commonly used to refer to Asynchronous Serial</strong></p>
</blockquote>
<p>In order to communicate reliably, both devices have to adhere to a number of rules such as: Data bits, Synchronization bits, Parity bits, and Baud rate.</p>
<p>For example, when using the serial monitor of the Arduino IDE, it’s necessary to properly select the Baud Rate so that both the client device (the Arduino) and the host (your PC) know the exactly clock frequency of the serial communication.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="../assets/9-serial-arduino-baud-rate.png"></p>
<figcaption>Selecting the Baud rate in the Arduino serial monitor</figcaption>
</figure>
</div>
<p class="img-info">
<a href="#"></a>&nbsp; Selecting the baud rate of the Arduino IDE’s serial monitor.
</p>
</section>
<section id="uarts" class="slide level2">
<h2>UARTs</h2>
<p>A universal asynchronous receiver/transmitter (UART) is a block of circuitry responsible for implementing serial communication.</p>
<p>A UART converts multiple parallel digital lines into two serial lines: Transmission (Tx) and Receiving (Rx) lines.</p>
<blockquote>
<p>The Raspberry Pi has a built-in UART on GPIO14 (Tx) and GPIO15 (Rx).</p>
</blockquote>
<p>The <a href="https://pyserial.readthedocs.io/en/latest/pyserial.html">python library pySerial</a> can be used to send and receive serial data to and from the Raspberry Pi:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><a></a><span class="im">import</span> serial</span>
<span id="cb1-2"><a></a>ser <span class="op">=</span> serial.Serial(<span class="st">'/dev/ttyS0'</span>)  <span class="co"># open serial port (9600 default baud rate)</span></span>
<span id="cb1-3"><a></a><span class="bu">print</span>(ser.name)         <span class="co"># check which port was really used</span></span>
<span id="cb1-4"><a></a>ser.write(<span class="st">b'hello'</span>)     <span class="co"># write a string</span></span>
<span id="cb1-5"><a></a>ser.close()             <span class="co"># close port</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="serial-demo">Serial Demo</h3>
<p>The demo below will show a reTerminal device devices communicating with a <a href="https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html">Raspberry Pi Pico</a> over the asynchronous serial protocol.</p>
<p>The Rx port of the reTerminal is connected to the Tx port of the Pico and vice-versa.</p>
<p>Below is the code being run on the Pico using MicroPython:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><a></a><span class="im">from</span> time <span class="im">import</span> sleep</span>
<span id="cb2-2"><a></a><span class="im">from</span> machine <span class="im">import</span> UART, Pin</span>
<span id="cb2-3"><a></a></span>
<span id="cb2-4"><a></a>uart0 <span class="op">=</span> UART(<span class="dv">0</span>, baudrate<span class="op">=</span><span class="dv">9600</span>, tx<span class="op">=</span>Pin(<span class="dv">0</span>), rx<span class="op">=</span>Pin(<span class="dv">1</span>))</span>
<span id="cb2-5"><a></a>uart0.write(<span class="st">'hello</span><span class="ch">\n</span><span class="st">'</span>)</span>
<span id="cb2-6"><a></a></span>
<span id="cb2-7"><a></a>sleep(<span class="fl">0.01</span>)</span>
<span id="cb2-8"><a></a></span>
<span id="cb2-9"><a></a>line <span class="op">=</span> uart0.read()</span>
<span id="cb2-10"><a></a><span class="bu">print</span>(<span class="ss">f'My line: </span><span class="sc">{</span>line<span class="sc">}</span><span class="ss">'</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>And this is the code running inside the reTerminal:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><a></a><span class="im">import</span> serial</span>
<span id="cb3-2"><a></a></span>
<span id="cb3-3"><a></a><span class="cf">with</span> serial.Serial(<span class="st">'/dev/serial0'</span>, <span class="dv">9600</span>) <span class="im">as</span> ser:</span>
<span id="cb3-4"><a></a></span>
<span id="cb3-5"><a></a>    <span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb3-6"><a></a>        line <span class="op">=</span> ser.readline()   <span class="co"># read a '\n' terminated line</span></span>
<span id="cb3-7"><a></a>        <span class="bu">print</span>(<span class="ss">f'Line: </span><span class="sc">{</span>line<span class="sc">}</span><span class="ss">'</span>)</span>
<span id="cb3-8"><a></a></span>
<span id="cb3-9"><a></a>        <span class="cf">if</span> line <span class="op">==</span> <span class="st">b'hello</span><span class="ch">\n</span><span class="st">'</span>:</span>
<span id="cb3-10"><a></a>            <span class="cf">break</span></span>
<span id="cb3-11"><a></a></span>
<span id="cb3-12"><a></a>    ser.write(<span class="st">b'there</span><span class="ch">\n</span><span class="st">'</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>Once both scripts are run simultaneously, the signal observed would look the following:</p>

<img data-src="../assets/9-serial-demo.png" class="r-stretch"></section>
<section id="serial-peripheral-interface-spi" class="slide level2">
<h2>Serial Peripheral Interface (SPI)</h2>
<p>Serial Peripheral Interface (SPI) is commonly used to send data between microcontrollers and small peripherals (ei. shift registers, sensors, SD cards).</p>
<p>It uses separate clock and data lines, along with a select line to choose the device you wish to talk to.</p>
<p>The communication can happen between a <strong>controller device</strong> (controlling the terms of the communication) and one or multiple <strong>peripheral devices</strong>.</p>
<p>The following nomenclature is typically used:</p>
<ul>
<li><strong>SCK: Clock Signal</strong>. Generated by the controller device.</li>
<li><strong>COPI: Controller-Out Peripheral-In</strong>. Information flows from controller to peripheral device.</li>
<li><strong>CIPO: Controller-In Peripheral-Out</strong>. Information flows from peripheral to controller.</li>
<li><strong>CS: Chip Select</strong>. Every peripheral device has a unique connection to the controller. The controller uses this line to enable (wake-up) the peripheral when it wants to communicate by setting it low.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="../assets/9-serial-spi-wiring.png"></p>
<figcaption>Wiring and bit exchange between SPI devices</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi"> Wiring diagram for two devices communicating over SPI</a>&nbsp; Serial Peripheral Interface (SPI), Sparkfun.
</p>
<p>Each peripheral device connected to the controller will need a separate CS line. To talk to a particular peripheral, the controller makes that peripheral’s CS line low and keep the rest of them high.</p>
<img data-src="../assets/9-serial-spi-multi-peripherals.png">
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi"> Multiple peripheral devices with unique CS lines talking to the same controller </a>&nbsp; Serial Peripheral Interface (SPI), Sparkfun.
</p>
</section>
<section id="problematic-technical-terminology" class="slide level2">
<h2>Problematic Technical Terminology</h2>
<p>Historically, the relationship between the Controller and Peripheral devices used to be called Master and Slave. This is incredibly problematic since the Master-Slave analogy is based on an extreme and violent power relationship between two individuals.</p>
<p>The Open Source Hardware Association (OSHA) has passed a <a href="https://www.oshwa.org/a-resolution-to-redefine-spi-signal-names/">resolution asking hardware manufactures to redefine SPI signal names</a>. However, some legacy documentation and references still include the outdated terminology below.</p>
<p><strong>Deprecated signal names:</strong></p>
<ul>
<li>MOSI – Master Out Slave In</li>
<li>MISO – Master In Slave Out</li>
<li>SS – Slave Select</li>
<li>MOMI – Master Out Master In</li>
<li>SOSI – Slave Out Slave In</li>
</ul>
<p>Problematic technical terminology is not unique to the SPI protocol and exists in many other technical domains. In 2022, Wire magazine published a nuanced article presenting multiple sides of the terminology debate: <a href="https://www.wired.com/story/tech-confronts-use-labels-master-slave/">Tech Confronts Its Use of the Labels ‘Master’ and ‘Slave’</a>.</p>
</section>
<section id="i2c" class="slide level2">
<h2>I2C</h2>
<p>The Inter-Integrated Circuit (I2C) Protocol is a protocol intended to allow multiple “peripheral” digital devices (chips) to communicate with one or more “controller” chip.</p>
<p>I2C requires only two wires, however, those two wires can support up to 1008 peripheral devices.</p>
<p>Hardware required to implement I2C is more complex than SPI, but less than asynchronous serial. Data speeds are also faster than asynchronous serial but slower than SPI.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/I2C_controller-target.svg/1920px-I2C_controller-target.svg.png"></p>
<figcaption>Wiring diagram of I2C devices connected</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://en.wikipedia.org/wiki/I%C2%B2C"> Example wiring diagram for one controller and 3 peripheral devices </a>&nbsp; I2C, Wikipedia.
</p>
<p>In I2C, each device has a unique identifier address (a hexadecimal number). When communication is initiated, the controller must announce the address of the target device.</p>
<p>You can check what are the I2C addresses of the peripherals attached to the reTerminal with the following bash command:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><a></a><span class="ex">pi@raspberrypi:~</span> $ i2cdetect <span class="at">-y</span> 1</span>
<span id="cb4-2"><a></a></span>
<span id="cb4-3"><a></a>     <span class="ex">0</span>  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f</span>
<span id="cb4-4"><a></a><span class="ex">00:</span>          <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-5"><a></a><span class="ex">10:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> UU <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-6"><a></a><span class="ex">20:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> UU <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-7"><a></a><span class="ex">30:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> UU <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-8"><a></a><span class="ex">40:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> UU <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-9"><a></a><span class="ex">50:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-10"><a></a><span class="ex">60:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> </span>
<span id="cb4-11"><a></a><span class="ex">70:</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span> <span class="at">--</span>                         </span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<p>The output above shows peripheral devices with the hexadecimal addresses 0x19, 0x29, 0x38, 0x40.</p>
<p>When communicating, messages are broken up into two types of frame:</p>
<ul>
<li>An address frame, where the controller indicates the peripheral to which the message is being sent.</li>
<li>One or more data frames, which are 8-bit data messages passed from controller to peripheral or vice versa.</li>
</ul>
<img data-src="../assets/9-serial-i2c-frames.png">
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/i2c/all"> Clock and data lines for I2C, showing address and data frames </a>&nbsp; I2C, Sparkfun.
</p>
<p>Examples of I2C devices used in this course: - LCD driver of the reTerminal - <a href="https://wiki.seeedstudio.com/Grove-AHT20-I2C-Industrial-Grade-Temperature&amp;Humidity-Sensor/">AHT20 I2C Temperature &amp; Humidity Sensor</a> - reTerminal’s accelerometer. - reTerminal’s light sensor</p>
<h3 id="i2c-python-library">I2C Python Library</h3>
<p>The <a href="https://pypi.org/project/smbus2/">python library smbus2</a> supports I2C protocol.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><a></a><span class="im">from</span> smbus2 <span class="im">import</span> SMBus</span>
<span id="cb5-2"><a></a></span>
<span id="cb5-3"><a></a><span class="co"># Open i2c bus 1</span></span>
<span id="cb5-4"><a></a><span class="cf">with</span> SMBus(<span class="dv">1</span>) <span class="im">as</span> bus:</span>
<span id="cb5-5"><a></a>    <span class="co"># read one byte from address 80, offset 0</span></span>
<span id="cb5-6"><a></a>    b <span class="op">=</span> bus.read_byte_data(<span class="dv">80</span>, <span class="dv">0</span>)</span>
<span id="cb5-7"><a></a>    <span class="bu">print</span>(b)</span>
<span id="cb5-8"><a></a></span>
<span id="cb5-9"><a></a>    <span class="co"># Write a byte to address 80, offset 0</span></span>
<span id="cb5-10"><a></a>    data <span class="op">=</span> <span class="dv">45</span></span>
<span id="cb5-11"><a></a>    bus.write_byte_data(<span class="dv">80</span>, <span class="dv">0</span>, data)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<blockquote>
<p>Each peripheral device might require a series of initialization messages to be written to it. <strong>Typically you will use python libraries made to communicate with a specific peripheral device.</strong></p>
<p>As an example, see the <a href="https://github.com/Seeed-Studio/grove.py/blob/master/grove/grove_temperature_humidity_aht20.py">library for the AHT20 temperature sensor</a>.</p>
</blockquote>
</section>
<section id="pulse-width-modulation-pwm" class="slide level2">
<h2>Pulse Width Modulation (PWM)</h2>
<p>Pulse Width Modulation (PWM) is a type of digital signal. With PWM it’s possible to vary how much time the signal is high in an analog fashion.</p>
<p>While the signal can only be high (usually 3.3V or 5V) or low (ground) at any time, we can change the proportion of time the signal is high compared to when it is low over a consistent time interval.</p>
<p>The <strong>duty cycle</strong> describes the amount of “ON time” as a percentage over an interval or period of time.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://upload.wikimedia.org/wikipedia/commons/b/b8/Duty_Cycle_Examples.png"></p>
<figcaption>Duty Cycle Examples.png</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.sparkfun.com/tutorials/pulse-width-modulation"> Examples of duty cycles as a percentage of the total “High” signal </a>&nbsp; Pulse Width Modulation, Wikipedia.
</p>
<p><img data-src="https://images.squarespace-cdn.com/content/v1/59b037304c0dbfb092fbe894/1584899744421-MB7HGAMATU8BVNVJAGID/PWM_duty_cycle_animation_compressed.gif?format=1500w" alt="Animation of signal duty cycle increasing from 10% to 100%"> <em>Signal with a constant amplitude (voltage) but duty cycle changing from 10% to 100%. <a href="https://makersportal.com/blog/2020/3/21/raspberry-pi-servo-panning-camera">MakerPortal.com</a></em></p>
<h3 id="common-pwm-applications">Common PWM Applications</h3>
<h4 id="servo-motors">Servo Motors</h4>
<p>For <a href="https://www.14core.com/how-servo-motor-work-and-how-to-control-theme-using-arduino/">servo motor positioning</a> the width of the pulse indicates the position where the servo arm should be.</p>
<p><img data-src="https://www.14core.com/wp-content/uploads/2015/07/Servo_Animation.gif"> <em>Servo arm position changing according to the duty cycle of a PWM signal. <a href="https://www.14core.com/how-servo-motor-work-and-how-to-control-theme-using-arduino/">14Core.com</a></em></p>
<h4 id="led-dimming">LED Dimming</h4>
<p>LEDs are make to work with constant voltage (approximately 2 volts). It is not possible to dim their brightness by lowering the voltage (like in incandescent light bulb).</p>
<p>However, with PWM, it is possible to change the amount of “ON time” to give the illusion that the LED is dimmer.</p>
<p><img data-src="http://www.pyroelectro.com/tutorials/fading_led_pwm/img/pwm_fade.gif" alt="signal duty cycle affecting LED brightness"> <em>Signal duty cycle affecting LED brightness. <a href="http://www.pyroelectro.com/tutorials/fading_led_pwm/theory.html">Pyroelectro.com</a></em></p>
<p>In reality, the LED is simply blinking so fast that the human eye cannot notice it.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/QWbNz_O1rT0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<h3 id="pwm-python-library">PWM Python Library</h3>
<p>The <a href="https://gpiozero.readthedocs.io/en/stable/installing.html">python library GPIO Zero</a> offers good support more a number of PWM devices: - <a href="https://gpiozero.readthedocs.io/en/stable/recipes.html#led-with-variable-brightness">LED with variable brightness</a> - <a href="https://gpiozero.readthedocs.io/en/stable/recipes.html#servo">Servo</a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><a></a><span class="co"># LED intensity modulated with PWM</span></span>
<span id="cb6-2"><a></a></span>
<span id="cb6-3"><a></a><span class="im">from</span> gpiozero <span class="im">import</span> PWMLED</span>
<span id="cb6-4"><a></a><span class="im">from</span> time <span class="im">import</span> sleep</span>
<span id="cb6-5"><a></a></span>
<span id="cb6-6"><a></a>led <span class="op">=</span> PWMLED(<span class="dv">17</span>)</span>
<span id="cb6-7"><a></a></span>
<span id="cb6-8"><a></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb6-9"><a></a>    led.value <span class="op">=</span> <span class="dv">0</span>  <span class="co"># off</span></span>
<span id="cb6-10"><a></a>    sleep(<span class="dv">1</span>)</span>
<span id="cb6-11"><a></a>    led.value <span class="op">=</span> <span class="fl">0.5</span>  <span class="co"># half brightness</span></span>
<span id="cb6-12"><a></a>    sleep(<span class="dv">1</span>)</span>
<span id="cb6-13"><a></a>    led.value <span class="op">=</span> <span class="dv">1</span>  <span class="co"># full brightness</span></span>
<span id="cb6-14"><a></a>    sleep(<span class="dv">1</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><a></a><span class="co"># Servo position set with PWM</span></span>
<span id="cb7-2"><a></a></span>
<span id="cb7-3"><a></a><span class="im">from</span> gpiozero <span class="im">import</span> Servo</span>
<span id="cb7-4"><a></a><span class="im">from</span> time <span class="im">import</span> sleep</span>
<span id="cb7-5"><a></a></span>
<span id="cb7-6"><a></a>servo <span class="op">=</span> Servo(<span class="dv">17</span>)</span>
<span id="cb7-7"><a></a></span>
<span id="cb7-8"><a></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb7-9"><a></a>    servo.<span class="bu">min</span>()</span>
<span id="cb7-10"><a></a>    sleep(<span class="dv">2</span>)</span>
<span id="cb7-11"><a></a>    servo.mid()</span>
<span id="cb7-12"><a></a>    sleep(<span class="dv">2</span>)</span>
<span id="cb7-13"><a></a>    servo.<span class="bu">max</span>()</span>
<span id="cb7-14"><a></a>    sleep(<span class="dv">2</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</section>
<section id="references" class="slide level2">
<h2>References</h2>
<p><a href="https://learn.sparkfun.com/tutorials/serial-communication">Serial Communication Tutorial</a>, Sparkfun.</p>
<p><a href="https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi">Serial Peripheral Interface (SPI)</a>, Sparkfun</p>
<p><a href="https://learn.sparkfun.com/tutorials/pulse-width-modulation">Pulse Width Modulation</a>, Sparkfun</p>
<p><a href="https://en.wikipedia.org/wiki/Servo_control">Servo Control</a>, Wikipedia</p>
<p><a href="https://medium.com/geekculture/raspberry-pi-python-libraries-for-i2c-spi-uart-3df092aeda42">Raspberry Pi: Python Libraries for I2C, SPI, UART</a> by Sebastian via medium.com</p>
<p><a href="https://www.electronicwings.com/raspberry-pi/raspberry-pi-uart-communication-using-python-and-c">Raspberry Pi UART Communication using Python and C</a> by ElectronicWings.com</p>
</section>
<section id="diving-deeper" class="slide level2">
<h2>Diving Deeper</h2>
<p>If you want to know more about how USB uses clock synchronization even thought there is no clock wire:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wdgULBpRoXk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">

</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': false,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("https:\/\/john-abbott-college\.github\.io\/6P3-Notes\/");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>