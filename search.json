[
  {
    "objectID": "about/syllabus.html",
    "href": "about/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Coming soon!\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Syllabus"
    ]
  },
  {
    "objectID": "about/calendar.html",
    "href": "about/calendar.html",
    "title": "Calendar",
    "section": "",
    "text": "Coming soon!\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Calendar"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html",
    "href": "lessons/python/package-management-python.html",
    "title": "Package management in Python",
    "section": "",
    "text": "Note: most of these notes were adapted directly from the Raspberry Pi docs: Python on Raspberry Pi 1\nPython 3 is installed by default on Raspberry Pi OS, and is used for many important functions. Interfering with the system Python installation can cause problems for your operating system, so it’s important that if you install third-party Python libraries, you use the correct package-management tools.\nThere are two routes to installing libraries into the default python distribution. You can use apt and install pre-configured system packages, or you can use pip to install packages which are not distributed as part of Raspberry Pi OS.",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html#python-on-raspberry-pi",
    "href": "lessons/python/package-management-python.html#python-on-raspberry-pi",
    "title": "Package management in Python",
    "section": "",
    "text": "Note: most of these notes were adapted directly from the Raspberry Pi docs: Python on Raspberry Pi 1\nPython 3 is installed by default on Raspberry Pi OS, and is used for many important functions. Interfering with the system Python installation can cause problems for your operating system, so it’s important that if you install third-party Python libraries, you use the correct package-management tools.\nThere are two routes to installing libraries into the default python distribution. You can use apt and install pre-configured system packages, or you can use pip to install packages which are not distributed as part of Raspberry Pi OS.",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html#installing-python-packages-using-apt",
    "href": "lessons/python/package-management-python.html#installing-python-packages-using-apt",
    "title": "Package management in Python",
    "section": "Installing Python packages using apt",
    "text": "Installing Python packages using apt\n\n\n\n\n\n\nImportant\n\n\n\nInstalling packages using apt is the preferred method for installing Python libraries under Raspberry Pi OS.\n\n\nPackages installed via apt are tested, are usually pre-compiled so they install faster, and are designed for Raspberry Pi OS. They won’t break your system. Installing via this route also means that all required dependencies are also installed, and a log of installation is maintained by the OS so installation can be easily rolled back (libraries can be uninstalled) if needed.\nYou can see a complete list of Python apps maintained by Debian developers on the stable repositories here. Many, but not all, popular open-source Python packages are maintained for Debian by professionals and hobbyists alike.\nTo see an example: you may find yourself wanting to install the Python 3 library to support the Raspberry Pi BuildHAT component. To install this using `apt1, you would:\n$ sudo apt install python3-build-hat\n…​to install the pre-built library.\nIf you want to install a Python library called \"foobar\" you can useapt search foobar to find the exact package name – partial search matches are supported, so you don’t need to know the whole name in advance. Very useful!\nUsing apt makes installing larger packages, like numpy (which has many native dependencies including a Fortran compiler), much simpler and more predictable than installing individual packages using Python’s own package-management system.\n\n\n\n\n\n\nIn apt, Python packages have a consistent naming scheme: you’ll find that the a given package “foobar” is going to be called python-foobar or python3-foobar in the apt repositories – this helps distinguish python packages from other packages on a debian system.",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html#installing-python-packages-using-pip",
    "href": "lessons/python/package-management-python.html#installing-python-packages-using-pip",
    "title": "Package management in Python",
    "section": "Installing python packages using Pip",
    "text": "Installing python packages using Pip\nThe goal of operating systems like Debian is to be stable, that is, unlikely to crash due to a poorly tested/implemented program. That does come at a cost of not always offering the latest versions of packages, nor having a complelely comprehensive set of the bleeding edge packages that are available.\nMany developer depend on packages that are under active development. And, there are many packages that there are no Debian maintainers for. For cases like these (and many other cases, as we’ll see) it is useful for programming languages like Python to have an independent packaging manager.\nFor python, the most commonly used package manager is pip.\n\nPip installs packages from the Python Package Index repository (pypi.org) rather than the Debian or any other package repositories.\n\nEven though Raspberry Pi OS comes with pip installed, we can’t just use it right away, as we we’ll see in the next section.\n\nAbout Python virtual environments\nIn previous versions of the operating system, it was possible to install libraries directly, system-wide, using the package installer for Python, pip. You’ll find the following sort of command in many tutorials online – including in our Labs.\n$ pip install buildhat\nIn newer versions of Raspberry Pi OS, and most other operating systems, this is disallowed. If you try and install a Python package system-wide you’ll receive an error similar to this:\n$ pip install buildhat\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─&gt; To install Python packages system-wide, try apt install\n  python3-xyz, where xyz is the package you are trying to\n  install.\n\n  If you wish to install a non-Debian-packaged Python package,\n  create a virtual environment using python3 -m venv path/to/venv.\n  Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n  sure you have python3-full installed.\n\n  For more information visit http://rptl.io/venv\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\nhint: See PEP 668 for the detailed specification.\nThis error is generated because you’re trying to install a third-party package into the system Python. A long-standing practical problem for Python users has been conflicts between OS package managers like apt and Python-specific package management tools like pip. These conflicts include both Python-level API incompatibilities and conflicts over file ownership.\nTherefore from Debian Bookworm onwards, packages installed via pip must be installed into a Python virtual environment using venv. A virtual environment is a container where you can safely install third-party modules so they won’t interfere with, or break, your system Python.\n\n\nUsing pip with virtual environments\n\n\n\n\n\n\nAny packages that cannot be installed using apt should instead installed onto a Python Virtual Environment using venv and pip.\n\n\n\nTo use a virtual environment you will need to create a container to store the environment. There are several ways you can do this depending on how you want to work with Python.\n\n\nUsing a separate environment for each project\nOne way you can proceed is to create a new virtual environment for each Python project you make. Here, you’ll create a directory to hold your own code along with a virtual environment directory:\n$ mkdir my_project\n$ cd my_project\n$ python -m venv env\nIf you now look inside the my_project directory you’ll see a directory called env.\n$ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n$\n\n\n\n\n\n\nImportant\n\n\n\nVery important for Lab2:\nIf you want to inherit the currently installed packages from the system Python, you should create your virtual environment using python -m venv --system-site-packages env.\nThis will include the important Raspberry PI python modules that come with RaspberryPi OS in your venv.\n\n\nInside this directory is a full Python distribution. How do we use it?\nA nice feature of venvs is that they must be activated to be used. This allows you to maintained several different venvs all over your machines to maintain many different projects with different versions of python.\nTo activate your virtual environment and make that version of Python the one you’re currently using, you should type:\n$ source env/bin/activate\n(env) $\nYou’ll see that your prompt is now prepended with (env) to indicate that you’re no longer using the system Python. Instead, you’re using the version of Python contained inside your virtual environment. Any changes you make here won’t cause problems for your system Python; nor will any new modules you install into your environment.\n(env) $ which python\n/home/username/my_project/env/bin/python\nIf you install a third-party package, it’ll install into the Python distribution in your virtual environment:\n(env) $ pip install buildhat\nLooking in indexes: https://pypi.org/simple, https://www.piwheels.org/simple\nCollecting buildhat\n  Downloading https://www.piwheels.org/simple/buildhat/buildhat-0.5.12-py3-none-any.whl (57 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 57.8/57.8 kB 2.8 MB/s eta 0:00:00\nCollecting gpiozero\n  Downloading https://www.piwheels.org/simple/gpiozero/gpiozero-2.0-py3-none-any.whl (150 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 150.5/150.5 kB 6.9 MB/s eta 0:00:00\nCollecting pyserial\n  Downloading https://www.piwheels.org/simple/pyserial/pyserial-3.5-py2.py3-none-any.whl (90 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 90.6/90.6 kB 7.5 MB/s eta 0:00:00\nCollecting colorzero\n  Downloading https://www.piwheels.org/simple/colorzero/colorzero-2.0-py2.py3-none-any.whl (26 kB)\nRequirement already satisfied: setuptools in ./env/lib/python3.11/site-packages (from colorzero-&gt;gpiozero-&gt;buildhat) (66.1.1)\nInstalling collected packages: pyserial, colorzero, gpiozero, buildhat\nSuccessfully installed buildhat-0.5.12 colorzero-2.0 gpiozero-2.0 pyserial-3.5\n(env) $\nNow, if you pip list, you’ll see that your current version of Python includes your new modules.\n(env) $ pip list\nPackage    Version\n---------- -------\nbuildhat   0.5.12\ncolorzero  2.0\ngpiozero   2.0\npip        23.0.1\npyserial   3.5\nsetuptools 66.1.1\nAfter writing your code, you can run it from the command line inside the virtual environment as you’d expect, by invoking Python as usual.\n(env) $ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n-rw-r--r--  1 pi pi    0 Oct  3 14:45 my_code.py\n(env) $ python my_code.py\nHello World!\n(env) $\nYou can leave your virtual environment and return to using the system Python by typing:\n(env) $ deactivate\n$\n…​and demonstrate to yourself you’ve done so by checking the installed packages using pip list.\n\n\nUsing packages that require root permissions\nThe venv pattern is very useful for maintaining packages that do not require root permissions. This is a feature, not a bug – that way, you can have many developers independently install packages on one machine without needing to give them root permissions.\nSometimes (and particularly, in this couse) the packages we install require root permissions to work. Consider the packages that edit LED /sys/ files, like seeed-python-reterminal we install in Lab 2. We will run into an issue if we try to use these packages as normal users:\n(env) user@hostname:~/lab2/python $ python ./leds.py\n# ... output redacted\n&lt;Permissions error&gt;\nIt is unfortunately not fixable by simply using sudo:\n(env) user@hostname:~/lab2/python $ sudo python ./leds.py\n# ... output redacted\n&lt;Module seeed-python-terminal not included/available&gt;\nWhy isn’t the package available? Well, sudo runs python as the root user. The root user does not have your venv of python in its path. Try the commands below on your system to see if you understand what I mean.\n\nnormal usersudo user\n\n\n(env)jyourusername@yourhostname:~ $ which python\n# &lt;double check that the python executable comes from your venv&gt;\n\n\n(env)jyourusername@yourhostname:~ $ sudo su\n(env)root@yourhostname:~ # which python\n# &lt;you should see that the python executable is in a different place!, even though we still have \"env\"&gt;\n\n\n\nHow to resolve this problem? It is similar to the sudo echo &gt; file problem we saw with Bash. We need to make sure sudo is applying to the correct python executable. There are a few ways we can do this, all of which will look something like this:\n(env)jyourusername@yourhostname:~ $ sudo /absolute/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo ./env/relative/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo $(shell command for finding where python is installed) ./leds.py # use command substitution\nTry a few of these options out (will not work if you copy paste! Make sure you understand the commands)\n\n\nUsing a separate environment for each user\nAn alternative method to creating a virtual environment for each of your Python projects is to create a single virtual environment for your user account, and then activate that environment before running any of your Python code. This approach may be preferred if you commonly install the same set of modules for each project, and don’t want to have to bother creating individual Python environments for each project, essentially just duplicating your environment.\n$ python -m venv ~/.env\n$ source ~/.env/bin/activate\n(.env) $\nYou can check again that you’re in a separate environment by using pip list:\n(.env) $ pip list\nPackage    Version\n---------- -------\npip        23.0.1\nsetuptools 66.1.1\n…​and leave it using deactivate.\n(.env) $ deactivate\n$\n\n\nCheck library location\nCheck the location of where the module was installed with pip show &lt;module-name&gt;:\n(env) pi@raspberrypi:~ $ pip show seeed-python-reterminal\n\nName: seeed-python-reterminal\nVersion: 0.2\nSummary: seeed-python-reterminal\nHome-page: https://github.com/Seeed-Studio/Seeed_Python_ReTerminal\nAuthor: Takashi Matsuoka (matsujirushi)\nAuthor-email: matsujirushi@live.jp\nLicense: MIT License\nLocation: /usr/local/lib/python3.7/dist-packages      # Library location\nRequires: evdev\nRequired-by: \nThe library is installed at: Location: /usr/local/lib/python3.7/dist-packages",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html#troubleshooting",
    "href": "lessons/python/package-management-python.html#troubleshooting",
    "title": "Package management in Python",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nCheck python’s library paths\nSimilarly to Linux, there are environmental variables that determine where python will look for installed modules/libraries.\nSee the paths where python is looking for libraries with sys.path. They should look something like:\n\nsystemvenv\n\n\npi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n(env) pi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/home/pi/lab2/python/env/lib/python3.11/site-packages', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n\nIf the output of pip show seeed-python-reterminal is not in this list, python will not find it when you import it.\n\nNote: the python shell above was started as the user pi. If you start python as root, sys.path might have different paths.\n\nNote that the user pi does not have permission to add content inside /usr.\nThus, all pip installations as the regular user go into /home/pi/.local/lib/python3.11/site-packages.",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.html#footnotes",
    "href": "lessons/python/package-management-python.html#footnotes",
    "title": "Package management in Python",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRaspberry Pi documentation is copyright © 2012-2024 Raspberry Pi Ltd and is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA) licence. Some content originates from the eLinux wiki, and is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported licence.↩︎",
    "crumbs": [
      "Lessons",
      "Python",
      "Package management in Python"
    ]
  },
  {
    "objectID": "lessons/python/package-management-python.slides.html#python-on-raspberry-pi",
    "href": "lessons/python/package-management-python.slides.html#python-on-raspberry-pi",
    "title": "Package management in Python",
    "section": "Python on Raspberry Pi",
    "text": "Python on Raspberry Pi\nNote: most of these notes were adapted directly from the Raspberry Pi docs: Python on Raspberry Pi 1\nPython 3 is installed by default on Raspberry Pi OS, and is used for many important functions. Interfering with the system Python installation can cause problems for your operating system, so it’s important that if you install third-party Python libraries, you use the correct package-management tools.\nThere are two routes to installing libraries into the default python distribution. You can use apt and install pre-configured system packages, or you can use pip to install packages which are not distributed as part of Raspberry Pi OS.\nRaspberry Pi documentation is copyright © 2012-2024 Raspberry Pi Ltd and is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA) licence. Some content originates from the eLinux wiki, and is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported licence."
  },
  {
    "objectID": "lessons/python/package-management-python.slides.html#installing-python-packages-using-apt",
    "href": "lessons/python/package-management-python.slides.html#installing-python-packages-using-apt",
    "title": "Package management in Python",
    "section": "Installing Python packages using apt",
    "text": "Installing Python packages using apt\n\n\n\n\n\n\nImportant\n\n\nInstalling packages using apt is the preferred method for installing Python libraries under Raspberry Pi OS.\n\n\n\nPackages installed via apt are tested, are usually pre-compiled so they install faster, and are designed for Raspberry Pi OS. They won’t break your system. Installing via this route also means that all required dependencies are also installed, and a log of installation is maintained by the OS so installation can be easily rolled back (libraries can be uninstalled) if needed.\nYou can see a complete list of Python apps maintained by Debian developers on the stable repositories here. Many, but not all, popular open-source Python packages are maintained for Debian by professionals and hobbyists alike.\nTo see an example: you may find yourself wanting to install the Python 3 library to support the Raspberry Pi BuildHAT component. To install this using `apt1, you would:\n$ sudo apt install python3-build-hat\n…​to install the pre-built library.\nIf you want to install a Python library called \"foobar\" you can useapt search foobar to find the exact package name – partial search matches are supported, so you don’t need to know the whole name in advance. Very useful!\nUsing apt makes installing larger packages, like numpy (which has many native dependencies including a Fortran compiler), much simpler and more predictable than installing individual packages using Python’s own package-management system.\n\n\n\nIn apt, Python packages have a consistent naming scheme: you’ll find that the a given package “foobar” is going to be called python-foobar or python3-foobar in the apt repositories – this helps distinguish python packages from other packages on a debian system."
  },
  {
    "objectID": "lessons/python/package-management-python.slides.html#installing-python-packages-using-pip",
    "href": "lessons/python/package-management-python.slides.html#installing-python-packages-using-pip",
    "title": "Package management in Python",
    "section": "Installing python packages using Pip",
    "text": "Installing python packages using Pip\nThe goal of operating systems like Debian is to be stable, that is, unlikely to crash due to a poorly tested/implemented program. That does come at a cost of not always offering the latest versions of packages, nor having a complelely comprehensive set of the bleeding edge packages that are available.\nMany developer depend on packages that are under active development. And, there are many packages that there are no Debian maintainers for. For cases like these (and many other cases, as we’ll see) it is useful for programming languages like Python to have an independent packaging manager.\nFor python, the most commonly used package manager is pip.\n\nPip installs packages from the Python Package Index repository (pypi.org) rather than the Debian or any other package repositories.\n\nEven though Raspberry Pi OS comes with pip installed, we can’t just use it right away, as we we’ll see in the next section.\nAbout Python virtual environments\nIn previous versions of the operating system, it was possible to install libraries directly, system-wide, using the package installer for Python, pip. You’ll find the following sort of command in many tutorials online – including in our Labs.\n$ pip install buildhat\nIn newer versions of Raspberry Pi OS, and most other operating systems, this is disallowed. If you try and install a Python package system-wide you’ll receive an error similar to this:\n$ pip install buildhat\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─&gt; To install Python packages system-wide, try apt install\n  python3-xyz, where xyz is the package you are trying to\n  install.\n\n  If you wish to install a non-Debian-packaged Python package,\n  create a virtual environment using python3 -m venv path/to/venv.\n  Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n  sure you have python3-full installed.\n\n  For more information visit http://rptl.io/venv\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\nhint: See PEP 668 for the detailed specification.\nThis error is generated because you’re trying to install a third-party package into the system Python. A long-standing practical problem for Python users has been conflicts between OS package managers like apt and Python-specific package management tools like pip. These conflicts include both Python-level API incompatibilities and conflicts over file ownership.\nTherefore from Debian Bookworm onwards, packages installed via pip must be installed into a Python virtual environment using venv. A virtual environment is a container where you can safely install third-party modules so they won’t interfere with, or break, your system Python.\nUsing pip with virtual environments\n\n\n\nAny packages that cannot be installed using apt should instead installed onto a Python Virtual Environment using venv and pip.\n\n\n\nTo use a virtual environment you will need to create a container to store the environment. There are several ways you can do this depending on how you want to work with Python.\nUsing a separate environment for each project\nOne way you can proceed is to create a new virtual environment for each Python project you make. Here, you’ll create a directory to hold your own code along with a virtual environment directory:\n$ mkdir my_project\n$ cd my_project\n$ python -m venv env\nIf you now look inside the my_project directory you’ll see a directory called env.\n$ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n$\n\n\n\n\n\n\nImportant\n\n\nVery important for Lab2:\nIf you want to inherit the currently installed packages from the system Python, you should create your virtual environment using python -m venv --system-site-packages env.\nThis will include the important Raspberry PI python modules that come with RaspberryPi OS in your venv.\n\n\n\nInside this directory is a full Python distribution. How do we use it?\nA nice feature of venvs is that they must be activated to be used. This allows you to maintained several different venvs all over your machines to maintain many different projects with different versions of python.\nTo activate your virtual environment and make that version of Python the one you’re currently using, you should type:\n$ source env/bin/activate\n(env) $\nYou’ll see that your prompt is now prepended with (env) to indicate that you’re no longer using the system Python. Instead, you’re using the version of Python contained inside your virtual environment. Any changes you make here won’t cause problems for your system Python; nor will any new modules you install into your environment.\n(env) $ which python\n/home/username/my_project/env/bin/python\nIf you install a third-party package, it’ll install into the Python distribution in your virtual environment:\n(env) $ pip install buildhat\nLooking in indexes: https://pypi.org/simple, https://www.piwheels.org/simple\nCollecting buildhat\n  Downloading https://www.piwheels.org/simple/buildhat/buildhat-0.5.12-py3-none-any.whl (57 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 57.8/57.8 kB 2.8 MB/s eta 0:00:00\nCollecting gpiozero\n  Downloading https://www.piwheels.org/simple/gpiozero/gpiozero-2.0-py3-none-any.whl (150 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 150.5/150.5 kB 6.9 MB/s eta 0:00:00\nCollecting pyserial\n  Downloading https://www.piwheels.org/simple/pyserial/pyserial-3.5-py2.py3-none-any.whl (90 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 90.6/90.6 kB 7.5 MB/s eta 0:00:00\nCollecting colorzero\n  Downloading https://www.piwheels.org/simple/colorzero/colorzero-2.0-py2.py3-none-any.whl (26 kB)\nRequirement already satisfied: setuptools in ./env/lib/python3.11/site-packages (from colorzero-&gt;gpiozero-&gt;buildhat) (66.1.1)\nInstalling collected packages: pyserial, colorzero, gpiozero, buildhat\nSuccessfully installed buildhat-0.5.12 colorzero-2.0 gpiozero-2.0 pyserial-3.5\n(env) $\nNow, if you pip list, you’ll see that your current version of Python includes your new modules.\n(env) $ pip list\nPackage    Version\n---------- -------\nbuildhat   0.5.12\ncolorzero  2.0\ngpiozero   2.0\npip        23.0.1\npyserial   3.5\nsetuptools 66.1.1\nAfter writing your code, you can run it from the command line inside the virtual environment as you’d expect, by invoking Python as usual.\n(env) $ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n-rw-r--r--  1 pi pi    0 Oct  3 14:45 my_code.py\n(env) $ python my_code.py\nHello World!\n(env) $\nYou can leave your virtual environment and return to using the system Python by typing:\n(env) $ deactivate\n$\n…​and demonstrate to yourself you’ve done so by checking the installed packages using pip list.\nUsing packages that require root permissions\nThe venv pattern is very useful for maintaining packages that do not require root permissions. This is a feature, not a bug – that way, you can have many developers independently install packages on one machine without needing to give them root permissions.\nSometimes (and particularly, in this couse) the packages we install require root permissions to work. Consider the packages that edit LED /sys/ files, like seeed-python-reterminal we install in Lab 2. We will run into an issue if we try to use these packages as normal users:\n(env) user@hostname:~/lab2/python $ python ./leds.py\n# ... output redacted\n&lt;Permissions error&gt;\nIt is unfortunately not fixable by simply using sudo:\n(env) user@hostname:~/lab2/python $ sudo python ./leds.py\n# ... output redacted\n&lt;Module seeed-python-terminal not included/available&gt;\nWhy isn’t the package available? Well, sudo runs python as the root user. The root user does not have your venv of python in its path. Try the commands below on your system to see if you understand what I mean.\n\nnormal usersudo user\n\n\n(env)jyourusername@yourhostname:~ $ which python\n# &lt;double check that the python executable comes from your venv&gt;\n\n\n(env)jyourusername@yourhostname:~ $ sudo su\n(env)root@yourhostname:~ # which python\n# &lt;you should see that the python executable is in a different place!, even though we still have \"env\"&gt;\n\n\n\nHow to resolve this problem? It is similar to the sudo echo &gt; file problem we saw with Bash. We need to make sure sudo is applying to the correct python executable. There are a few ways we can do this, all of which will look something like this:\n(env)jyourusername@yourhostname:~ $ sudo /absolute/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo ./env/relative/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo $(shell command for finding where python is installed) ./leds.py # use command substitution\nTry a few of these options out (will not work if you copy paste! Make sure you understand the commands)\nUsing a separate environment for each user\nAn alternative method to creating a virtual environment for each of your Python projects is to create a single virtual environment for your user account, and then activate that environment before running any of your Python code. This approach may be preferred if you commonly install the same set of modules for each project, and don’t want to have to bother creating individual Python environments for each project, essentially just duplicating your environment.\n$ python -m venv ~/.env\n$ source ~/.env/bin/activate\n(.env) $\nYou can check again that you’re in a separate environment by using pip list:\n(.env) $ pip list\nPackage    Version\n---------- -------\npip        23.0.1\nsetuptools 66.1.1\n…​and leave it using deactivate.\n(.env) $ deactivate\n$\nCheck library location\nCheck the location of where the module was installed with pip show &lt;module-name&gt;:\n(env) pi@raspberrypi:~ $ pip show seeed-python-reterminal\n\nName: seeed-python-reterminal\nVersion: 0.2\nSummary: seeed-python-reterminal\nHome-page: https://github.com/Seeed-Studio/Seeed_Python_ReTerminal\nAuthor: Takashi Matsuoka (matsujirushi)\nAuthor-email: matsujirushi@live.jp\nLicense: MIT License\nLocation: /usr/local/lib/python3.7/dist-packages      # Library location\nRequires: evdev\nRequired-by: \nThe library is installed at: Location: /usr/local/lib/python3.7/dist-packages"
  },
  {
    "objectID": "lessons/python/package-management-python.slides.html#troubleshooting",
    "href": "lessons/python/package-management-python.slides.html#troubleshooting",
    "title": "Package management in Python",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nCheck python’s library paths\nSimilarly to Linux, there are environmental variables that determine where python will look for installed modules/libraries.\nSee the paths where python is looking for libraries with sys.path. They should look something like:\n\nsystemvenv\n\n\npi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n(env) pi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/home/pi/lab2/python/env/lib/python3.11/site-packages', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n\nIf the output of pip show seeed-python-reterminal is not in this list, python will not find it when you import it.\n\nNote: the python shell above was started as the user pi. If you start python as root, sys.path might have different paths.\n\nNote that the user pi does not have permission to add content inside /usr.\nThus, all pip installations as the regular user go into /home/pi/.local/lib/python3.11/site-packages."
  },
  {
    "objectID": "lessons/python/index.html",
    "href": "lessons/python/index.html",
    "title": "Python",
    "section": "",
    "text": "Intro to Python for Developers\n\n\nPython exercises\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackage management in Python\n\n\nHow to use OS package managers, virtual environments, and pip to manage python applications effectively.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons",
      "Python"
    ]
  },
  {
    "objectID": "lessons/iot/index.html",
    "href": "lessons/iot/index.html",
    "title": "IoT",
    "section": "",
    "text": "Intro to the Internet of Things\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons",
      "IoT"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html",
    "href": "lessons/hardware/reterminal-sensors.html",
    "title": "reTerminal Sensors",
    "section": "",
    "text": "After Lab 1, you have taken the following steps:\n\nInstall the Raspberry Pi OS image.\n\n\ndisassemble, flip the memory switch and use usbboot/rpiboot script to prepare internal memory for firmware flash.\nuse Raspberry Pi Imager to flash new image 64bit “Bookworm” Raspberry OS with chosen username/password and SSH enabled\nfix the “black screen” issue by installing the latest seeed overlay drivers\n\n\nUpdate system packages\n\n\nupdate system repositories with sudo apt update and sudo apt upgrade\ninstall kernel headers with sudo apt install raspberrypi-kernel-headers\ninstall git and docker, deploy simple Python webserver docker container\n\n\nSet up remote connection interfaces\n\n\ndetermine your assigned IP address on the class LAN\ndetermine your device MAC address\nenable VNC interface\n\nIt’s time to take a deeper look at the hardware and software our reTerminal offers.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html#lab-1-review",
    "href": "lessons/hardware/reterminal-sensors.html#lab-1-review",
    "title": "reTerminal Sensors",
    "section": "",
    "text": "After Lab 1, you have taken the following steps:\n\nInstall the Raspberry Pi OS image.\n\n\ndisassemble, flip the memory switch and use usbboot/rpiboot script to prepare internal memory for firmware flash.\nuse Raspberry Pi Imager to flash new image 64bit “Bookworm” Raspberry OS with chosen username/password and SSH enabled\nfix the “black screen” issue by installing the latest seeed overlay drivers\n\n\nUpdate system packages\n\n\nupdate system repositories with sudo apt update and sudo apt upgrade\ninstall kernel headers with sudo apt install raspberrypi-kernel-headers\ninstall git and docker, deploy simple Python webserver docker container\n\n\nSet up remote connection interfaces\n\n\ndetermine your assigned IP address on the class LAN\ndetermine your device MAC address\nenable VNC interface\n\nIt’s time to take a deeper look at the hardware and software our reTerminal offers.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html#hardware",
    "href": "lessons/hardware/reterminal-sensors.html#hardware",
    "title": "reTerminal Sensors",
    "section": "Hardware",
    "text": "Hardware\nThis section is adapted directly from the reTerminal wiki: “Getting Started with reTerminal”\nThe reTerminal is powered by a Raspberry Pi Compute Module 4 (CM4) which is a Quad-Core Cortex-A72 CPU running at 1.5GHz and a 5-inch IPS capacitive multi-touch screen with a resolution of 1280 x 720. It has sufficient amount of RAM (4GB) to perform multitasking and also has sufficient amount of eMMC storage (32GB) to install an operating system, enabling fast boot up times and smooth overall experience. It has wireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE.\nreTerminal consists of a high-speed expansion interface and rich I/O for more expandability. This device has security features such as a cryptographic co-processor with secure hardware-based key storage. It also has built-in modules such as an accelerometer, light sensor and an RTC (Real-Time Clock). reTerminal has a Gigabit Ethernet Port for faster network connections and also has dual USB 2.0 Type-A ports. The 40-pin header on the reTerminal opens it for a wide range of IoT applications.\n\nFirmware & Version\n\n\n\n\n\n\n\n\n\nReleased Date\nPre-Installed OS\nPre-Installed STM32 Firmware\nBoard Version\n\n\n\n\n06/15/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.0\nv1.3\n\n\n08/03/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.1\nv1.4\n\n\n09/03/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.6\nv1.6\n\n\n11/02/2021\n2021-09-14-Raspbian(modified)-32-bit\nV1.8\nv1.6\n\n\nWinter 2024\nWhat OS did we install in Lab 1?\nV1.8\nv1.6\n\n\n\nYou can find a complete list of the reTerminal specifications here: reTerminal Specifications",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html#raspberry-pi-os",
    "href": "lessons/hardware/reterminal-sensors.html#raspberry-pi-os",
    "title": "reTerminal Sensors",
    "section": "Raspberry Pi OS",
    "text": "Raspberry Pi OS\nIn Lab 1, we re-imaged the reTerminal Operating System to run the latest, recommended version of 64-bit Raspberry Pi OS.\nRaspberry Pi OS (previously called Raspbian OS) is a variation of the Debian OS, with optimizations for the Raspberry Pi hardware.\nYou can see more about Raspberry Pi OS and Debian in the Linux set of lessons.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html#programmable-sensors",
    "href": "lessons/hardware/reterminal-sensors.html#programmable-sensors",
    "title": "reTerminal Sensors",
    "section": "Programmable Sensors",
    "text": "Programmable Sensors\nThis section is based on the official documentation for the reTerminal: Hardware and Interfaces Usage\n\nIn Linux, everything is a file stream that can be read and/or written to.\n\nFor example, keyboard inputs and communication over web-sockets are all read as a file streams.\nThe reTerminal has 3 programmable LED’s and a light sensor that can be controlled like a regular file.\n\nYou can see, there are 3 programmable LEDs in the reTerminal:\n\nSTA light can be turned on as red or green.\nUSR light can only be turned on as green.\n\n\nThe lights can be controlled at the OS level by editing files in the /sys/class/leds/ directory. Use ls -al to list the files in this directory:\nusername@hostname:/sys/class/leds/usr_led0 $ ls -al\ntotal 0            \ndrwxr-xr-x 3 root root    0 Jan 25 20:33 .               \ndrwxr-xr-x 8 root root    0 Jan 25 20:33 ..                                                                                                                                                                         \n-rw-r--r-- 1 root root 4096 Jan 26 22:02 brightness                                                                                                                                                                 \n\n\n\nUnix Permissions cheatsheet by Julia Evans\n\n\nThe brightness file inide the usr_led0 controls the brightness of LED0. But, because only root has write permissions to this file, we will likely run into permissions errors if we try to edit the value directly:\n$ nano /sys/class/leds/usr_led0/brightness\nPermission denied\n\n$ echo 255 &gt; /sys/class/leds/usr_led0/brightness\nPermission denied\n\n$ sudo echo 255 &gt; /sys/class/leds/usr_led0/brightness\nPermission denied\nThere are a few possible approaches to this problem:\n\nUse sudo + text-editor\nYou can open a text-editor with root permissions using sudo:\n# nano text editor\nsudo nano /sys/class/leds/usr_led0/brightness\n\n# or, you can use vi/vim text editor\nsudo vi /sys/class/leds/usr_led0/brightness\nEdit the brightness file to a value between 0-255 using the editor. When you save, you should see the change immediately.\n\n\nUse sudo + su\nUsing an editor is perfectly reasonable for a one-off change, but annoying if you want to make the change more often.\nWe can use the echo value &gt; /path/to/file pattern, but only if we have permissions to write to /path/to/file – we can obtain these permissions if we run the entire command as the root user.\n\nNOTE: Running commands as the root user can have unintended consequences, ranging from annoying/tedious to fix, to completely devastating/permanently ruinous for your machine. You should avoid being root wherever possible (see Use sudo + tee section below for how to avoid it for this problem).\n\nYou can enter a root shell instance using the command su (switch user), or by using sudo -i or sudo -s:\nuser@hostname $ sudo su\nroot@hostname # \n\nuser@hostname $ sudo -i\nroot@hostname # \n\nuser@hostname $ sudo -s\nroot@hostname # \nYour shell should now display root@hostname:~#.\nTurn on the LED with maximum brightness\n# echo 255 &gt; brightness\nTurn off the LED\n# echo 0 &gt; brightness\nSimilarly, you can control usr_led1 and usr_led2 and even the buzzer on /sys/class/leds/usr_buzzer\nWhen done working as root, you can exit the root shell and return to your user shell using the exit command (or Ctrl-D as a hotkey):\nroot@hostname # exit\nuser@hostname $\n\n\nUse sudo + tee\nIf we want to avoid using a text editor, AND avoid logging into a root shell instance, it would be great if something like this worked:\n$ sudo echo 255 &gt; /sys/class/leds/usr_led0/brightness\nBut it doesn’t! Can you understand why? Consider which part of the instruction sudo applies to. Unfortunately, there is no way to sudo &gt; or sudo filename since sudo executes commands as the root user, NOT filenames/redirects.\nWhat if there were a command that we could put after the redirect, and sudo that command? What would that command need to do? It’s time to introduce a “new” command: tee.\nTo be clear, tee is a 50 year old program and an absolute classic – it is as ubiquitous/essential as the other OG unix programs like ls, cat, echo. We will see why in the following example.\nTry running man tee in your reTerminal. You should see something like the following:\nTEE(1)\n\nNAME\n       tee - read from standard input and write to standard output and files\n\nSYNOPSIS\n       tee [OPTION]... [FILE]...\n\nDESCRIPTION\n       Copy standard input to each FILE, and also to standard output.\nWe have here a command that will read from standard input, and write that same content from standard input into BOTH standard output AND files – the files we can specify as arguments.\nChallenge for Lab 2: where would you put tee and sudo in the command below, to fix our permissions problems?\n$ echo 255 | /sys/class/leds/usr-led0/brightness \n# this command is missing `tee` and `sudo`.... find where to put them, and you've learned a very important unix pattern!\n\n\nLuminosity Sensor\nThe digital light sensor can read the surrounding light levels.\n\nEnter the following directory\n\ncd /sys/bus/iio/devices/iio:device0\n\nRead the following file to obtain the light intensity value in Lux\n\ncat in_illuminance_input \nOutput:\npi@raspberrypi:/sys/bus/iio/devices/iio:device0 $ cat in_illuminance_input \n2719\nNote: We don’t need to be root to read this file. Its permissions are set to let all users read it, even-though it belongs to the root user:\nrw-r--r-- 1 root root 4096 Jan 30 22:16 in_illuminance_input",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.html#python-library-for-reterminal",
    "href": "lessons/hardware/reterminal-sensors.html#python-library-for-reterminal",
    "title": "reTerminal Sensors",
    "section": "Python Library for reTerminal",
    "text": "Python Library for reTerminal\nSeeed Studio provided a python library to access most of the sensors and actuators of the reTerminal.\nInstall the library seeed-python-reterminal (see official Github repo) using pip:\nNOTE: See Package Management in Python for a clear explanation of how to use venv and pip, particularly for apps requiring root permissions\npip install seeed-python-reterminal\nNow you can import it to a test script (eg. buzz.py)\nimport seeed_python_reterminal.core as rt\nimport time\n\nprint(\"BUZZER ON\")\nrt.buzzer = True\ntime.sleep(1)\n\nprint(\"BUZZER OFF\")\nrt.buzzer = False\nThis will sound the buzzer of the reTerminal for 1 second.\nTo run the script:\nsudo $(which python) buzz.py\nAlternatively, first elevate your shell, then execute the script normally:\nuser@hostname:~ $ sudo -i\nroot@hostname:~# python buzz.py\n\nNote: this library is simply a wrapper to the OS operations we did in the previous section.\n\nSee the official seeed-python-reterminal Github repo for API reference on how to control:\n\nLED’s\nAccelerometer\nProgrammable Buttons\nLight Sensor",
    "crumbs": [
      "Lessons",
      "Hardware",
      "reTerminal Sensors"
    ]
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.slides.html#lab-1-review",
    "href": "lessons/hardware/reterminal-sensors.slides.html#lab-1-review",
    "title": "reTerminal Sensors",
    "section": "Lab 1 Review",
    "text": "Lab 1 Review\nAfter Lab 1, you have taken the following steps:\n\nInstall the Raspberry Pi OS image.\n\n\ndisassemble, flip the memory switch and use usbboot/rpiboot script to prepare internal memory for firmware flash.\nuse Raspberry Pi Imager to flash new image 64bit “Bookworm” Raspberry OS with chosen username/password and SSH enabled\nfix the “black screen” issue by installing the latest seeed overlay drivers\n\n\nUpdate system packages\n\n\nupdate system repositories with sudo apt update and sudo apt upgrade\ninstall kernel headers with sudo apt install raspberrypi-kernel-headers\ninstall git and docker, deploy simple Python webserver docker container\n\n\nSet up remote connection interfaces\n\n\ndetermine your assigned IP address on the class LAN\ndetermine your device MAC address\nenable VNC interface\n\nIt’s time to take a deeper look at the hardware and software our reTerminal offers."
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.slides.html#hardware",
    "href": "lessons/hardware/reterminal-sensors.slides.html#hardware",
    "title": "reTerminal Sensors",
    "section": "Hardware",
    "text": "Hardware\nThis section is adapted directly from the reTerminal wiki: “Getting Started with reTerminal”\nThe reTerminal is powered by a Raspberry Pi Compute Module 4 (CM4) which is a Quad-Core Cortex-A72 CPU running at 1.5GHz and a 5-inch IPS capacitive multi-touch screen with a resolution of 1280 x 720. It has sufficient amount of RAM (4GB) to perform multitasking and also has sufficient amount of eMMC storage (32GB) to install an operating system, enabling fast boot up times and smooth overall experience. It has wireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE.\nreTerminal consists of a high-speed expansion interface and rich I/O for more expandability. This device has security features such as a cryptographic co-processor with secure hardware-based key storage. It also has built-in modules such as an accelerometer, light sensor and an RTC (Real-Time Clock). reTerminal has a Gigabit Ethernet Port for faster network connections and also has dual USB 2.0 Type-A ports. The 40-pin header on the reTerminal opens it for a wide range of IoT applications.\nFirmware & Version\n\n\n\n\n\n\n\n\n\nReleased Date\nPre-Installed OS\nPre-Installed STM32 Firmware\nBoard Version\n\n\n\n\n06/15/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.0\nv1.3\n\n\n08/03/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.1\nv1.4\n\n\n09/03/2021\n2021-06-02-Raspbian(modified)-32-bit\nV1.6\nv1.6\n\n\n11/02/2021\n2021-09-14-Raspbian(modified)-32-bit\nV1.8\nv1.6\n\n\nWinter 2024\nWhat OS did we install in Lab 1?\nV1.8\nv1.6\n\n\n\nYou can find a complete list of the reTerminal specifications here: reTerminal Specifications"
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.slides.html#raspberry-pi-os",
    "href": "lessons/hardware/reterminal-sensors.slides.html#raspberry-pi-os",
    "title": "reTerminal Sensors",
    "section": "Raspberry Pi OS",
    "text": "Raspberry Pi OS\nIn Lab 1, we re-imaged the reTerminal Operating System to run the latest, recommended version of 64-bit Raspberry Pi OS.\nRaspberry Pi OS (previously called Raspbian OS) is a variation of the Debian OS, with optimizations for the Raspberry Pi hardware.\nYou can see more about Raspberry Pi OS and Debian in the Linux set of lessons."
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.slides.html#programmable-sensors",
    "href": "lessons/hardware/reterminal-sensors.slides.html#programmable-sensors",
    "title": "reTerminal Sensors",
    "section": "Programmable Sensors",
    "text": "Programmable Sensors\nThis section is based on the official documentation for the reTerminal: Hardware and Interfaces Usage\n\nIn Linux, everything is a file stream that can be read and/or written to.\n\nFor example, keyboard inputs and communication over web-sockets are all read as a file streams.\nThe reTerminal has 3 programmable LED’s and a light sensor that can be controlled like a regular file.\n\nYou can see, there are 3 programmable LEDs in the reTerminal:\n\nSTA light can be turned on as red or green.\nUSR light can only be turned on as green.\n\n\nThe lights can be controlled at the OS level by editing files in the /sys/class/leds/ directory. Use ls -al to list the files in this directory:\nusername@hostname:/sys/class/leds/usr_led0 $ ls -al\ntotal 0            \ndrwxr-xr-x 3 root root    0 Jan 25 20:33 .               \ndrwxr-xr-x 8 root root    0 Jan 25 20:33 ..                                                                                                                                                                         \n-rw-r--r-- 1 root root 4096 Jan 26 22:02 brightness                                                                                                                                                                 \n\n\n\nUnix Permissions cheatsheet by Julia Evans\n\n\nThe brightness file inide the usr_led0 controls the brightness of LED0. But, because only root has write permissions to this file, we will likely run into permissions errors if we try to edit the value directly:\n$ nano /sys/class/leds/usr_led0/brightness\nPermission denied\n\n$ echo 255 &gt; /sys/class/leds/usr_led0/brightness\nPermission denied\n\n$ sudo echo 255 &gt; /sys/class/leds/usr_led0/brightness\nPermission denied\nThere are a few possible approaches to this problem:\nUse sudo + text-editor\nYou can open a text-editor with root permissions using sudo:\n# nano text editor\nsudo nano /sys/class/leds/usr_led0/brightness\n\n# or, you can use vi/vim text editor\nsudo vi /sys/class/leds/usr_led0/brightness\nEdit the brightness file to a value between 0-255 using the editor. When you save, you should see the change immediately.\nUse sudo + su\nUsing an editor is perfectly reasonable for a one-off change, but annoying if you want to make the change more often.\nWe can use the echo value &gt; /path/to/file pattern, but only if we have permissions to write to /path/to/file – we can obtain these permissions if we run the entire command as the root user.\n\nNOTE: Running commands as the root user can have unintended consequences, ranging from annoying/tedious to fix, to completely devastating/permanently ruinous for your machine. You should avoid being root wherever possible (see Use sudo + tee section below for how to avoid it for this problem).\n\nYou can enter a root shell instance using the command su (switch user), or by using sudo -i or sudo -s:\nuser@hostname $ sudo su\nroot@hostname # \n\nuser@hostname $ sudo -i\nroot@hostname # \n\nuser@hostname $ sudo -s\nroot@hostname # \nYour shell should now display root@hostname:~#.\nTurn on the LED with maximum brightness\n# echo 255 &gt; brightness\nTurn off the LED\n# echo 0 &gt; brightness\nSimilarly, you can control usr_led1 and usr_led2 and even the buzzer on /sys/class/leds/usr_buzzer\nWhen done working as root, you can exit the root shell and return to your user shell using the exit command (or Ctrl-D as a hotkey):\nroot@hostname # exit\nuser@hostname $\nUse sudo + tee\nIf we want to avoid using a text editor, AND avoid logging into a root shell instance, it would be great if something like this worked:\n$ sudo echo 255 &gt; /sys/class/leds/usr_led0/brightness\nBut it doesn’t! Can you understand why? Consider which part of the instruction sudo applies to. Unfortunately, there is no way to sudo &gt; or sudo filename since sudo executes commands as the root user, NOT filenames/redirects.\nWhat if there were a command that we could put after the redirect, and sudo that command? What would that command need to do? It’s time to introduce a “new” command: tee.\nTo be clear, tee is a 50 year old program and an absolute classic – it is as ubiquitous/essential as the other OG unix programs like ls, cat, echo. We will see why in the following example.\nTry running man tee in your reTerminal. You should see something like the following:\nTEE(1)\n\nNAME\n       tee - read from standard input and write to standard output and files\n\nSYNOPSIS\n       tee [OPTION]... [FILE]...\n\nDESCRIPTION\n       Copy standard input to each FILE, and also to standard output.\nWe have here a command that will read from standard input, and write that same content from standard input into BOTH standard output AND files – the files we can specify as arguments.\nChallenge for Lab 2: where would you put tee and sudo in the command below, to fix our permissions problems?\n$ echo 255 | /sys/class/leds/usr-led0/brightness \n# this command is missing `tee` and `sudo`.... find where to put them, and you've learned a very important unix pattern!\nLuminosity Sensor\nThe digital light sensor can read the surrounding light levels.\n\nEnter the following directory\n\ncd /sys/bus/iio/devices/iio:device0\n\nRead the following file to obtain the light intensity value in Lux\n\ncat in_illuminance_input \nOutput:\npi@raspberrypi:/sys/bus/iio/devices/iio:device0 $ cat in_illuminance_input \n2719\nNote: We don’t need to be root to read this file. Its permissions are set to let all users read it, even-though it belongs to the root user:\nrw-r--r-- 1 root root 4096 Jan 30 22:16 in_illuminance_input"
  },
  {
    "objectID": "lessons/hardware/reterminal-sensors.slides.html#python-library-for-reterminal",
    "href": "lessons/hardware/reterminal-sensors.slides.html#python-library-for-reterminal",
    "title": "reTerminal Sensors",
    "section": "Python Library for reTerminal",
    "text": "Python Library for reTerminal\nSeeed Studio provided a python library to access most of the sensors and actuators of the reTerminal.\nInstall the library seeed-python-reterminal (see official Github repo) using pip:\nNOTE: See Package Management in Python for a clear explanation of how to use venv and pip, particularly for apps requiring root permissions\npip install seeed-python-reterminal\nNow you can import it to a test script (eg. buzz.py)\nimport seeed_python_reterminal.core as rt\nimport time\n\nprint(\"BUZZER ON\")\nrt.buzzer = True\ntime.sleep(1)\n\nprint(\"BUZZER OFF\")\nrt.buzzer = False\nThis will sound the buzzer of the reTerminal for 1 second.\nTo run the script:\nsudo $(which python) buzz.py\nAlternatively, first elevate your shell, then execute the script normally:\nuser@hostname:~ $ sudo -i\nroot@hostname:~# python buzz.py\n\nNote: this library is simply a wrapper to the OS operations we did in the previous section.\n\nSee the official seeed-python-reterminal Github repo for API reference on how to control:\n\nLED’s\nAccelerometer\nProgrammable Buttons\nLight Sensor"
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html",
    "href": "lessons/hardware/analog-vs-digital.html",
    "title": "Signals: Analog and digital",
    "section": "",
    "text": "We will use analog and digital signals to communicate with sensors.\nThis section briefly compares these two types of signals and illustrates how we might encounter while using IoT hardware.\nTo compare analog and digital signals, let’s look at how we can track 3 different sources of information:",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#analog-the-natural-world",
    "href": "lessons/hardware/analog-vs-digital.html#analog-the-natural-world",
    "title": "Signals: Analog and digital",
    "section": "Analog: the natural world",
    "text": "Analog: the natural world\nWe live in an analog world. Most of the naturally occurring events that we experience happen in an analog form.\n\nAnalog signals varies continuously in time and amplitude.\nThis means that changes happen over a range of values with infinite “in between” steps.\n\nFor example, the following events have an infinite number of transitions. It only depends on how accurately you can track them:\n\nThe colors in a rainbow.\nThe position of a swinging pendulum.\nThe exact time of the day.\n\n\nTemperature\nThe A/C and heating systems in a house are typically activated once the temperature reaches some minimum and maximum values.\nThe chart below is tracking the temperature in a room as the A/C and heating systems are activated over a few days.\n\n\n Temperature changes over time   Adapted from poster: Analog and Digital Signals by Digikey.\n\nLet’s say the maximum temperature reached in the room is 30C and the minimum temperature is 15C. A person in the room would have observed every possible temperature in between that range (15.01, 15.0101, 15.0102, 15.01021, etc).\nThe change in temperature produces analog information since it is changing over an infinite range of values.\n\n\nSound\nSound is also an example of an analog signal.\nWhen a volume of air is displaced quickly, air molecules are compressed against each other creating a high-pressure region. The high pressure region expands and compresses the air in the neighbouring area. Sound can travel thanks to this “chain effect”.\n\nBy observing how the air pressure changes over time, we can draw a sound wave.\nThis is how speakers and microphones interact with air to generate sound.\n\n\n\n\nAnimation of acoustic wave travelling in air\n\n\n\n Sound waves travelling through air   - Waves and Acoustics Animations by isvr.\n\nSound waves are also an example of an analog signal because the amplitude of the wave transitions through the entire range of possible values between the Min and Max.\n\n\nAnalog Signals Graphs\nA signal varies over time. It’s helpful to plot it on a graph where time is plotted on the horizontal, x-axis, and the value being tracked on the vertical, y-axis.\nLooking at a graph of a signal is usually the easiest way to identify if it’s analog or digital.\n\nWhen dealing with electricity we track voltage levels (amplitude).\nA time-versus-voltage graph of an analog signal should be smooth and continuous.\n\n\n\n\nAnalog Sine Wave\n\n\nWhile these signals may be limited to a range of maximum and minimum values, there are still an infinite number of possible values within that range.\nFor example, the analog voltage coming out of your wall socket oscillates between -120V and +120V. As you increase the resolution more and more, you discover an infinite number of values that the signal can actually be (64.4V, 64.42V, 64.424V, and other increasingly precise values).",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#digital-discrete-values",
    "href": "lessons/hardware/analog-vs-digital.html#digital-discrete-values",
    "title": "Signals: Analog and digital",
    "section": "Digital: discrete values",
    "text": "Digital: discrete values\nDigital signals are discrete, which means that at any given moment, the signal strength must be represented by a integer number. There are no half numbers.\nTypically, digital signals will be one of two values, a high voltage and a low voltage.\n\nThe specific values of the high and low voltages depend on the hardware being used.\n\nBelow is a the timing graph of a signal whose low voltage is 0 volts and high voltage is 5 volts.\nThis type of signal is also known as a square waves.\n\n\n 0 to 5 volt “pulses” forming a square ware   - Analog vs. Digital by Digikey.\n\n\nDigital Simulating Analogue\nA digital signal might be a discrete representation of an analog waveform.\nViewed from afar, the wave function below may seem smooth and analog, but when you look closely there are tiny discrete steps as the signal tries to approximate analog values.\n\n\n Oscillating voltage from -120V to 120V represented as a digital signal   - Analog vs. Digital by Digikey.\n\nThe number of discrete steps that a digital signal can use depends on how many bits are available for each recorded value. This is also called bit resolution (see Sampling below).\nFor example, if a data point can only use one bit of definition, then it can only track on/off states, resulting in the red square wave seen above.\nHowever, if a data point can use 8 bits to store a value, then it can represent a value ranging from 0 to 255 (see the green sinusoidal voltage wave above).",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#analog-to-digital-conversion-adc",
    "href": "lessons/hardware/analog-vs-digital.html#analog-to-digital-conversion-adc",
    "title": "Signals: Analog and digital",
    "section": "Analog to Digital Conversion (ADC)",
    "text": "Analog to Digital Conversion (ADC)\nIf most natural events are analog, how do we represent them in digital format? For example, if audio is analog, how can we get a computer to play music?\n\nAn analog to digital converter (ADC) is a device that can read a analog signal and generate a digital representation of this signal.\n\nADC’s are specific to the type of analog signal they are trying to read (sound, voltage, temperature, light, etc).\nReferring to the room temperature example used earlier, if we used a digital thermometer to record the temperature, our graph might look like the following:\n\n\n Temperature represented as a digital reading   Poster: Analog and Digital Signals by Digikey.\n\nIn the example above, a digital temperature reading was taken every 3hr.\n\nThe digital signal representation of the temperature is not smooth or accurate.\nHowever, depending on the application it might be sufficient.\n\nTo make the signal smoother or more representative of the real analog signal we need to take samples more regularly (eg. every 1min).\nThe process of reading an analog signal over time to generate its digital representation is called sampling.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#sampling",
    "href": "lessons/hardware/analog-vs-digital.html#sampling",
    "title": "Signals: Analog and digital",
    "section": "Sampling",
    "text": "Sampling\nSampling is the process of inspecting the value of an analog signal at regular time intervals.\nWhen an ADC is sampling an analog signal, there are two variables that will characterize the digital output:\n\nSampling rate.\nBit resolution.\n\n\nMusic sampling Some music genres like rap and hip-hop commonly sample song segments from other artists to play in the background.\n\nThe term sampling is used because traditionally song segments were extracted from vinyl records which produce analog sound and saved in digital formats.\n\n\n\n\n\nSampling rate\nThe time between samples is the sample period (T, in seconds), and the number of samples taken per second is the sample frequency or sample rate (fs, in samples/second or Hz).\nBasically, sampling is taking snap-shot values of the analog signal at regular time intervals.\n\n\n\nAnalog signal showing sample period and sample frequency\n\n\n\n Sample period and fequency for an electric signal   - US Naval Academy.\n\nSampling period examples:\n\nIf a signal is sampled every half second (0.5s sampling period, T), the sample frequency (f*) is 1/0.5s = 2 Hz (times per second).\nIf the sample frequency (f) is 2000 Hz, the sampling period (T) is = 1/2000Hz = 0.0005 secs (0.5 milliseconds).\n\nThe higher the sample rate, the more accurate the digital signal is.\n\n\n\nSignals of increasing sample rate\n\n\n\n Same signal sampled with different sample rates   - US Naval Academy.\n\n\n\nEncoding & Bit resolution\nEncoding is the process of mapping the sampled analog signal value to discrete binary numbers (digital information).\n\nADC devices are characterized by the number of bits available to represent a signal.\n\nFor example, consider an electrical signal that ranges from -1 volts to to +1 volts and must be converted to a 3 bit number.\n\n\nEncoding Procedure\nTo approximate the numeric conversion from a voltage signal to a digital output, follow the steps below:\n\nIdentify the minimum and maximum voltage values that can be observed in the input.\n\nExample: -1 to +1 volts (2 volt range)\n\nIdentify the minimum and maximum binary values that can generated as the output. Note the amount of unique numbers represented by this range\n\nExample: For a 3-bit number: 000 (decimal 0) is the minimum and 111 (decimal 7) is the maximum, making a total of 8 unique numbers.\n\nDivide the voltage range that will be observed (max voltage - min voltage) by the amount of unique binary numbers available. This will determine the voltage increment that each binary number represents.\n\nExample: (+1V - (-1V)) / 8 = 2V/8 = 0.25V\n\nLayout each binary number and their increments and read where the voltage values lie.\n\nAssuming the ADC has a resolution of 3 bits, all voltage values (-1V to 1V) must be represented with at most 3 bits, or 2^3 = 8 unique values (0 is a unique value).\n\n\n\nvoltage signal converted to a bit resolution of 3 bits\n\n\n\n Voltage signal between -1V and 1V converted to digital with a 3 bit resolution   - US Naval Academy.\n\nIn this case: - 000 is assigned to the voltages from -0.75 V to -1.0 V, - 001 is assigned to the voltages from -0.5 V to -0.749 V, - 010 is assigned to the voltages from -0.25 V to -0.49 V, - and so on.\nThe binary representation of the above signal is:\n110 101 100 011 011 100 110 110 100 010 000 000 001\nIf the sampling is happening 2000 times per second (Hz) and for every sample we generate 3 bits, we are generating 2000 x 3 bits = 6000 bits/sec of information. This is also know as the bitrate.\nIf a song of 3 minutes is sampled with the same specs, how big will this file be in kB?\nWhat is the bitrate of music on Spotify?\n\n\nSensor voltages & bit resolution\nIoT systems typically work with electrical signals encoded in voltage levels.\nEvery hardware that converts from analog to digital (and vice-versa) needs to have an appropriate ACD device.\nMicrocontrollers are often used to process these signals because they often have an integrated ACD and they are very inexpensive.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#exercises",
    "href": "lessons/hardware/analog-vs-digital.html#exercises",
    "title": "Signals: Analog and digital",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1\nConsidering the analog signal below. The signal is being sampled in a program at 2Hz (2 times/sec) with the help of an ADC that has 6-bit resolution. The ADC can handle up to 8V signals.\n\nWhat are the voltages being sampled by the ADC?\nIf the signal reached max voltage, what would be the integer number passed to the program by the ADC?\n\n\n\n\nGraph for exercise 1\n\n\n\n\nSolution\n\n\n\nSampled voltages: 4, 6, 6, 0, 2, 2, 2, 5, 6, 4\n\n\n\nSince the ADC has a 6-bit resolution, it can represent values up to 63 (all 6 bits ON at the same time). Max voltage would result in the integer 63.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.html#references",
    "href": "lessons/hardware/analog-vs-digital.html#references",
    "title": "Signals: Analog and digital",
    "section": "References",
    "text": "References\n\nAnalog vs. Digital by Sparkfun.\nLesson 20: Analog to Digital Conversion, Course EC312, US Naval Academy.\nLessons 4 and 5, Telecom course, Sandy Bultena.\n\n\nVideo Reference",
    "crumbs": [
      "Lessons",
      "Hardware",
      "Signals: Analog and digital"
    ]
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#analog-the-natural-world",
    "href": "lessons/hardware/analog-vs-digital.slides.html#analog-the-natural-world",
    "title": "Signals: Analog and digital",
    "section": "Analog: the natural world",
    "text": "Analog: the natural world\nWe live in an analog world. Most of the naturally occurring events that we experience happen in an analog form.\n\nAnalog signals varies continuously in time and amplitude.\nThis means that changes happen over a range of values with infinite “in between” steps.\n\nFor example, the following events have an infinite number of transitions. It only depends on how accurately you can track them:\n\nThe colors in a rainbow.\nThe position of a swinging pendulum.\nThe exact time of the day.\n\nTemperature\nThe A/C and heating systems in a house are typically activated once the temperature reaches some minimum and maximum values.\nThe chart below is tracking the temperature in a room as the A/C and heating systems are activated over a few days.\n\n\n Temperature changes over time   Adapted from poster: Analog and Digital Signals by Digikey.\n\nLet’s say the maximum temperature reached in the room is 30C and the minimum temperature is 15C. A person in the room would have observed every possible temperature in between that range (15.01, 15.0101, 15.0102, 15.01021, etc).\nThe change in temperature produces analog information since it is changing over an infinite range of values.\nSound\nSound is also an example of an analog signal.\nWhen a volume of air is displaced quickly, air molecules are compressed against each other creating a high-pressure region. The high pressure region expands and compresses the air in the neighbouring area. Sound can travel thanks to this “chain effect”.\n\nBy observing how the air pressure changes over time, we can draw a sound wave.\nThis is how speakers and microphones interact with air to generate sound.\n\n\n\n\nAnimation of acoustic wave travelling in air\n\n\n\n Sound waves travelling through air   - Waves and Acoustics Animations by isvr.\n\nSound waves are also an example of an analog signal because the amplitude of the wave transitions through the entire range of possible values between the Min and Max.\nAnalog Signals Graphs\nA signal varies over time. It’s helpful to plot it on a graph where time is plotted on the horizontal, x-axis, and the value being tracked on the vertical, y-axis.\nLooking at a graph of a signal is usually the easiest way to identify if it’s analog or digital.\n\nWhen dealing with electricity we track voltage levels (amplitude).\nA time-versus-voltage graph of an analog signal should be smooth and continuous.\n\n\n\n\nAnalog Sine Wave\n\n\nWhile these signals may be limited to a range of maximum and minimum values, there are still an infinite number of possible values within that range.\nFor example, the analog voltage coming out of your wall socket oscillates between -120V and +120V. As you increase the resolution more and more, you discover an infinite number of values that the signal can actually be (64.4V, 64.42V, 64.424V, and other increasingly precise values)."
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#digital-discrete-values",
    "href": "lessons/hardware/analog-vs-digital.slides.html#digital-discrete-values",
    "title": "Signals: Analog and digital",
    "section": "Digital: discrete values",
    "text": "Digital: discrete values\nDigital signals are discrete, which means that at any given moment, the signal strength must be represented by a integer number. There are no half numbers.\nTypically, digital signals will be one of two values, a high voltage and a low voltage.\n\nThe specific values of the high and low voltages depend on the hardware being used.\n\nBelow is a the timing graph of a signal whose low voltage is 0 volts and high voltage is 5 volts.\nThis type of signal is also known as a square waves.\n\n\n 0 to 5 volt “pulses” forming a square ware   - Analog vs. Digital by Digikey.\n\nDigital Simulating Analogue\nA digital signal might be a discrete representation of an analog waveform.\nViewed from afar, the wave function below may seem smooth and analog, but when you look closely there are tiny discrete steps as the signal tries to approximate analog values.\n\n\n Oscillating voltage from -120V to 120V represented as a digital signal   - Analog vs. Digital by Digikey.\n\nThe number of discrete steps that a digital signal can use depends on how many bits are available for each recorded value. This is also called bit resolution (see Sampling below).\nFor example, if a data point can only use one bit of definition, then it can only track on/off states, resulting in the red square wave seen above.\nHowever, if a data point can use 8 bits to store a value, then it can represent a value ranging from 0 to 255 (see the green sinusoidal voltage wave above)."
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#analog-to-digital-conversion-adc",
    "href": "lessons/hardware/analog-vs-digital.slides.html#analog-to-digital-conversion-adc",
    "title": "Signals: Analog and digital",
    "section": "Analog to Digital Conversion (ADC)",
    "text": "Analog to Digital Conversion (ADC)\nIf most natural events are analog, how do we represent them in digital format? For example, if audio is analog, how can we get a computer to play music?\n\nAn analog to digital converter (ADC) is a device that can read a analog signal and generate a digital representation of this signal.\n\nADC’s are specific to the type of analog signal they are trying to read (sound, voltage, temperature, light, etc).\nReferring to the room temperature example used earlier, if we used a digital thermometer to record the temperature, our graph might look like the following:\n\n\n Temperature represented as a digital reading   Poster: Analog and Digital Signals by Digikey.\n\nIn the example above, a digital temperature reading was taken every 3hr.\n\nThe digital signal representation of the temperature is not smooth or accurate.\nHowever, depending on the application it might be sufficient.\n\nTo make the signal smoother or more representative of the real analog signal we need to take samples more regularly (eg. every 1min).\nThe process of reading an analog signal over time to generate its digital representation is called sampling."
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#sampling",
    "href": "lessons/hardware/analog-vs-digital.slides.html#sampling",
    "title": "Signals: Analog and digital",
    "section": "Sampling",
    "text": "Sampling\nSampling is the process of inspecting the value of an analog signal at regular time intervals.\nWhen an ADC is sampling an analog signal, there are two variables that will characterize the digital output:\n\nSampling rate.\nBit resolution.\n\n\nMusic sampling Some music genres like rap and hip-hop commonly sample song segments from other artists to play in the background.\n\nThe term sampling is used because traditionally song segments were extracted from vinyl records which produce analog sound and saved in digital formats.\n\n\n\n\nSampling rate\nThe time between samples is the sample period (T, in seconds), and the number of samples taken per second is the sample frequency or sample rate (fs, in samples/second or Hz).\nBasically, sampling is taking snap-shot values of the analog signal at regular time intervals.\n\n\n\nAnalog signal showing sample period and sample frequency\n\n\n\n Sample period and fequency for an electric signal   - US Naval Academy.\n\nSampling period examples:\n\nIf a signal is sampled every half second (0.5s sampling period, T), the sample frequency (f*) is 1/0.5s = 2 Hz (times per second).\nIf the sample frequency (f) is 2000 Hz, the sampling period (T) is = 1/2000Hz = 0.0005 secs (0.5 milliseconds).\n\nThe higher the sample rate, the more accurate the digital signal is.\n\n\n\nSignals of increasing sample rate\n\n\n\n Same signal sampled with different sample rates   - US Naval Academy.\n\nEncoding & Bit resolution\nEncoding is the process of mapping the sampled analog signal value to discrete binary numbers (digital information).\n\nADC devices are characterized by the number of bits available to represent a signal.\n\nFor example, consider an electrical signal that ranges from -1 volts to to +1 volts and must be converted to a 3 bit number.\nEncoding Procedure\nTo approximate the numeric conversion from a voltage signal to a digital output, follow the steps below:\n\nIdentify the minimum and maximum voltage values that can be observed in the input.\n\nExample: -1 to +1 volts (2 volt range)\n\nIdentify the minimum and maximum binary values that can generated as the output. Note the amount of unique numbers represented by this range\n\nExample: For a 3-bit number: 000 (decimal 0) is the minimum and 111 (decimal 7) is the maximum, making a total of 8 unique numbers.\n\nDivide the voltage range that will be observed (max voltage - min voltage) by the amount of unique binary numbers available. This will determine the voltage increment that each binary number represents.\n\nExample: (+1V - (-1V)) / 8 = 2V/8 = 0.25V\n\nLayout each binary number and their increments and read where the voltage values lie.\n\nAssuming the ADC has a resolution of 3 bits, all voltage values (-1V to 1V) must be represented with at most 3 bits, or 2^3 = 8 unique values (0 is a unique value).\n\n\n\nvoltage signal converted to a bit resolution of 3 bits\n\n\n\n Voltage signal between -1V and 1V converted to digital with a 3 bit resolution   - US Naval Academy.\n\nIn this case: - 000 is assigned to the voltages from -0.75 V to -1.0 V, - 001 is assigned to the voltages from -0.5 V to -0.749 V, - 010 is assigned to the voltages from -0.25 V to -0.49 V, - and so on.\nThe binary representation of the above signal is:\n110 101 100 011 011 100 110 110 100 010 000 000 001\nIf the sampling is happening 2000 times per second (Hz) and for every sample we generate 3 bits, we are generating 2000 x 3 bits = 6000 bits/sec of information. This is also know as the bitrate.\nIf a song of 3 minutes is sampled with the same specs, how big will this file be in kB?\nWhat is the bitrate of music on Spotify?\nSensor voltages & bit resolution\nIoT systems typically work with electrical signals encoded in voltage levels.\nEvery hardware that converts from analog to digital (and vice-versa) needs to have an appropriate ACD device.\nMicrocontrollers are often used to process these signals because they often have an integrated ACD and they are very inexpensive."
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#exercises",
    "href": "lessons/hardware/analog-vs-digital.slides.html#exercises",
    "title": "Signals: Analog and digital",
    "section": "Exercises",
    "text": "Exercises\nExercise 1\nConsidering the analog signal below. The signal is being sampled in a program at 2Hz (2 times/sec) with the help of an ADC that has 6-bit resolution. The ADC can handle up to 8V signals.\n\nWhat are the voltages being sampled by the ADC?\nIf the signal reached max voltage, what would be the integer number passed to the program by the ADC?\n\n\nGraph for exercise 1\n\nSolution\n\n\n\nSampled voltages: 4, 6, 6, 0, 2, 2, 2, 5, 6, 4\n\n\n\nSince the ADC has a 6-bit resolution, it can represent values up to 63 (all 6 bits ON at the same time). Max voltage would result in the integer 63."
  },
  {
    "objectID": "lessons/hardware/analog-vs-digital.slides.html#references",
    "href": "lessons/hardware/analog-vs-digital.slides.html#references",
    "title": "Signals: Analog and digital",
    "section": "References",
    "text": "References\n\nAnalog vs. Digital by Sparkfun.\nLesson 20: Analog to Digital Conversion, Course EC312, US Naval Academy.\nLessons 4 and 5, Telecom course, Sandy Bultena.\n\nVideo Reference"
  },
  {
    "objectID": "lessons/getting-started/tech-stack.html",
    "href": "lessons/getting-started/tech-stack.html",
    "title": "Technology Stack",
    "section": "",
    "text": "hardware platform used for the course: reTerminal\n\n\n\nOpen source hardware manufactured by Seeed Studios (Shenzhen, China)\nBuilt around the Raspberry Pi platform. Uses a Raspberry Pi Compute Module 4 (CM4)\nSee the official wiki page for specs and details.\nRuns the Linux based Raspberry PI Operating system\n\n\n\n\n\n\n\nenter image description here\n\n\n\nA standard for wiring sensors to a connector.\nEliminates the need for breadboards and complicated wiring.\nSupported communication protocols: Digital, Analog, UART and I2C.\nSee official wiki page for details.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Technology Stack"
    ]
  },
  {
    "objectID": "lessons/getting-started/tech-stack.html#hardware",
    "href": "lessons/getting-started/tech-stack.html#hardware",
    "title": "Technology Stack",
    "section": "",
    "text": "hardware platform used for the course: reTerminal\n\n\n\nOpen source hardware manufactured by Seeed Studios (Shenzhen, China)\nBuilt around the Raspberry Pi platform. Uses a Raspberry Pi Compute Module 4 (CM4)\nSee the official wiki page for specs and details.\nRuns the Linux based Raspberry PI Operating system\n\n\n\n\n\n\n\nenter image description here\n\n\n\nA standard for wiring sensors to a connector.\nEliminates the need for breadboards and complicated wiring.\nSupported communication protocols: Digital, Analog, UART and I2C.\nSee official wiki page for details.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Technology Stack"
    ]
  },
  {
    "objectID": "lessons/getting-started/tech-stack.html#software",
    "href": "lessons/getting-started/tech-stack.html#software",
    "title": "Technology Stack",
    "section": "Software",
    "text": "Software\n\nPython\n\n\n\npython™\n\n\nThis course will be using Python version 3.10 to: - Run programs inside the Raspberry Pi (reTerminal) in order to read and control sensors. - Communicate with the API of the Cloud Platform.\n\n\nVS Code IDE\n\n\n\nPart 1: Your First Website | HTML & CSS Tutorial | code …\n\n\nVisual Studio Code IDE will be used with various extensions in order to: - Program in Python (linting, intellisence, debugging, etc) - Remotely connecting to the Respberry Pi. - Connecting to Microsoft Azure.\n\n\nLinux (Raspberry Pi OS)\n\n\n\nLogo for raspberry pi os\n\n\nThe operating system running inside the reTerminal is Raspberry Pi OS. - Linux Debian based. - Requires basic use of BASH shell (eg. ssh, and environmental variables).\n\n\nMicrosoft Azure\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\nMicrosoft Azure will be used as the main platform that will: - Register and connect devices. - Store and analyse data. - Manage the security layer. - Provide libraries (SDKs) that can easily be integrated into our code. - For more information see Azure IoT page.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Technology Stack"
    ]
  },
  {
    "objectID": "lessons/getting-started/tech-stack.slides.html#hardware",
    "href": "lessons/getting-started/tech-stack.slides.html#hardware",
    "title": "Technology Stack",
    "section": "Hardware",
    "text": "Hardware\nreTerminal from Seeed\n\n\n\nhardware platform used for the course: reTerminal\n\n\n\nOpen source hardware manufactured by Seeed Studios (Shenzhen, China)\nBuilt around the Raspberry Pi platform. Uses a Raspberry Pi Compute Module 4 (CM4)\nSee the official wiki page for specs and details.\nRuns the Linux based Raspberry PI Operating system\n\nGrove Connection System\n\n\n\nenter image description here\n\n\n\nA standard for wiring sensors to a connector.\nEliminates the need for breadboards and complicated wiring.\nSupported communication protocols: Digital, Analog, UART and I2C.\nSee official wiki page for details."
  },
  {
    "objectID": "lessons/getting-started/tech-stack.slides.html#software",
    "href": "lessons/getting-started/tech-stack.slides.html#software",
    "title": "Technology Stack",
    "section": "Software",
    "text": "Software\nPython\n\n\n\npython™\n\n\nThis course will be using Python version 3.10 to: - Run programs inside the Raspberry Pi (reTerminal) in order to read and control sensors. - Communicate with the API of the Cloud Platform.\nVS Code IDE\n\n\n\nPart 1: Your First Website | HTML & CSS Tutorial | code …\n\n\nVisual Studio Code IDE will be used with various extensions in order to: - Program in Python (linting, intellisence, debugging, etc) - Remotely connecting to the Respberry Pi. - Connecting to Microsoft Azure.\nLinux (Raspberry Pi OS)\n\n\n\nLogo for raspberry pi os\n\n\nThe operating system running inside the reTerminal is Raspberry Pi OS. - Linux Debian based. - Requires basic use of BASH shell (eg. ssh, and environmental variables).\nMicrosoft Azure\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\nMicrosoft Azure will be used as the main platform that will: - Register and connect devices. - Store and analyse data. - Manage the security layer. - Provide libraries (SDKs) that can easily be integrated into our code. - For more information see Azure IoT page."
  },
  {
    "objectID": "lessons/getting-started/index.html",
    "href": "lessons/getting-started/index.html",
    "title": "Getting started",
    "section": "",
    "text": "Technology Stack\n\n\nTechnologies used in this class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHardware List\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeveloper setup\n\n\nHere’s how to set up the software that will be used for development during the course.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons",
      "Getting started"
    ]
  },
  {
    "objectID": "lessons/linux/remote-linux.html",
    "href": "lessons/linux/remote-linux.html",
    "title": "Remote work on Linux",
    "section": "",
    "text": "Login into the R.Pi without password by setting up SSH credentials\n\nFollow guide by Raspberry Pi Foundation:\n\nPasswordless SSH Access\n\n\n\n\n\n# Update source repositories -- a good idea any time you are installing a package.\nsudo apt update -y\n# Install xclip for clipboard support with ssh graphical session `-Y`\nsudo apt install xclip -y\nsudo apt-get install neovim\n\n\nAfter installing nvim:\n# Install a Nerd Fonts (FiraCode)\ncd ~/Downloads\nwget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip\nunzip FiraCode.zip\n\n# Font installation according to Debian's docs: https://wiki.debian.org/Fonts\n# Move to systam-wide font folder\nsudo mv *.ttf /usr/local/share/fonts/\n# update the font cache\nfc-cache\n# Follow AstroNvim install instructions: https://astronvim.github.io/#%EF%B8%8F-installation\n\n# Make a backup of your current nvim folder\nmv ~/.config/nvim ~/.config/nvim.bak\n# Clean neovim folders (Optional but recommended)\nmv ~/.local/share/nvim ~/.local/share/nvim.bak\nmv ~/.local/state/nvim ~/.local/state/nvim.bak\nmv ~/.cache/nvim ~/.cache/nvim.bak\n# Clone the repository\ngit clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim\n\n\n\nInstalling node is not required but will improve compatibility with modern nvim features:\n# Install Node.js using nvm according to https://github.com/nvm-sh/nvm\n;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n# source .bashrc to pickup env variables\nsource ~/.bashrc\n# install the latest version of node\nnvm install node\n# Install Tree-sitter CLI\nnpm install tree-sitter-cli",
    "crumbs": [
      "Lessons",
      "Linux",
      "Remote work on Linux"
    ]
  },
  {
    "objectID": "lessons/linux/remote-linux.html#cli",
    "href": "lessons/linux/remote-linux.html#cli",
    "title": "Remote work on Linux",
    "section": "",
    "text": "Login into the R.Pi without password by setting up SSH credentials\n\nFollow guide by Raspberry Pi Foundation:\n\nPasswordless SSH Access\n\n\n\n\n\n# Update source repositories -- a good idea any time you are installing a package.\nsudo apt update -y\n# Install xclip for clipboard support with ssh graphical session `-Y`\nsudo apt install xclip -y\nsudo apt-get install neovim\n\n\nAfter installing nvim:\n# Install a Nerd Fonts (FiraCode)\ncd ~/Downloads\nwget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip\nunzip FiraCode.zip\n\n# Font installation according to Debian's docs: https://wiki.debian.org/Fonts\n# Move to systam-wide font folder\nsudo mv *.ttf /usr/local/share/fonts/\n# update the font cache\nfc-cache\n# Follow AstroNvim install instructions: https://astronvim.github.io/#%EF%B8%8F-installation\n\n# Make a backup of your current nvim folder\nmv ~/.config/nvim ~/.config/nvim.bak\n# Clean neovim folders (Optional but recommended)\nmv ~/.local/share/nvim ~/.local/share/nvim.bak\nmv ~/.local/state/nvim ~/.local/state/nvim.bak\nmv ~/.cache/nvim ~/.cache/nvim.bak\n# Clone the repository\ngit clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim\n\n\n\nInstalling node is not required but will improve compatibility with modern nvim features:\n# Install Node.js using nvm according to https://github.com/nvm-sh/nvm\n;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n# source .bashrc to pickup env variables\nsource ~/.bashrc\n# install the latest version of node\nnvm install node\n# Install Tree-sitter CLI\nnpm install tree-sitter-cli",
    "crumbs": [
      "Lessons",
      "Linux",
      "Remote work on Linux"
    ]
  },
  {
    "objectID": "lessons/linux/remote-linux.slides.html#cli",
    "href": "lessons/linux/remote-linux.slides.html#cli",
    "title": "Remote work on Linux",
    "section": "CLI",
    "text": "CLI\nPasswordless SSH Access\nLogin into the R.Pi without password by setting up SSH credentials\n\nFollow guide by Raspberry Pi Foundation:\n\nPasswordless SSH Access\n\n\nInstall NeoVim on RPI\n# Update source repositories -- a good idea any time you are installing a package.\nsudo apt update -y\n# Install xclip for clipboard support with ssh graphical session `-Y`\nsudo apt install xclip -y\nsudo apt-get install neovim\nInstall AstroNVIM\nAfter installing nvim:\n# Install a Nerd Fonts (FiraCode)\ncd ~/Downloads\nwget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip\nunzip FiraCode.zip\n\n# Font installation according to Debian's docs: https://wiki.debian.org/Fonts\n# Move to systam-wide font folder\nsudo mv *.ttf /usr/local/share/fonts/\n# update the font cache\nfc-cache\n# Follow AstroNvim install instructions: https://astronvim.github.io/#%EF%B8%8F-installation\n\n# Make a backup of your current nvim folder\nmv ~/.config/nvim ~/.config/nvim.bak\n# Clean neovim folders (Optional but recommended)\nmv ~/.local/share/nvim ~/.local/share/nvim.bak\nmv ~/.local/state/nvim ~/.local/state/nvim.bak\nmv ~/.cache/nvim ~/.cache/nvim.bak\n# Clone the repository\ngit clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim\nInstall Node\nInstalling node is not required but will improve compatibility with modern nvim features:\n# Install Node.js using nvm according to https://github.com/nvm-sh/nvm\n;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n# source .bashrc to pickup env variables\nsource ~/.bashrc\n# install the latest version of node\nnvm install node\n# Install Tree-sitter CLI\nnpm install tree-sitter-cli"
  },
  {
    "objectID": "lessons/linux/package-management-debian.html",
    "href": "lessons/linux/package-management-debian.html",
    "title": "Raspberry Pi Package Management: apt",
    "section": "",
    "text": "The Raspberry Pi OS (previously called Raspbian OS) used in the reTerminal is a variation of the Debian OS, with optimizations for the Raspberry Pi hardware.\n\nDebian OS is one of the most commonly used Linux distributions, especially as the “base” for derivative distributions. There are over 100 derivatives of Debian, many of which are themselves very popular distributions. These include:\n\nDesktop distributions like Ubuntu, Linux Mint, elementaryOS;\nSpecial-purpose distributions Kali Linux and Backbox (penetration testing)\nServer/Hypervisor distributions like Proxmox, Ubuntu server,\nMany others, you can find a more complete list here\n\n\nDebian-derived distributions share the following: - the .deb package format - the dpkg package manager and its frontend apt\nFor that reason, many of the commands and configuration for Raspberry Pi OS can be taken directly from Debian’s documentation.",
    "crumbs": [
      "Lessons",
      "Linux",
      "Raspberry Pi Package Management: apt"
    ]
  },
  {
    "objectID": "lessons/linux/package-management-debian.html#raspberry-pi-os-and-debian",
    "href": "lessons/linux/package-management-debian.html#raspberry-pi-os-and-debian",
    "title": "Raspberry Pi Package Management: apt",
    "section": "",
    "text": "The Raspberry Pi OS (previously called Raspbian OS) used in the reTerminal is a variation of the Debian OS, with optimizations for the Raspberry Pi hardware.\n\nDebian OS is one of the most commonly used Linux distributions, especially as the “base” for derivative distributions. There are over 100 derivatives of Debian, many of which are themselves very popular distributions. These include:\n\nDesktop distributions like Ubuntu, Linux Mint, elementaryOS;\nSpecial-purpose distributions Kali Linux and Backbox (penetration testing)\nServer/Hypervisor distributions like Proxmox, Ubuntu server,\nMany others, you can find a more complete list here\n\n\nDebian-derived distributions share the following: - the .deb package format - the dpkg package manager and its frontend apt\nFor that reason, many of the commands and configuration for Raspberry Pi OS can be taken directly from Debian’s documentation.",
    "crumbs": [
      "Lessons",
      "Linux",
      "Raspberry Pi Package Management: apt"
    ]
  },
  {
    "objectID": "lessons/linux/package-management-debian.html#apt-debian-package-manger",
    "href": "lessons/linux/package-management-debian.html#apt-debian-package-manger",
    "title": "Raspberry Pi Package Management: apt",
    "section": "Apt: Debian Package Manger",
    "text": "Apt: Debian Package Manger\nThe command apt is the default package manager of Debian.\n\nA package manager is a software tool responsible for automating the installation, removal, configuration and removal of computer programs.\n\nManaging packages could technically be done manually, however, it is very time consuming and error prone: tracking package dependencies and compatibility with the current system.\n\nCommon apt commands\nThere are many apt commands you will find yourself using all the time on a Debian-based OS like Raspberry Pi. It’s worth knowing in a bit more detail how they work.\nNote: Online, you will often see apt-get used instead of apt. apt is a newer package manager API meant to replace the older API apt-get. However, they both do more or less the same things the same ways, and apt is a backwards compatible replacement for apt-get in all cases. See Debian docs for details.\nDuring Lab 1, you updated, upgraded and installed some packages in the Raspberry Pi OS using apt:\n\napt: the difference between update and upgrade\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nsudo apt update\nUpdate list of available packages\n\n\nsudo apt upgrade\nUpgrade the system by installing/upgrading packages\n\n\n\nCombined, these two commands update and upgrade all of the currently operating system packages on your system:\n$ sudo apt update && sudo apt upgrade -y\nThere are a few other apt commands worth knowing.\n\napt: a variety of other commands I find myself using now and again\n\n\n\n\n\n\n\nCommand\nDescription\nExample use case\n\n\n\n\napt list\nlist packages installed on your system based on package names.\napt list | grep \"package name\" Need to remember or check if you successfully installed an app? Combine apt list with grep and a pipe.\n\n\napt search &lt;query&gt;\nReturns all repository packages search in package descriptions\napt search \"package name\" Do you know part of the? Run after apt\n\n\napt show &lt;package&gt;\nshow package details\n\n\n\napt install &lt;package&gt;\ninstall packages\n\n\n\napt reinstall &lt;package&gt;\nreinstall packages\n\n\n\napt remove &lt;package&gt;\nremove packages\n\n\n\n\nYou can see details about all of these commands and more by running apt --help. Note: documentation will often leave out sudo since the need to run sudo depends on the machine and the user.\n\nIn general, commands that read data (apt list, apt search, etc.) will generally not require sudo, since most folderst that apt will touch are universally readable.\napt commands that write data (apt install, etc.) to a folder not owned by the current user – which is most folders outside of /home/username, but particularly common package install locations like /usr, /bin, etc. – these commands will require sudo to gain the required write permission\n\n\n\nApt source repositories explained\nThis section has been adapted directly from the Debian documentation: see SourcesList\nApt downloads packages from one or more software repositories (sources) and installs them onto your computer.\nA repository is generally a network server, such as the official DebianStable repository. Local directories or CD/DVD are also accepted.\nThe specific repositories (package sources) configured on your machine affect: - What software packages are available for download - What versions of packages are available - Who packages the software\n\nCommonly used package sources\n\nDebianStable: official Debian repository for the current release\nStableProposedUpdates: official Debian repository for upcoming point releases (security and important bug fixes every ~2 months)\nStableUpdates: official Debian repository for changes that cannot wait for the next point release, packages are also added to StableProposedUpdates for inclusion in the next point release\nDebianSecurity: official Debian repository for frequent security updates\nDebianBackports: more recent versions of some packages, compatible with DebianStable.\nDebianUnstable: rolling development version containing the latest packages\nDebianExperimental: development version containing the experimental/alpha/beta/untested packages\n\n\n\nEditing Software Sources\nBeing able to change the repositories used by your package management system is a powerful feature but this power comes with some responsibility.\nUsers are cautioned that it is possible to break your system (in a way that could be difficult or impossible to cleanly fix) by adding third-party repositories, or repositories for a Debian version that does not match your current version - these repository create a risk of conflicting package versions, creating what’s sometimes called a “Franken-Debian” system.\nThe whole concept behind a Debian stable release is that the Debian developers have picked a set of software and their versions that function nicely together. While this software is patched to fix security issues, the software is frequently not the latest version. It takes some experience to know how the repos may be changed without risk of breaking your system. Users of all levels are advised to change repos cautiously.",
    "crumbs": [
      "Lessons",
      "Linux",
      "Raspberry Pi Package Management: apt"
    ]
  },
  {
    "objectID": "lessons/linux/package-management-debian.slides.html#raspberry-pi-os-and-debian",
    "href": "lessons/linux/package-management-debian.slides.html#raspberry-pi-os-and-debian",
    "title": "Raspberry Pi Package Management: apt",
    "section": "Raspberry Pi OS and Debian",
    "text": "Raspberry Pi OS and Debian\nThe Raspberry Pi OS (previously called Raspbian OS) used in the reTerminal is a variation of the Debian OS, with optimizations for the Raspberry Pi hardware.\n\nDebian OS is one of the most commonly used Linux distributions, especially as the “base” for derivative distributions. There are over 100 derivatives of Debian, many of which are themselves very popular distributions. These include:\n\nDesktop distributions like Ubuntu, Linux Mint, elementaryOS;\nSpecial-purpose distributions Kali Linux and Backbox (penetration testing)\nServer/Hypervisor distributions like Proxmox, Ubuntu server,\nMany others, you can find a more complete list here\n\n\nDebian-derived distributions share the following: - the .deb package format - the dpkg package manager and its frontend apt\nFor that reason, many of the commands and configuration for Raspberry Pi OS can be taken directly from Debian’s documentation."
  },
  {
    "objectID": "lessons/linux/package-management-debian.slides.html#apt-debian-package-manger",
    "href": "lessons/linux/package-management-debian.slides.html#apt-debian-package-manger",
    "title": "Raspberry Pi Package Management: apt",
    "section": "Apt: Debian Package Manger",
    "text": "Apt: Debian Package Manger\nThe command apt is the default package manager of Debian.\n\nA package manager is a software tool responsible for automating the installation, removal, configuration and removal of computer programs.\n\nManaging packages could technically be done manually, however, it is very time consuming and error prone: tracking package dependencies and compatibility with the current system.\nCommon apt commands\nThere are many apt commands you will find yourself using all the time on a Debian-based OS like Raspberry Pi. It’s worth knowing in a bit more detail how they work.\nNote: Online, you will often see apt-get used instead of apt. apt is a newer package manager API meant to replace the older API apt-get. However, they both do more or less the same things the same ways, and apt is a backwards compatible replacement for apt-get in all cases. See Debian docs for details.\nDuring Lab 1, you updated, upgraded and installed some packages in the Raspberry Pi OS using apt:\n\napt: the difference between update and upgrade\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nsudo apt update\nUpdate list of available packages\n\n\nsudo apt upgrade\nUpgrade the system by installing/upgrading packages\n\n\n\nCombined, these two commands update and upgrade all of the currently operating system packages on your system:\n$ sudo apt update && sudo apt upgrade -y\nThere are a few other apt commands worth knowing.\n\napt: a variety of other commands I find myself using now and again\n\n\n\n\n\n\n\nCommand\nDescription\nExample use case\n\n\n\n\napt list\nlist packages installed on your system based on package names.\napt list | grep \"package name\" Need to remember or check if you successfully installed an app? Combine apt list with grep and a pipe.\n\n\napt search &lt;query&gt;\nReturns all repository packages search in package descriptions\napt search \"package name\" Do you know part of the? Run after apt\n\n\napt show &lt;package&gt;\nshow package details\n\n\n\napt install &lt;package&gt;\ninstall packages\n\n\n\napt reinstall &lt;package&gt;\nreinstall packages\n\n\n\napt remove &lt;package&gt;\nremove packages\n\n\n\n\nYou can see details about all of these commands and more by running apt --help. Note: documentation will often leave out sudo since the need to run sudo depends on the machine and the user.\n\nIn general, commands that read data (apt list, apt search, etc.) will generally not require sudo, since most folderst that apt will touch are universally readable.\napt commands that write data (apt install, etc.) to a folder not owned by the current user – which is most folders outside of /home/username, but particularly common package install locations like /usr, /bin, etc. – these commands will require sudo to gain the required write permission\n\nApt source repositories explained\nThis section has been adapted directly from the Debian documentation: see SourcesList\nApt downloads packages from one or more software repositories (sources) and installs them onto your computer.\nA repository is generally a network server, such as the official DebianStable repository. Local directories or CD/DVD are also accepted.\nThe specific repositories (package sources) configured on your machine affect: - What software packages are available for download - What versions of packages are available - Who packages the software\nCommonly used package sources\n\nDebianStable: official Debian repository for the current release\nStableProposedUpdates: official Debian repository for upcoming point releases (security and important bug fixes every ~2 months)\nStableUpdates: official Debian repository for changes that cannot wait for the next point release, packages are also added to StableProposedUpdates for inclusion in the next point release\nDebianSecurity: official Debian repository for frequent security updates\nDebianBackports: more recent versions of some packages, compatible with DebianStable.\nDebianUnstable: rolling development version containing the latest packages\nDebianExperimental: development version containing the experimental/alpha/beta/untested packages\n\nEditing Software Sources\nBeing able to change the repositories used by your package management system is a powerful feature but this power comes with some responsibility.\nUsers are cautioned that it is possible to break your system (in a way that could be difficult or impossible to cleanly fix) by adding third-party repositories, or repositories for a Debian version that does not match your current version - these repository create a risk of conflicting package versions, creating what’s sometimes called a “Franken-Debian” system.\nThe whole concept behind a Debian stable release is that the Debian developers have picked a set of software and their versions that function nicely together. While this software is patched to fix security issues, the software is frequently not the latest version. It takes some experience to know how the repos may be changed without risk of breaking your system. Users of all levels are advised to change repos cautiously."
  },
  {
    "objectID": "lessons/index.html",
    "href": "lessons/index.html",
    "title": "Lessons",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\n \n\n\nRaspberry Pi Package Management: apt\n\n\nInstalling and configuring Linux packages on Raspberry Pi Debian using the apt package manager.\n\n\n\n\n \n\n\nRemote work on Linux\n\n\nLearn how to connect to your Pi with CLI (ssh) and GUI (VNC). Learn how to setup and troubleshoot local connections (LAN) and remote connections (VPN).\n\n\n\n\n \n\n\nLinux review\n\n\nResources and references to brush up linux knowledge.\n\n\n\n\n \n\n\nDeveloper setup\n\n\nHere’s how to set up the software that will be used for development during the course.\n\n\n\n\n \n\n\nTechnology Stack\n\n\nTechnologies used in this class\n\n\n\n\n \n\n\nHardware List\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n\n\n \n\n\nSignals: Analog and digital\n\n\nComparing the two paradigms for measuring electronic information and understanding how each are used for distributed applications.\n\n\n\n\n \n\n\nreTerminal Sensors\n\n\nInstalling initial reTerminal packages. Reading and controlling the reTerminal hardware interfaces, e.g. LEDs, light sensor, screen backlight, etc.\n\n\n\n\n \n\n\nGPIOs: Inputs and Outputs\n\n\nUnderstanding the various ports and pins our reSeed terminals make available to us.\n\n\n\n\n \n\n\nIntro to the Internet of Things\n\n\n \n\n\n\n\n \n\n\nIntro to Python for Developers\n\n\nPython exercises\n\n\n\n\n \n\n\nPackage management in Python\n\n\nHow to use OS package managers, virtual environments, and pip to manage python applications effectively.\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons"
    ]
  },
  {
    "objectID": "lessons/linux/index.html",
    "href": "lessons/linux/index.html",
    "title": "Linux",
    "section": "",
    "text": "Linux review\n\n\nResources and references to brush up linux knowledge.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaspberry Pi Package Management: apt\n\n\nInstalling and configuring Linux packages on Raspberry Pi Debian using the apt package manager.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemote work on Linux\n\n\nLearn how to connect to your Pi with CLI (ssh) and GUI (VNC). Learn how to setup and troubleshoot local connections (LAN) and remote connections (VPN).\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons",
      "Linux"
    ]
  },
  {
    "objectID": "lessons/linux/linux-review.slides.html#getting-linux-environment",
    "href": "lessons/linux/linux-review.slides.html#getting-linux-environment",
    "title": "Linux review",
    "section": "Getting Linux Environment",
    "text": "Getting Linux Environment\nIf you don’t have a Unix shell in your system (Linux or Mac), you can get one using the following:\n\nWSL2 in Windows\nJSLinux Terminal\nCopy.sh Terminal\nJS/UIX Terminal"
  },
  {
    "objectID": "lessons/linux/linux-review.slides.html#resources-references",
    "href": "lessons/linux/linux-review.slides.html#resources-references",
    "title": "Linux review",
    "section": "Resources & References",
    "text": "Resources & References\nThese are great references to get up to speed on using a Unix shell:\n\nLinuxCommand.org\n\nShort guides on learning bash shell and bash scripting.\nLinks to interactive learning games under “Adventures”.\n\nA to Z Linux CLI index by ss64.com\n\nIf you know which command you are looking for, you will find it here.\n\nTop 50+ Linux Commands You MUST Know by Digital Ocean\n\nIncludes examples for the most common commands.\n\nBash Online Manual (brief), specially Basic Shell Features\n\nComplete reference with examples.\nYou may treat this as “The Docs”"
  },
  {
    "objectID": "lessons/linux/linux-review.slides.html#basic-tasks",
    "href": "lessons/linux/linux-review.slides.html#basic-tasks",
    "title": "Linux review",
    "section": "Basic Tasks",
    "text": "Basic Tasks\nManipulation of the Raspberry Pi will require familiarity with the following tasks:\n\nSSH into a remote machine\n\nAs a specific user.\nUsing a non standard port.\n\nMaintaining system packages with apt\n\nUpdate packages.\nList information about a specific package\n\nManipulating text files and folders with:\n\nList: ls\nCopy: cp\nMove: mv\nRemove (recursively and not recursively): rm\nFire hierarchy with tree\n\nCreate files and folders\n\nCreate file: touch\nCreate folder mkdir\n\nEdit, save and exit text files from the command line either:\n\nnano\nvim\n\nFile and folder access permissions\n\nCheck user permissions\nModify access permissions\n\nControlling tasks and processes:\n\nCtrl-C\nCtrl-Z\njobs\nfg\nbg\n\nRun a Python script from the command line.\nInspecting and killing processes with:\n\npgrep\npkill\nkill\n\nMoving files from local machine to host and vice-versa.\n\nscp\n\nAppending to a file with redirection\n\n&gt;\n&gt;&gt;\n\nPiping command output\n\n|\n\nSearching for words in text\n\ngrep\nless"
  },
  {
    "objectID": "lessons/linux/linux-review.slides.html#review-exercises",
    "href": "lessons/linux/linux-review.slides.html#review-exercises",
    "title": "Linux review",
    "section": "Review Exercises",
    "text": "Review Exercises\n\nA great set of exercises to get started is the game Bandit from OverTheWire.org\n\nTry to reach at least level 5"
  },
  {
    "objectID": "lessons/linux/linux-review.html",
    "href": "lessons/linux/linux-review.html",
    "title": "Linux review",
    "section": "",
    "text": "If you don’t have a Unix shell in your system (Linux or Mac), you can get one using the following:\n\nWSL2 in Windows\nJSLinux Terminal\nCopy.sh Terminal\nJS/UIX Terminal",
    "crumbs": [
      "Lessons",
      "Linux",
      "Linux review"
    ]
  },
  {
    "objectID": "lessons/linux/linux-review.html#getting-linux-environment",
    "href": "lessons/linux/linux-review.html#getting-linux-environment",
    "title": "Linux review",
    "section": "",
    "text": "If you don’t have a Unix shell in your system (Linux or Mac), you can get one using the following:\n\nWSL2 in Windows\nJSLinux Terminal\nCopy.sh Terminal\nJS/UIX Terminal",
    "crumbs": [
      "Lessons",
      "Linux",
      "Linux review"
    ]
  },
  {
    "objectID": "lessons/linux/linux-review.html#resources-references",
    "href": "lessons/linux/linux-review.html#resources-references",
    "title": "Linux review",
    "section": "Resources & References",
    "text": "Resources & References\nThese are great references to get up to speed on using a Unix shell:\n\nLinuxCommand.org\n\nShort guides on learning bash shell and bash scripting.\nLinks to interactive learning games under “Adventures”.\n\nA to Z Linux CLI index by ss64.com\n\nIf you know which command you are looking for, you will find it here.\n\nTop 50+ Linux Commands You MUST Know by Digital Ocean\n\nIncludes examples for the most common commands.\n\nBash Online Manual (brief), specially Basic Shell Features\n\nComplete reference with examples.\nYou may treat this as “The Docs”",
    "crumbs": [
      "Lessons",
      "Linux",
      "Linux review"
    ]
  },
  {
    "objectID": "lessons/linux/linux-review.html#basic-tasks",
    "href": "lessons/linux/linux-review.html#basic-tasks",
    "title": "Linux review",
    "section": "Basic Tasks",
    "text": "Basic Tasks\nManipulation of the Raspberry Pi will require familiarity with the following tasks:\n\nSSH into a remote machine\n\nAs a specific user.\nUsing a non standard port.\n\nMaintaining system packages with apt\n\nUpdate packages.\nList information about a specific package\n\nManipulating text files and folders with:\n\nList: ls\nCopy: cp\nMove: mv\nRemove (recursively and not recursively): rm\nFire hierarchy with tree\n\nCreate files and folders\n\nCreate file: touch\nCreate folder mkdir\n\nEdit, save and exit text files from the command line either:\n\nnano\nvim\n\nFile and folder access permissions\n\nCheck user permissions\nModify access permissions\n\nControlling tasks and processes:\n\nCtrl-C\nCtrl-Z\njobs\nfg\nbg\n\nRun a Python script from the command line.\nInspecting and killing processes with:\n\npgrep\npkill\nkill\n\nMoving files from local machine to host and vice-versa.\n\nscp\n\nAppending to a file with redirection\n\n&gt;\n&gt;&gt;\n\nPiping command output\n\n|\n\nSearching for words in text\n\ngrep\nless",
    "crumbs": [
      "Lessons",
      "Linux",
      "Linux review"
    ]
  },
  {
    "objectID": "lessons/linux/linux-review.html#review-exercises",
    "href": "lessons/linux/linux-review.html#review-exercises",
    "title": "Linux review",
    "section": "Review Exercises",
    "text": "Review Exercises\n\nA great set of exercises to get started is the game Bandit from OverTheWire.org\n\nTry to reach at least level 5",
    "crumbs": [
      "Lessons",
      "Linux",
      "Linux review"
    ]
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.slides.html#vs-code",
    "href": "lessons/getting-started/vscode-python-setup.slides.html#vs-code",
    "title": "Developer setup",
    "section": "VS Code",
    "text": "VS Code\nBelow are the recommended steps to setup your VS Code for this course.\nYou can download VS Code from this link\nVS Code Extensions\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\n\n(the Python dev setup will required additional VS Code extensions, see below)"
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.slides.html#python-development",
    "href": "lessons/getting-started/vscode-python-setup.slides.html#python-development",
    "title": "Developer setup",
    "section": "Python Development",
    "text": "Python Development\nBase Setup\nFollow the official guide Getting Started with Python in VS Code\nThe guide covers the following steps:\n\nInstall the VS Code extension Python by Microsoft. This extension includes:\n\nIntelliSense: with Pylance\nLinting: Pylint (default) and Flake8\nCode formatting: autopep (default), black or yapf\nDebugging\nTesting: Test Explorer or pytest\nJupter Notebooks\nVirtual Environment support\n\n\n\n\n\nPython extension in Visual Studio Code’s Marketplace\n\n\n\nInstall a Python interpreter (if not already installed).\nVerify your Python installation.\nCreate a test project with a Hello World Python file.\nRun the Hello World file from VS Code.\nConfigure and run the integrated debugger.\n\nEnable Static Type Checking with Pylance\nPylance is the default language support for Python in Visual Studio Code extension. Pylance uses the Pyright static type checker under the hood to supercharge Python IntelliSense in VS Code.\nType checking is not enabled by default in Pylance. To enable it, set the following VS Code configuration:\n{\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}\nAlternatively, use the VS Code configuration UI:\n\nFormatting & Linting\nFormatting will not fix your code, however, it will help you write more readable code.\nLinting will analyze your code as you save it and tell you about errors before you run the code (remember, Python is an interpreted language, there is no compilation).\nFormatting w/ autopep8\nTo help you write consistent Python, make sure the autopep8 code formatter is enabled.\n\nOpen a Python file and press the code formatting shortcut for your machine: Linux: Ctrl + Shift + I Window: Alt + Shift + F macOS: ⇧⌥F\nFollow instructions to setup autopep8.\n\nFor details, see section “Formatting” of Editing Python in Visual Studio Code\nLinting w/ Pylint\nFollow the first step “Enable linters” in the guide Linting Python in Visual Studio Code\nTo learn more about the benefits of formatting and linting"
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.slides.html#resources",
    "href": "lessons/getting-started/vscode-python-setup.slides.html#resources",
    "title": "Developer setup",
    "section": "Resources",
    "text": "Resources\nTo learn more about the benefits of formatting and linting, see the video below:\n\n\nFor examples of other VS Code extensions that can improve your dev experience, see the video below:"
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.html",
    "href": "lessons/getting-started/vscode-python-setup.html",
    "title": "Developer setup",
    "section": "",
    "text": "Below are the recommended steps to setup your VS Code for this course.\nYou can download VS Code from this link\n\n\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\n\n(the Python dev setup will required additional VS Code extensions, see below)",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Developer setup"
    ]
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.html#vs-code",
    "href": "lessons/getting-started/vscode-python-setup.html#vs-code",
    "title": "Developer setup",
    "section": "",
    "text": "Below are the recommended steps to setup your VS Code for this course.\nYou can download VS Code from this link\n\n\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\n\n(the Python dev setup will required additional VS Code extensions, see below)",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Developer setup"
    ]
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.html#python-development",
    "href": "lessons/getting-started/vscode-python-setup.html#python-development",
    "title": "Developer setup",
    "section": "Python Development",
    "text": "Python Development\n\nBase Setup\nFollow the official guide Getting Started with Python in VS Code\nThe guide covers the following steps:\n\nInstall the VS Code extension Python by Microsoft. This extension includes:\n\nIntelliSense: with Pylance\nLinting: Pylint (default) and Flake8\nCode formatting: autopep (default), black or yapf\nDebugging\nTesting: Test Explorer or pytest\nJupter Notebooks\nVirtual Environment support\n\n\n\n\n\nPython extension in Visual Studio Code’s Marketplace\n\n\n\nInstall a Python interpreter (if not already installed).\nVerify your Python installation.\nCreate a test project with a Hello World Python file.\nRun the Hello World file from VS Code.\nConfigure and run the integrated debugger.\n\n\n\nEnable Static Type Checking with Pylance\nPylance is the default language support for Python in Visual Studio Code extension. Pylance uses the Pyright static type checker under the hood to supercharge Python IntelliSense in VS Code.\nType checking is not enabled by default in Pylance. To enable it, set the following VS Code configuration:\n{\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}\nAlternatively, use the VS Code configuration UI:\n\n\n\nFormatting & Linting\nFormatting will not fix your code, however, it will help you write more readable code.\nLinting will analyze your code as you save it and tell you about errors before you run the code (remember, Python is an interpreted language, there is no compilation).\n\nFormatting w/ autopep8\nTo help you write consistent Python, make sure the autopep8 code formatter is enabled.\n\nOpen a Python file and press the code formatting shortcut for your machine: Linux: Ctrl + Shift + I Window: Alt + Shift + F macOS: ⇧⌥F\nFollow instructions to setup autopep8.\n\nFor details, see section “Formatting” of Editing Python in Visual Studio Code\n\n\nLinting w/ Pylint\nFollow the first step “Enable linters” in the guide Linting Python in Visual Studio Code\nTo learn more about the benefits of formatting and linting",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Developer setup"
    ]
  },
  {
    "objectID": "lessons/getting-started/vscode-python-setup.html#resources",
    "href": "lessons/getting-started/vscode-python-setup.html#resources",
    "title": "Developer setup",
    "section": "Resources",
    "text": "Resources\nTo learn more about the benefits of formatting and linting, see the video below:\n\n\nFor examples of other VS Code extensions that can improve your dev experience, see the video below:",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Developer setup"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.slides.html#reterminal",
    "href": "lessons/getting-started/hardware-list.slides.html#reterminal",
    "title": "Hardware List",
    "section": "reTerminal",
    "text": "reTerminal\nThe reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\nNotable features: - Compute Module 4 with 4GB RAM & 32GB eMMC - 5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI - Wireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE - Cryptographic co-processor with secure hardware-based key storage - Built-in modules such as accelerometer, light sensor, and RTC\n\nSee reTerminal Wiki page for detailed specs and documentation\n\nPower Supply\n The reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "lessons/getting-started/hardware-list.slides.html#compute-module-4",
    "href": "lessons/getting-started/hardware-list.slides.html#compute-module-4",
    "title": "Hardware List",
    "section": "Compute Module 4",
    "text": "Compute Module 4\n The Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features: - Processor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\nGrove Base Hat for Raspberry Pi\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection: - 6 Digital\n- 4 Analog\n- 3 I2C\n- 1 PWM\n- 1 UART\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "lessons/getting-started/hardware-list.slides.html#sensors",
    "href": "lessons/getting-started/hardware-list.slides.html#sensors",
    "title": "Hardware List",
    "section": "Sensors",
    "text": "Sensors\nAHT20 I2C Temperature & Humidity\n See AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details. - Temperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH. - Digital output, Grove I2C interface.\nAHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py  \nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "lessons/getting-started/hardware-list.slides.html#actuators-motors",
    "href": "lessons/getting-started/hardware-list.slides.html#actuators-motors",
    "title": "Hardware List",
    "section": "Actuators & Motors",
    "text": "Actuators & Motors\nLED Socketed\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n### Cooling Fan  5V Cooling Fan 40mm x 10mm with 2-pin JST connector. - See product page here.\nRelay\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal. - Operate voltage: 3.3V-5V - Input current: 100mA - Rated load: 5A@250VAC 5A@30VDC\nSee relay wiki page for details."
  },
  {
    "objectID": "lessons/getting-started/hardware-list.slides.html#cabling",
    "href": "lessons/getting-started/hardware-list.slides.html#cabling",
    "title": "Hardware List",
    "section": "Cabling",
    "text": "Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html",
    "href": "lessons/getting-started/hardware-list.html",
    "title": "Hardware List",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\nNotable features: - Compute Module 4 with 4GB RAM & 32GB eMMC - 5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI - Wireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE - Cryptographic co-processor with secure hardware-based key storage - Built-in modules such as accelerometer, light sensor, and RTC\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n The reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html#reterminal",
    "href": "lessons/getting-started/hardware-list.html#reterminal",
    "title": "Hardware List",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\nNotable features: - Compute Module 4 with 4GB RAM & 32GB eMMC - 5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI - Wireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE - Cryptographic co-processor with secure hardware-based key storage - Built-in modules such as accelerometer, light sensor, and RTC\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n The reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html#compute-module-4",
    "href": "lessons/getting-started/hardware-list.html#compute-module-4",
    "title": "Hardware List",
    "section": "Compute Module 4",
    "text": "Compute Module 4\n The Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features: - Processor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\n\nGrove Base Hat for Raspberry Pi\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection: - 6 Digital\n- 4 Analog\n- 3 I2C\n- 1 PWM\n- 1 UART\n\nSee Grove base hat Wiki for details.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html#sensors",
    "href": "lessons/getting-started/hardware-list.html#sensors",
    "title": "Hardware List",
    "section": "Sensors",
    "text": "Sensors\n\nAHT20 I2C Temperature & Humidity\n See AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details. - Temperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH. - Digital output, Grove I2C interface.\n\n\nAHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py  \nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page).",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html#actuators-motors",
    "href": "lessons/getting-started/hardware-list.html#actuators-motors",
    "title": "Hardware List",
    "section": "Actuators & Motors",
    "text": "Actuators & Motors\n\nLED Socketed\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n### Cooling Fan  5V Cooling Fan 40mm x 10mm with 2-pin JST connector. - See product page here.\n\n\nRelay\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal. - Operate voltage: 3.3V-5V - Input current: 100mA - Rated load: 5A@250VAC 5A@30VDC\nSee relay wiki page for details.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/getting-started/hardware-list.html#cabling",
    "href": "lessons/getting-started/hardware-list.html#cabling",
    "title": "Hardware List",
    "section": "Cabling",
    "text": "Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open.",
    "crumbs": [
      "Lessons",
      "Getting started",
      "Hardware List"
    ]
  },
  {
    "objectID": "lessons/hardware/index.html",
    "href": "lessons/hardware/index.html",
    "title": "Hardware",
    "section": "",
    "text": "reTerminal Sensors\n\n\nInstalling initial reTerminal packages. Reading and controlling the reTerminal hardware interfaces, e.g. LEDs, light sensor, screen backlight, etc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGPIOs: Inputs and Outputs\n\n\nUnderstanding the various ports and pins our reSeed terminals make available to us.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSignals: Analog and digital\n\n\nComparing the two paradigms for measuring electronic information and understanding how each are used for distributed applications.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "Lessons",
      "Hardware"
    ]
  },
  {
    "objectID": "lessons/hardware/gpios.slides.html#intro-to-pis-gpios",
    "href": "lessons/hardware/gpios.slides.html#intro-to-pis-gpios",
    "title": "GPIOs: Inputs and Outputs",
    "section": "Intro to Pi’s GPIOs 🥧",
    "text": "Intro to Pi’s GPIOs 🥧\nNote: most of these notes were adapted directly from the Raspberry Pi docs: GPIO-Pinout 1\nThe Raspberry Pi can read and generate digital signals using General Purpose Input and Output (GPIO) pins.\nAny of the GPIO pins can be designated (in software) as an input or output pin and used for a wide range of purposes.\n\n\n\nDiagram of Pi’s 40 GPIO pins\n\n\n\n GPIO and the 40-pin headers of the Raspberry Pi   - Official docs, Raspberry Pi Foundation.\n\nThe reTerminal exposes the same 40-pin header as the Pi on it’s side:\n\n\n\nBreakout of 40-pin header for reTerminal\n\n\n\n GPIO and pin diagram of the reTerminal   - reTerminal Official Wiki, Seeed.\n\nVoltages\nTwo 5V pins and two 3V3 pins are present on the board, as well as a number of ground pins (0V), which are unconfigurable. The remaining pins are all general purpose 3V3 pins, meaning outputs are set to 3V3 and inputs are 3V3-tolerant.\nOutputs\nA GPIO pin designated as an output pin can be set to high (3V3) or low (0V).\nInputs\nA GPIO pin designated as an input pin can be read as high (3V3) or low (0V).\nWe will learn how to use the GPIOs in a future lesson.\nDigital Communication Protocols\nIn addition to simple input and output devices, the GPIO pins can be used with a variety of alternative functions and digital communication protocols.\nThese digital communication protocols are:\n\nPWM (pulse-width modulation)\nSPI (serial peripheral interface)\nI2C (inter-integrated circuit)\nSerial\nPCM (pulse-code modulation)\n\nSome digital functions are available on all pins, others on specific pins.\nSorry, No Analog\n\nThe Raspberry Pi does not have an ADC.\nIn order to process analog electrical signals an external ADC must be used.\n\nHat to the Rescue\nIn this course we will use the integrate ADC of the Grove Base Hat for the Raspberry Pi.\n\n\n\nGrove Base Hat for the Raspberry Pi\n\n\n\n Seeed’s Grove Base Hat for the Raspberry Pi has an integrated ADC   Base Hat official wiki, Seeed.\n\nPi HATs is the term for expansion boards for the Raspberry Pi.\n\nSeeed’s Grove Base Hat for the Raspberry Pi has 4 connectors with integrated ADC.\nEach ADC connector has 12-bit resolution.\n\nIn addition to the 4 ADC connectors, the Base Hat also exposes the original 40-pin header and other digital connectors.\n\n\n\nConnectors of the Grove Base Hat\n\n\n\n Specialized connectors of the Raspberry Pi available via the Base Hat   Base Hat official wiki, Seeed.\n\nRaspberry Pi documentation is copyright © 2012-2024 Raspberry Pi Ltd and is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA) licence. Some content originates from the eLinux wiki, and is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported licence."
  },
  {
    "objectID": "lessons/hardware/gpios.slides.html#gpio-pinout",
    "href": "lessons/hardware/gpios.slides.html#gpio-pinout",
    "title": "GPIOs: Inputs and Outputs",
    "section": "GPIO pinout",
    "text": "GPIO pinout\nA GPIO reference can be accessed on your Raspberry Pi by opening a terminal window and running the command pinout. This tool is provided by the GPIO Zero Python library, which is installed by default in Raspberry Pi OS.\n$ pinout\n\n\n\n\n\n\nImportant\n\n\nWhile connecting up simple components to the GPIO pins is perfectly safe, it’s important to be careful how you wire things up. LEDs should have resistors to limit the current passing through them. Do not use 5V for 3.3V components. Do not connect motors directly to the GPIO pins, instead use an H-bridge circuit or a motor controller board.\n\n\n\nPermissions\nIn order to use the GPIO ports, your user must be a member of the gpio group. The default user account is a member by default, other users need to be added manually.\n# Only do this to add a NEW user to the gpio group\nsudo usermod -a -G gpio &lt;username&gt;"
  },
  {
    "objectID": "lessons/hardware/gpios.slides.html#gpio-in-python",
    "href": "lessons/hardware/gpios.slides.html#gpio-in-python",
    "title": "GPIOs: Inputs and Outputs",
    "section": "GPIO in Python",
    "text": "GPIO in Python\nUsing the GPIO Zero library makes it easy to control GPIO devices with Python. The library is comprehensively documented at gpiozero.readthedocs.io.\nLED\nTo control an LED connected to GPIO17:\nfrom gpiozero import LED\nfrom time import sleep\n\nled = LED(17)\n\nwhile True:\n    led.on()\n    sleep(1)\n    led.off()\n    sleep(1)\nLED methods include on(), off(), toggle(), and blink().\nButton\nTo read the state of a button connected to GPIO2:\nfrom gpiozero import Button\nfrom time import sleep\n\nbutton = Button(2)\n\nwhile True:\n    if button.is_pressed:\n        print(\"Pressed\")\n    else:\n        print(\"Released\")\n    sleep(1)\nButton functionality includes the properties is_pressed and is_held; callbacks when_pressed, when_released, and when_held; and methods wait_for_press() and wait_for_release.\nButton and LED\nTo connect the LED and button together, you can use this code:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nwhile True:\n    if button.is_pressed:\n        led.on()\n    else:\n        led.off()\nAlternatively:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nwhile True:\n    button.wait_for_press()\n    led.on()\n    button.wait_for_release()\n    led.off()\nor:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nbutton.when_pressed = led.on\nbutton.when_released = led.off"
  },
  {
    "objectID": "lessons/hardware/gpios.html",
    "href": "lessons/hardware/gpios.html",
    "title": "GPIOs: Inputs and Outputs",
    "section": "",
    "text": "Note: most of these notes were adapted directly from the Raspberry Pi docs: GPIO-Pinout 1\nThe Raspberry Pi can read and generate digital signals using General Purpose Input and Output (GPIO) pins.\nAny of the GPIO pins can be designated (in software) as an input or output pin and used for a wide range of purposes.\n\n\n\nDiagram of Pi’s 40 GPIO pins\n\n\n\n GPIO and the 40-pin headers of the Raspberry Pi   - Official docs, Raspberry Pi Foundation.\n\nThe reTerminal exposes the same 40-pin header as the Pi on it’s side:\n\n\n\nBreakout of 40-pin header for reTerminal\n\n\n\n GPIO and pin diagram of the reTerminal   - reTerminal Official Wiki, Seeed.\n\n\n\nTwo 5V pins and two 3V3 pins are present on the board, as well as a number of ground pins (0V), which are unconfigurable. The remaining pins are all general purpose 3V3 pins, meaning outputs are set to 3V3 and inputs are 3V3-tolerant.\n\n\n\nA GPIO pin designated as an output pin can be set to high (3V3) or low (0V).\n\n\n\nA GPIO pin designated as an input pin can be read as high (3V3) or low (0V).\nWe will learn how to use the GPIOs in a future lesson.\n\n\n\nIn addition to simple input and output devices, the GPIO pins can be used with a variety of alternative functions and digital communication protocols.\nThese digital communication protocols are:\n\nPWM (pulse-width modulation)\nSPI (serial peripheral interface)\nI2C (inter-integrated circuit)\nSerial\nPCM (pulse-code modulation)\n\nSome digital functions are available on all pins, others on specific pins.\n\n\n\n\nThe Raspberry Pi does not have an ADC.\nIn order to process analog electrical signals an external ADC must be used.\n\nHat to the Rescue\nIn this course we will use the integrate ADC of the Grove Base Hat for the Raspberry Pi.\n\n\n\nGrove Base Hat for the Raspberry Pi\n\n\n\n Seeed’s Grove Base Hat for the Raspberry Pi has an integrated ADC   Base Hat official wiki, Seeed.\n\nPi HATs is the term for expansion boards for the Raspberry Pi.\n\nSeeed’s Grove Base Hat for the Raspberry Pi has 4 connectors with integrated ADC.\nEach ADC connector has 12-bit resolution.\n\nIn addition to the 4 ADC connectors, the Base Hat also exposes the original 40-pin header and other digital connectors.\n\n\n\nConnectors of the Grove Base Hat\n\n\n\n Specialized connectors of the Raspberry Pi available via the Base Hat   Base Hat official wiki, Seeed.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "GPIOs: Inputs and Outputs"
    ]
  },
  {
    "objectID": "lessons/hardware/gpios.html#intro-to-pis-gpios",
    "href": "lessons/hardware/gpios.html#intro-to-pis-gpios",
    "title": "GPIOs: Inputs and Outputs",
    "section": "",
    "text": "Note: most of these notes were adapted directly from the Raspberry Pi docs: GPIO-Pinout 1\nThe Raspberry Pi can read and generate digital signals using General Purpose Input and Output (GPIO) pins.\nAny of the GPIO pins can be designated (in software) as an input or output pin and used for a wide range of purposes.\n\n\n\nDiagram of Pi’s 40 GPIO pins\n\n\n\n GPIO and the 40-pin headers of the Raspberry Pi   - Official docs, Raspberry Pi Foundation.\n\nThe reTerminal exposes the same 40-pin header as the Pi on it’s side:\n\n\n\nBreakout of 40-pin header for reTerminal\n\n\n\n GPIO and pin diagram of the reTerminal   - reTerminal Official Wiki, Seeed.\n\n\n\nTwo 5V pins and two 3V3 pins are present on the board, as well as a number of ground pins (0V), which are unconfigurable. The remaining pins are all general purpose 3V3 pins, meaning outputs are set to 3V3 and inputs are 3V3-tolerant.\n\n\n\nA GPIO pin designated as an output pin can be set to high (3V3) or low (0V).\n\n\n\nA GPIO pin designated as an input pin can be read as high (3V3) or low (0V).\nWe will learn how to use the GPIOs in a future lesson.\n\n\n\nIn addition to simple input and output devices, the GPIO pins can be used with a variety of alternative functions and digital communication protocols.\nThese digital communication protocols are:\n\nPWM (pulse-width modulation)\nSPI (serial peripheral interface)\nI2C (inter-integrated circuit)\nSerial\nPCM (pulse-code modulation)\n\nSome digital functions are available on all pins, others on specific pins.\n\n\n\n\nThe Raspberry Pi does not have an ADC.\nIn order to process analog electrical signals an external ADC must be used.\n\nHat to the Rescue\nIn this course we will use the integrate ADC of the Grove Base Hat for the Raspberry Pi.\n\n\n\nGrove Base Hat for the Raspberry Pi\n\n\n\n Seeed’s Grove Base Hat for the Raspberry Pi has an integrated ADC   Base Hat official wiki, Seeed.\n\nPi HATs is the term for expansion boards for the Raspberry Pi.\n\nSeeed’s Grove Base Hat for the Raspberry Pi has 4 connectors with integrated ADC.\nEach ADC connector has 12-bit resolution.\n\nIn addition to the 4 ADC connectors, the Base Hat also exposes the original 40-pin header and other digital connectors.\n\n\n\nConnectors of the Grove Base Hat\n\n\n\n Specialized connectors of the Raspberry Pi available via the Base Hat   Base Hat official wiki, Seeed.",
    "crumbs": [
      "Lessons",
      "Hardware",
      "GPIOs: Inputs and Outputs"
    ]
  },
  {
    "objectID": "lessons/hardware/gpios.html#gpio-pinout",
    "href": "lessons/hardware/gpios.html#gpio-pinout",
    "title": "GPIOs: Inputs and Outputs",
    "section": "GPIO pinout",
    "text": "GPIO pinout\nA GPIO reference can be accessed on your Raspberry Pi by opening a terminal window and running the command pinout. This tool is provided by the GPIO Zero Python library, which is installed by default in Raspberry Pi OS.\n$ pinout\n\n\n\n\n\n\nImportant\n\n\n\nWhile connecting up simple components to the GPIO pins is perfectly safe, it’s important to be careful how you wire things up. LEDs should have resistors to limit the current passing through them. Do not use 5V for 3.3V components. Do not connect motors directly to the GPIO pins, instead use an H-bridge circuit or a motor controller board.\n\n\n\nPermissions\nIn order to use the GPIO ports, your user must be a member of the gpio group. The default user account is a member by default, other users need to be added manually.\n# Only do this to add a NEW user to the gpio group\nsudo usermod -a -G gpio &lt;username&gt;",
    "crumbs": [
      "Lessons",
      "Hardware",
      "GPIOs: Inputs and Outputs"
    ]
  },
  {
    "objectID": "lessons/hardware/gpios.html#gpio-in-python",
    "href": "lessons/hardware/gpios.html#gpio-in-python",
    "title": "GPIOs: Inputs and Outputs",
    "section": "GPIO in Python",
    "text": "GPIO in Python\nUsing the GPIO Zero library makes it easy to control GPIO devices with Python. The library is comprehensively documented at gpiozero.readthedocs.io.\n\nLED\nTo control an LED connected to GPIO17:\nfrom gpiozero import LED\nfrom time import sleep\n\nled = LED(17)\n\nwhile True:\n    led.on()\n    sleep(1)\n    led.off()\n    sleep(1)\nLED methods include on(), off(), toggle(), and blink().\n\n\nButton\nTo read the state of a button connected to GPIO2:\nfrom gpiozero import Button\nfrom time import sleep\n\nbutton = Button(2)\n\nwhile True:\n    if button.is_pressed:\n        print(\"Pressed\")\n    else:\n        print(\"Released\")\n    sleep(1)\nButton functionality includes the properties is_pressed and is_held; callbacks when_pressed, when_released, and when_held; and methods wait_for_press() and wait_for_release.\n\n\nButton and LED\nTo connect the LED and button together, you can use this code:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nwhile True:\n    if button.is_pressed:\n        led.on()\n    else:\n        led.off()\nAlternatively:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nwhile True:\n    button.wait_for_press()\n    led.on()\n    button.wait_for_release()\n    led.off()\nor:\nfrom gpiozero import LED, Button\n\nled = LED(17)\nbutton = Button(2)\n\nbutton.when_pressed = led.on\nbutton.when_released = led.off",
    "crumbs": [
      "Lessons",
      "Hardware",
      "GPIOs: Inputs and Outputs"
    ]
  },
  {
    "objectID": "lessons/hardware/gpios.html#footnotes",
    "href": "lessons/hardware/gpios.html#footnotes",
    "title": "GPIOs: Inputs and Outputs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRaspberry Pi documentation is copyright © 2012-2024 Raspberry Pi Ltd and is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA) licence. Some content originates from the eLinux wiki, and is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported licence.↩︎",
    "crumbs": [
      "Lessons",
      "Hardware",
      "GPIOs: Inputs and Outputs"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#internet-of-things-iot",
    "href": "lessons/iot/what-is-iot.slides.html#internet-of-things-iot",
    "title": "Intro to the Internet of Things",
    "section": "Internet of Things (IoT)",
    "text": "Internet of Things (IoT)\nThe Internet of Things (IoT) is comprised of equipment, machines, products, and devices that are connected to the cloud and periodically collect, send and/or receive data.\n\nIoT refers to the entire network of:\n\nphysical devices,\ntools,\nequipment, and\nsmart objects\n\nThese objects have the capability to collect and share data about:\n\nhow they are used\nthe environment around them\n\nIoT devices can also receive commands or updates via the cloud."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#why-collect-all-this-data",
    "href": "lessons/iot/what-is-iot.slides.html#why-collect-all-this-data",
    "title": "Intro to the Internet of Things",
    "section": "Why collect all this data?",
    "text": "Why collect all this data?\nBy analyzing the data collected by these connected objects, users and organisations can make informed decisions in near real-time and automate tightly integrated processes. This avoids decision making based on limited or out-dated data.\nThis data can create quick feedback loops for automation. Data from one object can trigger actions or control several other objects with timing and precision that could not be achieved by humans."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#iot-examples",
    "href": "lessons/iot/what-is-iot.slides.html#iot-examples",
    "title": "Intro to the Internet of Things",
    "section": "IoT Examples",
    "text": "IoT Examples\nThe use of IoT can be organised in two fields of application:\n\nIndustrial IoT (IIoT)\nConsumer IoT\n\n\n\n\nExamples of industrial and consumer iot applications\n\n\n\n The Internet of Things and its Benefit to U.S. Water Customer    in kuritaamerica.com\n\nConsumer IoT\nExamples of consumer IoT are:\n\nHome Security: Sensors, alarms, cameras, lights, and microphones provide 24/7 security and surveillance. All of which can be controlled from a smart phone.\nSmart Home: Smart lighting, heating and sound systems can be automated to detect human present or receive instructions remotely. Voice Assistants can also control house appliances or and provide information.\nWearables: Smartwatches and fitness trackers can monitor blood pressure or heart rate, and physical activity and suggest workouts, breaks or medical assistance.\nAppliances: Smart fridges can keep track of food quantities and expiry dates and create shopping lists accordingly. Smart outlet plugs can measure electrical consumption and turn other appliances on/off.\n\nIndustrial IoT (IIoT)\nMost people tend to first think of IoT as consumer devices. However, their main value added happens in industrial applications.\n\n\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\n\nIndustrial IoT Examples:\n\nEquipment Maintenance: Rolls-Royce’s Total Care provides a suite of predictive maintenance and repair services for its jet engines, including monitoring engine health, and modifying engines to increase reliability and durability.\nFarming: John Deere is building intelligence into its large tractors and sprayers through sensors that make the machines into mobile platforms capable of self-driving.\nHeavy Machinery & Transportation: Rio Tinto, a global mining company uses a remote command center to orchestrate the actions of huge drills, excavators, trains, and trucks across multiple mining sites.\nRenewable Energies: Iberdrola and Siemens are using IoT to optimize the operation and maintenance of offshore wind power farms, the lifetime extension of wind turbines and the reducing the cost of energy.\nFacilities Management: Monitoring of buildings, infrastructure, and other spaces, allow to improve energy efficiency, space utilization, productivity, and safety. These insights may help:\n\nsave money by automating lighting or optimizing heating and cooling cycles.\nIncrease employee or occupant satisfaction by keep equipment running or ensuring that supplies are stocked."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#high-level-components-of-an-iot-system",
    "href": "lessons/iot/what-is-iot.slides.html#high-level-components-of-an-iot-system",
    "title": "Intro to the Internet of Things",
    "section": "High-level Components of an IoT System",
    "text": "High-level Components of an IoT System\nIoT systems are compromised of five high-level components:\n\nSensors:\n\nCollect data from the device’s environment (eg. velocity, GPS coordinates, temperature, etc).\nSensors might use different communication protocols.\n\nIoT Devices are computing devices that have:\n\nAbility to securely register with the cloud;\nConnectivity options for sending and receiving data with the cloud.\n\nCloud Gateway / Hub:\n\nSecurely ingests and sends data or commands to devices;\nOffers device management (provisioning) services (add, remove, update, group, etc).\n\nData Processing:\n\nData validation;\nIntegrate with business processes (check thresholds, send alerts, trigger action)\nPlace data in Storage;\nRetrieve data from Storage for deeper / long-term analysis;\n\nUser Interface:\n\nData visualization;\nTrigger manual actions;\nConfigure automatic actions;\nFacilitate device management.\n\n\n\nIcons of IoT High level components"
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#iot-cloud-service-providers",
    "href": "lessons/iot/what-is-iot.slides.html#iot-cloud-service-providers",
    "title": "Intro to the Internet of Things",
    "section": "IoT Cloud Service Providers",
    "text": "IoT Cloud Service Providers\nSince IoT objects typically move around, connectivity and data collection need to happen over wide geographical areas.\nMost companies do not want to deal with setting-up the physical infrastructure and software required to have this level of distributed connectivity and reliability (servers, databases, backup systems, networking, container orchestration, etc).\nIt is typically far more practical and cost-effective to use the services of an established IoT Cloud Service Provider.\nThe three main Cloud Service Providers in the IoT space are:\n\nAmazon Web Services (AWS)\nMicrosoft Azure\nGoogle Cloud\n\n\nThere are many other Cloud providers such as IBM Cloud IoT and Oracle IoT.\n\nIn this course we will focus on Microsoft Azure. However, all three platforms offer similar functionality."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#azure-account-check",
    "href": "lessons/iot/what-is-iot.slides.html#azure-account-check",
    "title": "Intro to the Internet of Things",
    "section": "Azure Account Check",
    "text": "Azure Account Check\nStudents get $100 of credit for 12 months and free developer tools without a credit card.\n\nCreate an account and see details here.\n\nThe student account can be renewed annually (including $100 credits) for as long as you are a student.\nMost things we’ll do with Azure will use free services. We will occasionally use some of your free credits (~$20).\nChecking your balance 💸\nAs you experiment with Azure you might want to know your current balance.\nTL:DR 1. Sign in to the Azure portn in to the Azure portal.al. 2. Search for Cost Management \n\nSelect Payment methods\nCheck your Azure credits panel.\n\n\n\n\nCredit check panel in Azure\n\n\nFor details check Track Microsoft Customer Agreement Azure credit balance\nBudget Alerts\nIt’s possible to setup email alerts when your Azure spending exceeds a dollar threshold. This avoids unexpected spending of Azure credits.\nThere are two approaches to setting up a Budget in the Azure Portal:\n\nOpen the panel (aka “blade”) for the Resource Group in question, and then create a new Budget for that group.\nCreate a Budget for your account under Cost Management + Billing and then apply a filter according to ResourceGroupName in order to target a specific Resource Group.\n\nThe first approach involves a few less steps so it is described below.\n\nFor information on creating a budget from the Cost Management blade, see How to set up Azure budget alerts by TechTarget.com.\nFor details on using and managing budgets, see official tutorial: Create and manage Azure budgets.\n\nCreate a Budget for a Resource Group\n\nIn the Azure Portal Home, select the Resource groups service.\nSelect the resource group you want to monitor with a budget.\nIn the left panel, select Budgets under the Cost Management group and select Add.\n\n\n\n\nMenu for creating a budget for a resource group\n\n\n\nGive your budget a name and an amount.\n\n\n\nSelect the percent spending for the alert and the email to receive the notification.\nClick Create."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#exercises",
    "href": "lessons/iot/what-is-iot.slides.html#exercises",
    "title": "Intro to the Internet of Things",
    "section": "Exercises",
    "text": "Exercises\nNOTE: The exercise below is out of date. We will see IOT learning material later in the course.\n\nRead the Microsoft training module Examine the architecture of an IoT solution and complete the Moodle quiz on the module."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#diving-deeper",
    "href": "lessons/iot/what-is-iot.slides.html#diving-deeper",
    "title": "Intro to the Internet of Things",
    "section": "Diving Deeper",
    "text": "Diving Deeper\nVideo (15:19): The 7 Principles of the IoT by Tom Bradicich\n\nIn depth explanation of the integration between IoT sub-systems and opportunities from a technical and business perspective."
  },
  {
    "objectID": "lessons/iot/what-is-iot.slides.html#references",
    "href": "lessons/iot/what-is-iot.slides.html#references",
    "title": "Intro to the Internet of Things",
    "section": "References",
    "text": "References\n\nWhat is IoT by Microsoft Azure.\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\nAn Introduction to the Internet of Things by Pier Paolo Ippolito via FreeCodeCamp Blog."
  },
  {
    "objectID": "lessons/iot/what-is-iot.html",
    "href": "lessons/iot/what-is-iot.html",
    "title": "Intro to the Internet of Things",
    "section": "",
    "text": "Image: © Irina Strelnikova / Adobe Stock",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#internet-of-things-iot",
    "href": "lessons/iot/what-is-iot.html#internet-of-things-iot",
    "title": "Intro to the Internet of Things",
    "section": "Internet of Things (IoT)",
    "text": "Internet of Things (IoT)\nThe Internet of Things (IoT) is comprised of equipment, machines, products, and devices that are connected to the cloud and periodically collect, send and/or receive data.\n\nIoT refers to the entire network of:\n\nphysical devices,\ntools,\nequipment, and\nsmart objects\n\nThese objects have the capability to collect and share data about:\n\nhow they are used\nthe environment around them\n\nIoT devices can also receive commands or updates via the cloud.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#why-collect-all-this-data",
    "href": "lessons/iot/what-is-iot.html#why-collect-all-this-data",
    "title": "Intro to the Internet of Things",
    "section": "Why collect all this data?",
    "text": "Why collect all this data?\nBy analyzing the data collected by these connected objects, users and organisations can make informed decisions in near real-time and automate tightly integrated processes. This avoids decision making based on limited or out-dated data.\nThis data can create quick feedback loops for automation. Data from one object can trigger actions or control several other objects with timing and precision that could not be achieved by humans.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#iot-examples",
    "href": "lessons/iot/what-is-iot.html#iot-examples",
    "title": "Intro to the Internet of Things",
    "section": "IoT Examples",
    "text": "IoT Examples\nThe use of IoT can be organised in two fields of application:\n\nIndustrial IoT (IIoT)\nConsumer IoT\n\n\n\n\nExamples of industrial and consumer iot applications\n\n\n\n The Internet of Things and its Benefit to U.S. Water Customer    in kuritaamerica.com\n\n\nConsumer IoT\nExamples of consumer IoT are:\n\nHome Security: Sensors, alarms, cameras, lights, and microphones provide 24/7 security and surveillance. All of which can be controlled from a smart phone.\nSmart Home: Smart lighting, heating and sound systems can be automated to detect human present or receive instructions remotely. Voice Assistants can also control house appliances or and provide information.\nWearables: Smartwatches and fitness trackers can monitor blood pressure or heart rate, and physical activity and suggest workouts, breaks or medical assistance.\nAppliances: Smart fridges can keep track of food quantities and expiry dates and create shopping lists accordingly. Smart outlet plugs can measure electrical consumption and turn other appliances on/off.\n\n\n\nIndustrial IoT (IIoT)\nMost people tend to first think of IoT as consumer devices. However, their main value added happens in industrial applications.\n\n\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\n\nIndustrial IoT Examples:\n\nEquipment Maintenance: Rolls-Royce’s Total Care provides a suite of predictive maintenance and repair services for its jet engines, including monitoring engine health, and modifying engines to increase reliability and durability.\nFarming: John Deere is building intelligence into its large tractors and sprayers through sensors that make the machines into mobile platforms capable of self-driving.\nHeavy Machinery & Transportation: Rio Tinto, a global mining company uses a remote command center to orchestrate the actions of huge drills, excavators, trains, and trucks across multiple mining sites.\nRenewable Energies: Iberdrola and Siemens are using IoT to optimize the operation and maintenance of offshore wind power farms, the lifetime extension of wind turbines and the reducing the cost of energy.\nFacilities Management: Monitoring of buildings, infrastructure, and other spaces, allow to improve energy efficiency, space utilization, productivity, and safety. These insights may help:\n\nsave money by automating lighting or optimizing heating and cooling cycles.\nIncrease employee or occupant satisfaction by keep equipment running or ensuring that supplies are stocked.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#high-level-components-of-an-iot-system",
    "href": "lessons/iot/what-is-iot.html#high-level-components-of-an-iot-system",
    "title": "Intro to the Internet of Things",
    "section": "High-level Components of an IoT System",
    "text": "High-level Components of an IoT System\nIoT systems are compromised of five high-level components:\n\nSensors:\n\nCollect data from the device’s environment (eg. velocity, GPS coordinates, temperature, etc).\nSensors might use different communication protocols.\n\nIoT Devices are computing devices that have:\n\nAbility to securely register with the cloud;\nConnectivity options for sending and receiving data with the cloud.\n\nCloud Gateway / Hub:\n\nSecurely ingests and sends data or commands to devices;\nOffers device management (provisioning) services (add, remove, update, group, etc).\n\nData Processing:\n\nData validation;\nIntegrate with business processes (check thresholds, send alerts, trigger action)\nPlace data in Storage;\nRetrieve data from Storage for deeper / long-term analysis;\n\nUser Interface:\n\nData visualization;\nTrigger manual actions;\nConfigure automatic actions;\nFacilitate device management.\n\n\n\n\n\nIcons of IoT High level components",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#iot-cloud-service-providers",
    "href": "lessons/iot/what-is-iot.html#iot-cloud-service-providers",
    "title": "Intro to the Internet of Things",
    "section": "IoT Cloud Service Providers",
    "text": "IoT Cloud Service Providers\nSince IoT objects typically move around, connectivity and data collection need to happen over wide geographical areas.\nMost companies do not want to deal with setting-up the physical infrastructure and software required to have this level of distributed connectivity and reliability (servers, databases, backup systems, networking, container orchestration, etc).\nIt is typically far more practical and cost-effective to use the services of an established IoT Cloud Service Provider.\nThe three main Cloud Service Providers in the IoT space are:\n\nAmazon Web Services (AWS)\nMicrosoft Azure\nGoogle Cloud\n\n\nThere are many other Cloud providers such as IBM Cloud IoT and Oracle IoT.\n\nIn this course we will focus on Microsoft Azure. However, all three platforms offer similar functionality.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#azure-account-check",
    "href": "lessons/iot/what-is-iot.html#azure-account-check",
    "title": "Intro to the Internet of Things",
    "section": "Azure Account Check",
    "text": "Azure Account Check\nStudents get $100 of credit for 12 months and free developer tools without a credit card.\n\nCreate an account and see details here.\n\nThe student account can be renewed annually (including $100 credits) for as long as you are a student.\nMost things we’ll do with Azure will use free services. We will occasionally use some of your free credits (~$20).\n\nChecking your balance 💸\nAs you experiment with Azure you might want to know your current balance.\nTL:DR 1. Sign in to the Azure portn in to the Azure portal.al. 2. Search for Cost Management \n\nSelect Payment methods\nCheck your Azure credits panel.\n\n\n\n\nCredit check panel in Azure\n\n\nFor details check Track Microsoft Customer Agreement Azure credit balance\n\n\nBudget Alerts\nIt’s possible to setup email alerts when your Azure spending exceeds a dollar threshold. This avoids unexpected spending of Azure credits.\nThere are two approaches to setting up a Budget in the Azure Portal:\n\nOpen the panel (aka “blade”) for the Resource Group in question, and then create a new Budget for that group.\nCreate a Budget for your account under Cost Management + Billing and then apply a filter according to ResourceGroupName in order to target a specific Resource Group.\n\nThe first approach involves a few less steps so it is described below.\n\n\nFor information on creating a budget from the Cost Management blade, see How to set up Azure budget alerts by TechTarget.com.\nFor details on using and managing budgets, see official tutorial: Create and manage Azure budgets.\n\n\n\nCreate a Budget for a Resource Group\n\nIn the Azure Portal Home, select the Resource groups service.\nSelect the resource group you want to monitor with a budget.\nIn the left panel, select Budgets under the Cost Management group and select Add.\n\n\n\n\nMenu for creating a budget for a resource group\n\n\n\nGive your budget a name and an amount.\n\n\n\nSelect the percent spending for the alert and the email to receive the notification.\nClick Create.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#exercises",
    "href": "lessons/iot/what-is-iot.html#exercises",
    "title": "Intro to the Internet of Things",
    "section": "Exercises",
    "text": "Exercises\nNOTE: The exercise below is out of date. We will see IOT learning material later in the course.\n\nRead the Microsoft training module Examine the architecture of an IoT solution and complete the Moodle quiz on the module.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#diving-deeper",
    "href": "lessons/iot/what-is-iot.html#diving-deeper",
    "title": "Intro to the Internet of Things",
    "section": "Diving Deeper",
    "text": "Diving Deeper\nVideo (15:19): The 7 Principles of the IoT by Tom Bradicich\n\nIn depth explanation of the integration between IoT sub-systems and opportunities from a technical and business perspective.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/iot/what-is-iot.html#references",
    "href": "lessons/iot/what-is-iot.html#references",
    "title": "Intro to the Internet of Things",
    "section": "References",
    "text": "References\n\nWhat is IoT by Microsoft Azure.\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\nAn Introduction to the Internet of Things by Pier Paolo Ippolito via FreeCodeCamp Blog.",
    "crumbs": [
      "Lessons",
      "IoT",
      "Intro to the Internet of Things"
    ]
  },
  {
    "objectID": "lessons/python/intro-python.html",
    "href": "lessons/python/intro-python.html",
    "title": "Intro to Python for Developers",
    "section": "",
    "text": "Notes provided on a different platform,\n\nSee Interactive notes in Google Colab.\n\n\n\n\n Back to top",
    "crumbs": [
      "Lessons",
      "Python",
      "Intro to Python for Developers"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This companion site for the 420-6P3 course includes:\n\n\nLecture slides / documents\nExercises\nReferences & Resources\n\n\nWebsite accessible at john-abbott-college.github.io/6P3-Notes\n\n\nThis course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands.\n\n\n\n\nExperience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account (create a free Azure for Students account if necessary).\nVS Code configured for Python programming and remote development (see page Dev Setup).\n\n\n\n\nThis webpage is written in Markdown, built with Docsify and deployed via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nClone the GitHub repository listed above\nFrom the command-line, navigate to the repository folder named 6P3-Notes\nStart a simple python web-server inside the 6P3-Notes folder (make sure python3 is installed)\npython -m http.server\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n\n\n\nCC BY-NC 4.0"
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Home",
    "section": "",
    "text": "This course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Home",
    "section": "",
    "text": "Experience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account (create a free Azure for Students account if necessary).\nVS Code configured for Python programming and remote development (see page Dev Setup)."
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Home",
    "section": "",
    "text": "This webpage is written in Markdown, built with Docsify and deployed via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nClone the GitHub repository listed above\nFrom the command-line, navigate to the repository folder named 6P3-Notes\nStart a simple python web-server inside the 6P3-Notes folder (make sure python3 is installed)\npython -m http.server\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n\n\n\nCC BY-NC 4.0"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n\n\n\n\n\n\n\n\n\nCalendar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSyllabus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top",
    "crumbs": [
      "About"
    ]
  }
]