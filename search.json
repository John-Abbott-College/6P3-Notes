[
  {
    "objectID": "about/this-site/index.html",
    "href": "about/this-site/index.html",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-content",
    "href": "about/this-site/index.html#course-content",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-website",
    "href": "about/this-site/index.html#course-website",
    "title": "About this website",
    "section": "2 Course website",
    "text": "2 Course website\nDetails about how this website was built follow.\n\n2.1 Colophon\n\n\n\n\n\nFrom Wikipedia: In publishing, a colophon is a brief statement containing information about the publication of a book… Some web pages also have colophons, which frequently contain (X)HTML, CSS, or usability standards compliance information and links to website validation tests.\n\n\n\nMarkup: Markdown\nFramework: Quarto\nDeployment: GitHub Pages\n\nYou can follow along directly with course updates at the course repository."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This companion site for the 420-6P3 course includes:\n\n\nLecture slides / documents\nExercises\nReferences & Resources\n\n\nWebsite accessible at john-abbott-college.github.io/6P3-Notes\n\n\nThis course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands.\n\n\n\n\nExperience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup).\n\n\n\n\nThis webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Home",
    "section": "",
    "text": "This course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Home",
    "section": "",
    "text": "Experience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup)."
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Home",
    "section": "",
    "text": "This webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "Course Notes",
    "section": "",
    "text": "Default viewTable viewGrid view\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation. \n\n\n\nlab-3\n\n\n\n\n\n\nJan 20, 2025\n\n\n3 min\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nDeveloper environment setup\n\n\nInstructions for setting up classroom and personal computers for programming in this course, including: setting up a Debian container on WSL; restoring your WSL container from backup quickly; installing needed dependencies on WSL, Mac/OSX, and Linux; verifying that needed dependencies have been installed. \n\n\n\nlab-0\n\n\nlab-1\n\n\n\n\n\n\nJan 20, 2025\n\n\n6 min\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects. \n\n\n\nbash\n\n\nlab-0\n\n\nlab-1\n\n\n\n\n\n\nJan 31, 2025\n\n\n6 min\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub basics\n\n\nBasics of cloning a repository hosted on Github and creating branches. Using a personal access token for authentication on GitHub outside of VSCode. Using the pass password manager to store access tokens safely. \n\n\n\ngit\n\n\nlab-1\n\n\n\n\n\n\nFeb 10, 2025\n\n\n5 min\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nBash scripting\n\n\nTips for scripting in bash effectively. Managing environment and permissions in bash. The capabilities and limitations of programming in bash. \n\n\n\nbash\n\n\nlab-2\n\n\n\n\n\n\nFeb 17, 2025\n\n\n4 min\n\n\nFeb 21, 2025\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nSubtitle\n\n\nModified\n\n\n\n\n\n\nJan 20\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation. \n\n\nFeb 21\n\n\n\n\nJan 20\n\n\nDeveloper environment setup\n\n\nInstructions for setting up classroom and personal computers for programming in this course, including: setting up a Debian container on WSL; restoring your WSL container from backup quickly; installing needed dependencies on WSL, Mac/OSX, and Linux; verifying that needed dependencies have been installed. \n\n\nFeb 21\n\n\n\n\nJan 31\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects. \n\n\nFeb 21\n\n\n\n\nFeb 10\n\n\nGitHub basics\n\n\nBasics of cloning a repository hosted on Github and creating branches. Using a personal access token for authentication on GitHub outside of VSCode. Using the pass password manager to store access tokens safely. \n\n\nFeb 21\n\n\n\n\nFeb 17\n\n\nBash scripting\n\n\nTips for scripting in bash effectively. Managing environment and permissions in bash. The capabilities and limitations of programming in bash. \n\n\nFeb 21\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n3 min\n\n\n\nlab-3\n\n\n\n\nJan 20, 2025\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\nDeveloper environment setup\n\n\nInstructions for setting up classroom and personal computers for programming in this course, including: setting up a Debian container on WSL; restoring your WSL container from backup quickly; installing needed dependencies on WSL, Mac/OSX, and Linux; verifying that needed dependencies have been installed.\n\n\n6 min\n\n\n\nlab-0\n\n\nlab-1\n\n\n\n\nJan 20, 2025\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects.\n\n\n6 min\n\n\n\nbash\n\n\nlab-0\n\n\nlab-1\n\n\n\n\nJan 31, 2025\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\nGitHub basics\n\n\nBasics of cloning a repository hosted on Github and creating branches. Using a personal access token for authentication on GitHub outside of VSCode. Using the pass password manager to store access tokens safely.\n\n\n5 min\n\n\n\ngit\n\n\nlab-1\n\n\n\n\nFeb 10, 2025\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nBash scripting\n\n\nTips for scripting in bash effectively. Managing environment and permissions in bash. The capabilities and limitations of programming in bash.\n\n\n4 min\n\n\n\nbash\n\n\nlab-2\n\n\n\n\nFeb 17, 2025\n\n\n\n\n\nFeb 21, 2025\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/developer-environment/index.html",
    "href": "notes/developer-environment/index.html",
    "title": "Developer environment setup",
    "section": "",
    "text": "Photo by Tima Miroshnichenko"
  },
  {
    "objectID": "notes/developer-environment/index.html#overview",
    "href": "notes/developer-environment/index.html#overview",
    "title": "Developer environment setup",
    "section": "1 Overview",
    "text": "1 Overview\nThroughout this semester, we will make regular use of bash, python, git, and other 3rd party command line tools such as azure-cli and gh-cli.\nNo matter what hardware you have available at home, everyone should be comfortable completing coding assignments on their personal computers and on classroom computers.\nEveryone will need the following set up:\n\non a classroom computer:\n\na Debian WSL container with all class dependencies installed using apt\n\non personal computers:\n\nIf Windows: a Debian WSL container with all class dependencies installed using apt\nIf macOS: all class dependencies installed using brew\nIf Linux: all class dependencies installed using distribution package manager\n\n\nThe sections below show how to do that, and how to verify the installation, in each case."
  },
  {
    "objectID": "notes/developer-environment/index.html#classroom-computers-linux-wsl",
    "href": "notes/developer-environment/index.html#classroom-computers-linux-wsl",
    "title": "Developer environment setup",
    "section": "2 Classroom computers: Linux WSL",
    "text": "2 Classroom computers: Linux WSL\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\n2.1 Ensure necessary Windows software installed\nThese programs should already be installed on your Windows machine, but in case they are not:\n\nLink for installing git on Windows\nLink for installing Windows Terminal\n\n\n2.1.1 VS Code Extensions\nIf you have not already, install VSCode.\nThen, install the following extensions:\n\nRemote Development extension pack by Microsoft\nPython language support extension\nPython formatter/linter extension (ruff)\n\n\n\n\n2.2 Install Debian WSL\n\n\nPowershell\n\n# Verify that Debian is an available OS to install\nPS &gt; wsl --list --online # Debian should be one of the results\n\n# Install Debian\nPS &gt; wsl --install -d Debian\n\nYou will be prompted to create a username and password:\n\n\nPowershell\n\n# Recommended: All lower case. Something easy to type, e.g. your first name\nEnter new UNIX username:\n# Recommended: Don't overthink this, you can always change this later\nNew password:\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you forget the password for your WSL container, you can easily reset it.\nSee the Microsoft article Set up your linux username and password.\n\nAfter this, your installation is complete.\nSee the following links for more details if needed:\n\nInstall Debian on WSL\nChoosing Debian as the Linux distribution\nTroubleshooting WSL installation\n\n\n\n2.3 Configure terminal to use WSL\nFollow the steps in Set up Windows Terminal, particularly:\n\n\n\n\n\nWe’re going to spend a lot of time in terminal environments – you might as well enjoy using it. I find it motivating to use terminals that look and feel good to use. Image source\n\n\n\nEnsure your Debian WSL instance is the default profile\n\nThen, pin Windows Terminal to your taskbar, ideally as the first app\nUse Win+1 to open Windows Terminal automatically.\n\nChoose a theme\nChoose a color scheme\n\nCustomizing a color scheme\n\nPractise searching through terminal output using Ctrl+Shift+F\nMake sure you know how to copy/paste text in Windows Terminal\n\nYou can also use Ctrl+Shift+c and Ctrl+Shift+v to copy/paste in terminals\nYou can also use Ctrl+Insert and Shift+Insert to copy paste in terminals\n\nUse Ctrl+Shift+P to open the command palette to do almost any terminal config command (very similar to VSCode).\n\nThis is very useful for learning hotkeys for the following things:\n\nmaking terminal panes\nchanging focus\n\n\n\nSee Troubleshooting Windows Terminal for more details.\n\n\n2.4 Install dependencies\n\n2.4.1 Perform system update\n\n\nbash\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n\n\n\n2.4.2 Install python\n\n\nbash\n\n# Verify python version is &gt;= 3.9:\npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version\n\n\n\n2.4.3 Set up git\nYou’ll need to do the following to set up git on both your WSL:\n\n\nbash\n\nsudo apt install git\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"youremail@domain.com\"\n\nSee Installing Git for more detail if needed.\n\n\n2.4.4 Install other needed tools\nWe’re going to need the following packages:\n\n\nbash\n\nsudo apt install man ssh wget ca-certificates rsync pass pass-extension-otp zbar-tools vim\n\nLast update to this command: February 21, 2025\n\n\n\n\n\n\nNote\n\n\n\nIf, when running sudo apt install, you have an error like this:\n\n\nbash\n\nE: Failed to fetch &lt;url&gt; 404 Not Found [IP: &lt;ip&gt;]\nE: Unable to fetch some archives, maybe run apt get update or try with --fix-missing?\n\nMake sure you update the system:\n\n\nbash\n\n# you can also run sudo apt upgrade -y, but it's not necessary all the time.\nsudo apt update\n\nThen, try the installation command again.\n\n\nI’ll keep this command updated throughout the semester as we encounter more packages we need.\n\n\n\n2.5 Backup container to OneDrive\nOnce the initial setup is complete, backups of the WSL container are easy to make.\nOnce a backup is made, it’s easy to:\n\nrecreate the exact same image on a new machine\nrestore your image in case the disk is wiped (this seems to be happening to our lab computers…)\n\n\n2.5.1 Backup command\nFirst, let’s ensure you have a folder to keep your backups.\nRecommendation: store WSL images on your college OneDrive account. That way, you can easily share your image with your personal computer, and restore your image automatically using any college computer.\n\n\nPowershell\n\nPS &gt; md -Force \"C:\\Users\\&lt;your-username&gt;\\OneDrive\\420-6P3-W25\"\n\nThen, we’ll use wsl --export to make a backup copy of your WSL container:\n\n\nPowershell\n\n# This can take around 5 minutes to finish.\nPS &gt; wsl --export Debian \"C:\\Users\\&lt;your-username\\OneDrive\\420-6P3-W25\\debian.tar\n\n\n\n2.5.2 Restore command\nOn a new machine (or on a machine with a freshly wiped hard drive…) you can --import the backup image you created:\n\n\nPowershell\n\n# This can take around 5 minutes to finish.\nPS &gt; wsl --import Debian .\\Debian \"C:\\Users\\&lt;your-username&gt;\\OneDrive\\debian.tar\"\n\n\n\n\n\n\n\nNote\n\n\n\nAfter restoring WSL, you will find that you are automatically logged in as root instead of your username.\nThe way to set a default user in a WSL container instance is to create a [user] entry in the container’s /etc/wsl.conf file:\nOpen your wsl instance and add the following entry to /etc/wsl.conf:\n\n\n/etc/wsl.conf\n\n[user]\ndefault=username\n\nExit your distro/instance, then run a wsl --terminate &lt;distroname&gt; from PowerShell.\nWhen you restart, the default user should be set to username.\nFor more detail: https://superuser.com/a/1627461"
  },
  {
    "objectID": "notes/developer-environment/index.html#personal-computers",
    "href": "notes/developer-environment/index.html#personal-computers",
    "title": "Developer environment setup",
    "section": "3 Personal computers",
    "text": "3 Personal computers\n\n3.1 Windows (WSL)\nAfter setting up WSL on a classroom computer, and backing up your WSL to OneDrive, the easiest way to set up WSL on your personal computer is to import your backup WSL image on your personal computer.\nNote that any changes made to either container, after the import, will not be automatically synchronized.\nIf you are making many customizations, you might want to keep your backup up-to-date.\n\n\n3.2 macOS / Linux\nOn a terminal on your computer, install the packages below.\nOn OS X we’ll use brew, on Linux you can use your system’s package manager:\n\n\nbash\n\n# Update system:\nbrew update && brew upgrade\n# Verify python version is &gt;= 3.9:\npython3 --version\n# Ensure pip is installed:\npython3 -m pip install --upgrade pip\n\n# Install other dependencies\nbrew install wget ca-certificates rsync pass pass-otp zbar vim\n\nLast update to this command: February 21, 2025\nAlso ensure you have installed VSCode and configured its extensions"
  },
  {
    "objectID": "notes/developer-environment/index.html#verify-environment",
    "href": "notes/developer-environment/index.html#verify-environment",
    "title": "Developer environment setup",
    "section": "4 Verify environment",
    "text": "4 Verify environment\nYour developer environment, whether on WSL, macOS, or Linux, should be able to run the following commands with the following results:\n\n\nbash\n\n# Verify python version is &gt;= 3.9 and pip is installed\npython3 --version\npip3 --version # or pip --version\n\n# Verify git config set up: ensure the output makes sense for you\ngit config user.name\ngit config user.email\n\n# For the following no specific version is required\n# but, these commands should not fail (show error message or exit error code 1)\nman -V\nssh -V\nrsync --version\npass --version\npass otp --version\nzbarimg --version\nvim --version"
  },
  {
    "objectID": "notes/bash-scripting/index.html",
    "href": "notes/bash-scripting/index.html",
    "title": "Bash scripting",
    "section": "",
    "text": "Image source: tudoubaba.net"
  },
  {
    "objectID": "notes/bash-scripting/index.html#bash-theory",
    "href": "notes/bash-scripting/index.html#bash-theory",
    "title": "Bash scripting",
    "section": "1 Bash theory",
    "text": "1 Bash theory\n\n1.1 Variables\n\n\n1.2 Scope\n\n\n1.3 Conditionals\n\n\n1.4 Functions\n\n\n1.5 Exit codes"
  },
  {
    "objectID": "notes/bash-scripting/index.html#os-theory",
    "href": "notes/bash-scripting/index.html#os-theory",
    "title": "Bash scripting",
    "section": "2 OS theory",
    "text": "2 OS theory\n\n2.1 Shell\n\n\n2.2 Permissions\nThis section was adapted from (“How-To: Set Permissions in Bash - Linux - SS64.com” n.d.)\n\n2.2.1 View permissions with ls\nThe ouptut of ls -l will show the current permissions for files and folders:\n-rwxr--rw- 1 user user 0 Jan 19 12:59 file1.txt\nThe letters rwx stand for Read/Write/Execute permission. These rights are shown three times, first for the Owner, then the Group and lastly Others (world)\n\n\n2.2.2 Edit permissions with chmod\nThe command to modify permissions is chmod. There are two ways to modify permissions, with numbers or with letters.\nCheck out this this chmod documentation for a really great interactive demo.\n\n2.2.2.1 Numeric\n\nchmod 400 file - Read by owner\nchmod 040 file - Read by group\nchmod 004 file - Read by world\nchmod 200 file - Write by owner\nchmod 020 file - Write by group\nchmod 002 file - Write by world\nchmod 100 file - execute by owner\nchmod 010 file - execute by group\nchmod 001 file - execute by world\n\nTo combine these, just add the numbers together:\n\nchmod 444 file - Allow read permission to owner and group and world\nchmod 777 file - Allow everyone to read, write, and execute file\n\n\n\n2.2.2.2 Symbolic\nchmod also accepts symbolic arguments for permission changes, where:\n\nrwx: read/write/execute\nugo: user/group/world\n\nSome examples:\n\nDeny execute permission to everyone: $ chmod a-x file\nAllow read permission to everyone: $ chmod a+r file\nMake a file readable and writable by the group and others: $ chmod go+rw file\nMake a shell script executable by the user/owner: $ chmod u+x myscript.sh\nAllow everyone to read, write, and execute the file and turn on the set group-ID: $ chmod =rwx,g+s file\n\nSome files are configured to have very restrictive permissions to prevent unauthorized access. Changing these permissions can create security problems.\nTo change or edit files that are owned by root, sudo chmod must be used. Note that changing permissions incorrectly can quickly make your system unusable! Please be careful when using sudo!\n$ sudo chmod o+x /usr/local/bin/somefile\n\n\n\n2.2.3 Recursive Permission Changes\nchmod -R will change all the permissions of each file and folder under a specified directory at once.\nFor example, $ chmod 777 -R /path/to/Dir will grant read/write/execute permissions to all users for ALL files in /path/to/Dir.\nTo assign reasonably secure permissions to files and folders/directories, it’s common to give files a permission of 644, and directories a 755 permission, using the find command and a pipe we can target just files or just folders as in the following examples.\n$ sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644`\n$ sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755\nAgain if using sudo be careful, in particular watch for extra spaces in your command/path.\n\n\n2.2.4 Changing Ownership and Group membership\nA file’s owner can be changed using the chown command.\n$ sudo chown kate file1.txt\nA file’s group can also be changed using the chown command.\n$ sudo chown :mygroup file1.txt\nchown can also change the owner and group in a single command:\n$ sudo chown tux:mygroup file1.txt\n\n\n\n2.3 Filesystem"
  },
  {
    "objectID": "notes/bash-scripting/index.html#code-reuse",
    "href": "notes/bash-scripting/index.html#code-reuse",
    "title": "Bash scripting",
    "section": "3 Code reuse",
    "text": "3 Code reuse\n\n3.1 source\nThis section was adapted from (“Linux Command Line Adventure: Source” n.d.)\nMost programming languages permit programmers to specify external files to be included within their programs. This is often used to add “boilerplate” code to programs for such things as defining standard constants and referencing external library function definitions.\nBash has a builtin command, source, that implements this feature. This section will cover the ways it can make our scripts more powerful and easier to maintain.\nsource reads a specified file and executes the commands within it using the current shell. It works both with the interactive command line and within a script. Using the command line for example, we can reload the .bashrc file by executing the following command:\nme@linuxbox: ~$ source ~/.bashrc\nNote that the source command can be abbreviated by a single dot character like so:\nme@linuxbox: ~$ . ~/.bashrc\nWhen source is used on the command line, the commands in the file are treated as if they are being typed directly at the keyboard. In a shell script, the commands are treated as though they are part of the script.\n\n3.1.1 Function Libraries\nsource is a natural way to share functions and variables across many bash programs. For example, it makes sense to have a shared function to display error messages:\n\n\nbash\n\nerror_msg() {\n  printf \"%s\\n\" \"$1\" &gt;&2\n}\n\nTo share these functions across other scripts, we could build a library of functions and source that library. As an example, we could put all the common code in a file called ~/bash-scripts.sh and add the following code to both scripts to source that file:\n\n\nbash\n\nFUNCLIB=~/bash-scripts.sh\n\nif [[ -r \"$FUNCLIB\" ]]; then\n    source \"$FUNCLIB\"\nelse\n    echo \"Cannot read function library!\" &gt;&2\n    exit 1\nfi\n\nIf you put source statements like this in your ~/.bashrc, your functions will always be available each time you open a new terminal instance.\n\n\n\n3.2 Scripts"
  },
  {
    "objectID": "notes/github-basics/index.html#overview",
    "href": "notes/github-basics/index.html#overview",
    "title": "GitHub basics",
    "section": "1 Overview",
    "text": "1 Overview\nThese notes cover the basics for using GitHub in this class."
  },
  {
    "objectID": "notes/github-basics/index.html#branch-management",
    "href": "notes/github-basics/index.html#branch-management",
    "title": "GitHub basics",
    "section": "2 Branch management",
    "text": "2 Branch management\nAlmost all of our lab and assignment work will take place on branches.\n\n2.1 Creating a branch using the GitHub website\nYou can add branches to your repository directly by clicking the “Branches” icon, and then “New Branch” on the subsequent window (screenshots below).\nYou’ll need the following information:\n\nNew branch name: the lab name (e.g. lab-0).\nSource: the instructions branch from your own repository\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: The user interface for creating branches on GitHub.\n\n\n\n\n\n2.2 Creating a branch using VSCode\nYou can create branches within your project using VSCode:\n\n\n\n\n\n\nFigure 2: Clicking on the branch button (bottom left) launches a dialog which allows for a few branch operations: you can create a new branch, switch to a local branch, switch/pull a remote branch, etc.\n\n\n\n\n\n2.3 Creating a branch using the command line\n# make sure you are on the `instructions` branch before proceeding\ngit status\n# the switch command switches branches, -c flag stands for \"create\"\ngit switch -c lab-0\n# upload your branch to the remote repository\ngit push -u origin\n# ensure your new lab-0 branch is up to date with new remote lab-0 branch\ngit status"
  },
  {
    "objectID": "notes/github-basics/index.html#authentication",
    "href": "notes/github-basics/index.html#authentication",
    "title": "GitHub basics",
    "section": "3 Authentication",
    "text": "3 Authentication\nMany git operations require authentication to get permission. Some examples:\n\nPushing to a repository\nPulling from a private repository\nUsing GitHub CLI\n\nSince July 2021, GitHub no longer accepts account passwords to authenticate git operations. You have probably run into this error many times when trying to push changes or clone your private repositories on a new machine.\nThe only reason VSCode works out of the box is because VSCode and GitHub are integrated by default, both being owned by Microsoft.\nThe following sections gives us more flexible and useful ways to authenticate git commands with GitHub.\n\n3.1 Creating a personal access token\nRead “Managing your personal access tokens” on Github, and create a classic (not fine-grained) personal access token.\nAt the very least, select the repo scope – this will give your token the ability to authenticate using git on the CLI. You can select all other scopes as well if you like.\nOnce you’re finished, you’ll see your token is a string of the following form:\nghp_&lt;long string of letters and numbers&gt;\nKeep this window open – the string of characters will disappear as soon as you refresh the page.\nWe need to configure a secure storage location for this string. For this, we will use the tool pass.\n\n\n3.2 Using a password manager to store your token\nSecrets like personal access tokens need to be readily accessible to be useful – but they also should be secret, so that others cannot easily impersonate you using the token.\nA common method for managing secrets is to use a password manager. In our course we use pass to securely manage our personal access tokens on our developer environment.\n\n3.2.1 Install pass dependencies\nFirst, ensure pass and some useful related dependencies are installed:\n# On WSL / Linux\nsudo apt install pass pass-extension-otp zbar-tools\n\n# On macOS\nbrew install pass pass-otp zbar\n\n\n3.2.2 Set up gpg\npass works by using asymmetric key encryption to store secrets. That means: you posess the private key that can decrypt secrets, and you make the public key available which can encrypt secrets.\nThis scheme is not only useful for private communication (something similar is used by apps like Signal and Telegram), but also for storing any secrets – for us, we will store our github token as a secret.\nTo get started, you’ll need to generated a gpg key-pair in order to use pass.\n\n\n\n\n\n\nNote\n\n\n\nThe GitHub instructions mention using git bash – ignore them, you have a developer environment to use instead.\nIn general, when I link to external instructions, you will need to pay attention to what parts of them may be different in our class. This is a good skill in general for making effective use of resources posted online when learning a new skill.\n\n\nFollow the instructions below:\n\nCreate the gpg key-pair following the instructions on GitHub: Generating a new GPG key\nrun gpg --full-generate-key to get started.\nRecommended: You can accept the default key type (RSA)\nRecommended: Choose 4096 bits for the keysize.\nRecommended: You can accept the default “does not expire” option.\nEnter user ID information. This information should match what you have provided to GitHub already (username/email address)\nYou have to choose a password for GPG keys. Choose something strong that you can remember.\nAdd the public key to your GitHub account following the instructions: Adding a GPG Key to your GitHub account.\n\nThe name of the key on GitHub does not matter (Personal GPG Key is fine)\nThe command: gpg --armor --export prints your key to the console, you can copy/paste this output for GitHub\nEven better: use a pipe to clip.exe to put the key in your clipboard automatically with gpg --armor --export | clip.exe\n\non macOS: use pbcopy instead of clip.exe\non Linux: use xclip or wl-copy instead of clip.exe\n\n\n\n3.2.3 Store personal access token in pass\nOnce you’ve created the gpg key-pair, we can now set up pass:\npass init &lt;the-email-you-used-for-gpg-key&gt;\nFinally, copy the token string from GitHub to your clipboard. Then, open your developer terminal:\n$ pass insert github/token\nEnter password for github/token: # paste your token here, then press enter\nOnce you’ve done this, you should be able to access your token using pass github/token, or pass github/token | clip.exe to place it on your clipboard directly.\n\n\n\n3.3 Troubleshooting\nSome common errors that arise with using gpg:\n\n3.3.1 No secret key\nThis error looks like:\n\n\nbash\n\n$ pass github/token\ngpg: decryption failed: No secret key\n\nTry the following:\n\n3.3.1.1 Double check the password store setup\nConfirm that your password store is encrypted with the gpg key you expect:\n\n\nbash\n\n# This command prints out your gpg key information\n$ gpg -k \n\n# This command shows the gpg key used to encrypt your password-store\n$ cat ~/.password-store/.gpg-id\n\n# The id and/or email address should match for both!\n\n\n\n3.3.1.2 Restart gpg daemon\n\n\nbash\n\n$ gpgconf --kill gpg-agent\n\nIf that doesn’t work, try restarting your WSL instance. In powershell:\n\n\nPowershell\n\nPS &gt; wsl --shutdown &lt;distro-name&gt;\n\nAfter the shutdown attempt, retry using pass in the WSL again."
  },
  {
    "objectID": "notes/course-hardware/index.html",
    "href": "notes/course-hardware/index.html",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal device. Image source"
  },
  {
    "objectID": "notes/course-hardware/index.html#reterminal",
    "href": "notes/course-hardware/index.html#reterminal",
    "title": "Course Hardware",
    "section": "1 reTerminal",
    "text": "1 reTerminal\nThe reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n1.1 Power Supply\n\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.html#compute-module-4",
    "href": "notes/course-hardware/index.html#compute-module-4",
    "title": "Course Hardware",
    "section": "2 Compute Module 4",
    "text": "2 Compute Module 4\n\n\n\n\n\nRaspberry PI CM 4\n\n\nThe Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\n\n2.1 Grove Base Hat for Raspberry Pi\n\n\n\n\n\nGrove Base Hat for GPIO connections\n\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#sensors",
    "href": "notes/course-hardware/index.html#sensors",
    "title": "Course Hardware",
    "section": "3 Sensors",
    "text": "3 Sensors\n\n3.1 AHT20 I2C Temperature & Humidity\n\n\n\n\n\nAHT20 I2C temperature/humidity sensor\n\n\nSee AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\n\n\n3.2 AHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "notes/course-hardware/index.html#actuators-motors",
    "href": "notes/course-hardware/index.html#actuators-motors",
    "title": "Course Hardware",
    "section": "4 Actuators & Motors",
    "text": "4 Actuators & Motors\n\n4.1 LED Socket\n\n\n\n\n\nLED\n\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n\n\n4.2 Cooling Fan\n\n\n\n\n\nCooling Fan\n\n\n5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\n\n\n4.3 Relay\n\n\n\n\n\nRelay switch\n\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#cabling",
    "href": "notes/course-hardware/index.html#cabling",
    "title": "Course Hardware",
    "section": "5 Cabling",
    "text": "5 Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "notes/bash-essentials/index.html",
    "href": "notes/bash-essentials/index.html",
    "title": "Bash essentials",
    "section": "",
    "text": "Image source"
  },
  {
    "objectID": "notes/bash-essentials/index.html#using-cli-effectively",
    "href": "notes/bash-essentials/index.html#using-cli-effectively",
    "title": "Bash essentials",
    "section": "1 Using CLI effectively",
    "text": "1 Using CLI effectively\nFirst things first: the terminal can feel awkward to use. What can we do about this?\nEach section below is some set of tips for using the interactive bash CLI effectively.\n\n1.1 Keyboard shortcuts\n\n\n\n\n\n\nKeyboard Shortcuts: details & examples\n\n\n\n\n\nThis section was adapted from (“Bash Keyboard Shortcuts - Linux - SS64.com” n.d.).\n\n1.1.1 Completions\nUse TAB completion for file/directory names. Type just enough characters to uniquely identify the item.\nFor example, to move to a directory sample1; Type cd sam. Then press TAB and ENTER.\n\n\n1.1.2 Moving the cursor\n\nCtrl+a: Go to the beginning of the line (Home).\nCtrl+e: Go to the End of the line (End).\nCtrl+p: Previous command (Up arrow).\nCtrl+n: Next command (Down arrow).\nAlt+b: Back (left) one word.\nAlt+f: Forward (right) one word.\nCtrl+f: Forward one character.\nCtrl+b: Backward one character.\n\n\n\n1.1.3 While using man or command --help | less\n\nk: Scroll up one line\nj: Scroll down one line\nCtrl+u: Page up\nCtrl+d: Page down\n/: Begin forward search\n?: Begin reverse search\nn/N: Find next/previous match\nq: close the less pager\n\n\n\n1.1.4 Editing\n\nCtrl+L: Clear the Screen, similar to the clear command.\nAlt+Del: Delete the Word before the cursor.\nAlt+d: Delete the Word after the cursor.\nCtrl+d: Delete character under the cursor.\nCtrl+h: Delete character before the cursor (Backspace).\nCtrl+w: Cut the Word before the cursor to the clipboard.\nCtrl+k: Cut the Line after the cursor to the clipboard.\nCtrl+u: Cut/delete the Line before the cursor to the clipboard.\nAlt+t: Swap current word with previous.\nCtrl+t: Swap the last two characters before the cursor (typo).\nctrl+y: Paste the last thing to be cut (yank).\nAlt+u: UPPER capitalize every character from the cursor to the end of the current word.\nAlt+l: Lower the case of every character from the cursor to the end of the current word.\nAlt+c: Capitalize the character under the cursor and move to the end of the word.\nAlt+r: Cancel the changes and put back the line as it was in the history (revert).\nctrl+_: Undo.\n\n\n\n1.1.5 Special keys\n\nCtrl+v tells the terminal to not interpret the following character\n\nso Ctrl+v TAB will display a tab character rather than attempting completion.\nsimilarly Ctrl+v ENTER will display the escape sequence for the Enter key: ^M\n\n\n\n\n1.1.6 History\n\nCtrl+r: Recall the last command including the specified character(s).\nCtrl+p: Previous command in history (walk back).\nCtrl+n: Next command in history (walk forward).\nCtrl+o: Execute the command found via Ctrl+r or Ctrl+s Ctrl+o\nCtrl+g: Escape from history searching mode.\n\n\n\n1.1.7 Process Control\n\nCtrl+c: Interrupt/Kill whatever you are running (SIGINT).\nCtrl+l: Clear the screen.\nCtrl+s: Stop output to the screen (for long running verbose commands). Then use PgUp/PgDn for navigation.\nCtrl+q: Allow output to the screen (if previously stopped using command above).\nCtrl+d: Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT).\nCtrl+z: Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter fg 'process name'\n\n\n\n\n\n\n\n1.2 Configuration\n\n\n\n\n\n\n.bashrc details & examples\n\n\n\n\n\nEvery time you open a new terminal window/tab in the bash shell, the ~/.bashrc file is read and executed.\nThe typical usecases for customising ~/.bashrc are:\n\nsetting a custom Command prompt\nsetting various useful shopts (shell options)\nsetting environment variables/aliases\nsourcing other bash files\n\nExamples of each of these are shown below.\n\n\n~/.bashrc\n\n# Set a prompt like: [username@hostname:~/CurrentWorkingDirectory]$\nexport PS1='[\\u@\\h:\\w]\\$ '\n#   Explanation:\n#   \\u: username\n#   \\h: hostname\n#   \\w: the current working directory\n#   \\$: the character $\n#   all other characters are interpreted literally\n#   See https://ss64.com/bash/syntax-prompt.html for more examples\n\n# Set useful shell options\nshopt -s autocd # auto-appends `cd` to directory, so you can cd to a path without writing `cd`\nshopt -s globstar # enables the pattern '**' for recursive file/directory wildcard matching\nshopt -s extglob # fancier pattern matching\n# See https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html for more options\n\n# Set environment variables/aliases\nexport EDITOR=\"nvim\" # neovim\nexport EDITOR=\"code\" # vscode (overwrites previous line)\n# See https://ss64.com/bash/export.html for more information\n\nalias ll=\"ls -l\" # create new alias ll for a long list\nalias cp=\"cp -iv\" # replace default cp command with interactive/verbose cp\n# See https://ss64.com/bash/alias.html for more alias info and examples\n# Note that aliases cannot handle complex logic or accept positional parameters\n# For that, we would need functions.\n\n# Source all bash files in ~/.bashrc.d/\n# This lets you define functions in various shell files in this folder and source them at startup.\nif [ -d ~/.bashrc.d ]; then\n    for rc in ~/.bashrc.d/*; do\n        if [ -f \"$rc\" ]; then\n            source \"$rc\"\n        fi\n    done\nfi\nunset rc\n# See https://ss64.com/bash/source.html for more info on sourcing\n\n\n1.2.1 Ever Wonder Why it’s Called .bashrc?\nThere are many files that end with the mysterious suffix rc like .bashrc, .vimrc, etc. Why is that? It’s a holdover from ancient Unix. Its original meaning was “run commands,” but it later became “run-control.” A run-control file is generally some kind of script or configuration file that prepares an environment for a program to use. In the case of .bashrc for example, it’s a script that prepares a user’s bash shell environment.\n\n\n\n\n\n\n\n\n\n\n.profile details & examples\n\n\n\n\n\nEvery time you log in to a linux user, the ~/.profile file is read and executed.\nThe typical usecases for customizing ~/.profile are:\n\nsetting environment variables INDEPENDENT of bash instances\n\ni.e., these variables will work in sh, zsh, and other shells\n\nsetting environment variables once per session\n\nparticularly useful for PATH, since setting it in ~/.bashrc will cause it to be updated more frequently than useful\n\n\nExamples of these are shown below:\n\n\n~/.profile\n\n# Add a directory to PATH, checking if that directory is not already in PATH first\nif ! [[ \"$PATH\" =~ \"$HOME/bin:\" ]]; then\n  export PATH=\"$PATH:$HOME/bin\"  # Adds ~/bin to your path\nfi\n\n# Source all profile files in ~/.profile.d/\n# This is useful for programs like npm, you can put its bashrc/path stuff in here instead.\nfor script in $HOME/.profile.d/*.sh ; do\n    if [ -r \"$script\" ] ; then\n        . \"$script\"\n    fi\ndone\nunset script\n# See https://ss64.com/bash/source.html for more info on sourcing\n\n\n\n\n\n\n\n\n\n\n.inputrc details & examples\n\n\n\n\n\nThis section was adapted from (“How-To: Bash Startup Files Inputrc - Linux - SS64.com” n.d.).\nThe library that is used to implement a command line interface for bash is called the Readline library.\nWhile it comes with a set of default keybindings (see the #keyboard-shortcuts section), it is possible to modify these and other behaviors of the CLI interface by putting commands into a .inputrc file, typically in the home directory.\nThe configuration options in .inputrc are particularly useful for customising the way Tab-completion works, e.g. with the ls command.\nThe inputrc variable syntax is simple:\nset variable value\nBelow are a list of variables I find particularly useful, as well as a sample .inputrc file showing how each of these are set.\n\nbell-style\nControls what happens when Readline wants to ring the terminal bell. If set to ‘none’, Readline never rings the bell. If set to ‘visible’, Readline uses a visible bell if one is available. If set to ‘audible’ (the default), Readline attempts to ring the terminal’s bell.\ncompletion-ignore-case\nIf set to ‘on’, Readline performs filename matching and completion in a case-insensitive fashion. The default value is ‘off’.\nediting-mode\nThe editing-mode variable controls which default set of key bindings is used. By default, Readline starts up in Emacs editing mode, where the keystrokes are most similar to Emacs. This variable can be set to either ‘emacs’ or ‘vi’.\nmark-symlinked-directories\nIf set to ‘on’, completed names which are symbolic links to directories have a slash appended (subject to the value of mark-directories). The default is ‘off’.\nshow-all-if-ambiguous\nThis alters the default behavior of the completion functions. If set to ‘on’, words which have more than one possible completion cause the matches to be listed immediately instead of ringing the bell. The default value is ‘off’.\n\nA sample ~/.inputrc file with these variables in use:\n\n\n~/.inputrc\n\nset bell-style none\nset completion-ignore-case On\nset editing-mode vi\nset mark-symlinked-directories On\nset show-all-if-ambiguous On\n\nYou can find many more configuration options in (“How-To: Bash Startup Files Inputrc - Linux - SS64.com” n.d.)."
  },
  {
    "objectID": "notes/bash-essentials/index.html#bare-necessities",
    "href": "notes/bash-essentials/index.html#bare-necessities",
    "title": "Bash essentials",
    "section": "2 Bare necessities",
    "text": "2 Bare necessities\nThe following sections explain the purpose of each command and show a few use cases and useful options.\nThese are commands you probably already know – if you don’t, you’ll know by the end of lab-0, as you’ll need them all!\n\n2.1 Getting around: cd and ls\n\nNAME\n  cd - change the current directory\n  ls - list directory contents\n\nSYNOPSIS\n  cd [DIR]\n  ls [OPTION]... [FILE]...\n\n\n\n\n\n\n\ncd & ls details & examples\n\n\n\n\n\n\n2.1.1 cd\nUseful shorthands for cd to know:\n# Change to user home directory \n# (usually: /home/username)\n$ cd ~\n\n# WSL: Change to Windows mounted directory\n$ cd /mnt/c/\n\n# Return to previous directory\n$ cd -    # in this case, /home/username\n\n\n2.1.2 ls\nUseful ls options:\n-l                     use a long listing format\n-a, --all              do not ignore entries starting with .\n-d, --directory        list directories themselves, not their contents\n-s, --size             print the allocated size of each file, in blocks\n-t                     sort by time, newest first; see --time\n-h, --human-readable   with -l and -s, print sizes like 1K 234M 2G etc.\n    --si               likewise, but use powers of 1000 not 1024\n-R, --recursive        list subdirectories recursively\n\n\n\n\n\n\n2.2 Viewing files: cat and tac\n\nNAME\n  cat - concatenate files and print on the standard output\n  tac - concatenate and print files in reverse\n\nSYNOPSIS\n  cat [OPTION]... [FILE]...\n  tac [OPTION]... [FILE]...\n\n\n\n2.3 Creating files: touch and mkdir\n\nNAME\n  touch - Update the modification times of each `FILE` to the current time.\n          Creates the files if they do not exist.\n  mkdir - Create the given DIRECTORY(ies) if they do not exist\n\nSYNOPSIS\n  touch [FILE]...\n  mkdir [-p/--parents] [DIRECTORY]...\n\n\n\n2.4 Moving files: mv and cp\n\nNAME\n  mv - Move `SOURCE` to `DEST`, or multiple `SOURCE`(s) to `DIRECTORY`.\n  cp - Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\nSYNOPSIS\n  mv  [-f/--force] [-i/--interactive] [-g/--progress] [SOURCE]... [DEST]\n  cp  [-f/--force] [-i/--interactive] [-g/--progress] [-R/--recursive] [SOURCE]... [DEST]\n\n\n\n2.5 Managing permissions: chmod and chown\n\nNAME\n  chmod - Change the permissions mode of each FILE to MODE.\n  chown - Change file owner and group of each FILE to USER:GROUP\n\nSYNOPSIS\n  chmod [-R/--recursive] [MODE] [FILE]\n  chown [-R/--recursive] [USER:GROUP] [FILE]\n\n\n\n2.6 Deleting files: rm\n\nNAME\n  rm - Remove the FILE(s)\n\nSYNOPSIS\n  rm [-f/--force] [-i/--interactive] [-r/--recursive] [FILE]..."
  },
  {
    "objectID": "notes/bash-essentials/index.html#the-five-fingers-of-death",
    "href": "notes/bash-essentials/index.html#the-five-fingers-of-death",
    "title": "Bash essentials",
    "section": "3 The five fingers of death",
    "text": "3 The five fingers of death\n\n\n\n\n\nImage source\n\n\n\n3.1 find files and grep content\n\nNAME\n  find - search for files that match a given expression\n  grep - print lines in file(s) that match a given pattern\n\nSYNOPSIS\n  find [STARTING-POINT...] [EXPRESSION]\n  grep [OPTION...] PATTERNS [FILE...]\n\n\n\n\n\n\n\nfind & grep details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.2 tr characters and cut fields\n\nNAME\n  tr - Translate characters matching STRING1 in stdin/FILE to STRING2 writing to stdout\n  cut - Prints specified columns from each line of stdin, writes to stdout\n\nSYNOPSIS\n  tr [OPTION]... STRING1 STRING2\n  cut [-d/--delimiter] [-f|--fields] [FILE]\n\n\n\n\n\n\n\ntr & cut details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.3 sort data and uniq duplicates\n\nNAME\n  sort - Display sorted concatenation of all FILE(s). With no FILE, or when FILE is -, read stdin\n  uniq - Report or omit repeated lines.\n\nSYNOPSIS\n  sort [FILE]...\n  uniq [-d/--repeated] [FILE]...\n\n\n\n\n\n\n\nsort and uniq details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.4 know head from tail\n\nNAME\n  head - Print the first 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n  tail - Print the last 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n\nSYNOPSIS\n  head [-n/--lines] [FILE]...\n  tail [-n/--lines] [-f/--follow] [FILE]...\n\n\n\n\n\n\n\nhead & tail details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.5 tree and tee\n\nNAME\n  tree - list contents of DIRECTORIES in a tree-like format.\n  tee - Copy standard input to each FILE, and also to standard output.\n\nSYNOPSIS\n  tree [-L level] [DIRECTORY]...\n  tee [FILE]...\n\n\n\n\n\n\n\ntree & tee details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.html#redirection-and-pipes",
    "href": "notes/bash-essentials/index.html#redirection-and-pipes",
    "title": "Bash essentials",
    "section": "4 Redirection and Pipes",
    "text": "4 Redirection and Pipes\nThis section was adapted from (“How-To: Redirection and Process Substitution - Linux - SS64.com” n.d.)\n\ncommand  &gt;  filename     Redirect command output (stdout) into a file\ncommand  &gt;  /dev/null    Discard stdout of command\ncommand  2&gt; /dev/null   Discard stderr of command\n\ncommand  &gt;&gt; filename     Redirect command output and APPEND into a file\ncommand  &lt;  filename     Redirect a file into a command\n\ncommandA | commandB       Pipe stdout of commandA to commandB\ncommandA | tee filename   Pipe stdout of commandA into filename AND stdout\n\n\n\n\n\n\n\nRedirection explained further\n\n\n\n\n\nThis section was adapted from (“Illustrated Redirection Tutorial [Bash Hackers Wiki]” 2023)\n\n4.0.1 stdin, stdout, stderr\nWhen Bash starts, normally, 3 file descriptors are opened, 0, 1 and 2 also known as standard input (stdin), standard output (stdout) and standard error (stderr).\nFor example, with Bash running in a Linux terminal emulator, you’ll see:\n\n\nbash\n\n$ lsof +f g -ap $BASHPID -d 0,1,2\nCOMMAND   PID USER   FD   TYPE FILE-FLAG DEVICE SIZE/OFF NODE NAME\nbash    12135 root    0u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5\nbash    12135 root    1u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5\nbash    12135 root    2u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5\n\nThis /dev/pts/5 is a pseudo terminal used to emulate a real terminal. Bash reads (stdin) from this terminal and prints via stdout and stderr to this terminal.\n                  ---       +-----------------------+\nstandard input   ( 0 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard output  ( 1 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard error   ( 2 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\nWhen a command, a compound command, a subshell etc. is executed, it inherits these file descriptors. For instance echo foo will send the text foo to the file descriptor 1 inherited from the shell, which is connected to /dev/pts/5.\n\n\n4.0.2 Output Redirection n&gt; file\n&gt; is probably the simplest redirection.\necho foo &gt; file\nthe &gt; file after the command alters the file descriptors belonging to the command echo. It changes the file descriptor 1 (&gt; file is the same as 1&gt;file) so that it points to the file file. They will look like:\n                  ---       +-----------------------+\nstandard input   ( 0 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard output  ( 1 ) ----&gt;| file                  |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard error   ( 2 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\nNow characters written by our command, echo, that are sent to the standard output, i.e., the file descriptor 1, end up in the file named file.\nIn the same way, command 2&gt; file will change the standard error and will make it point to file. For example, command 2&gt; /dev/null will delete all errors outputted by command:\n                  ---       +-----------------------+\nstandard input   ( 0 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard output  ( 1 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard error   ( 2 ) ----&gt;| /dev/null             |\n                  ---       +-----------------------+\n\n\n4.0.3 Input Redirection n&lt; file\nWhen you run a command using command &lt; file, it changes the file descriptor 0 so that it looks like:\n                  ---       +-----------------------+\nstandard input   ( 0 ) &lt;----| file                  |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard output  ( 1 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\n\n                  ---       +-----------------------+\nstandard error   ( 2 ) ----&gt;| /dev/pts/5            |\n                  ---       +-----------------------+\nIf the command reads from stdin, it now will read from file and not from the console.\n\n\n4.0.4 Pipes |\nWhat does this | do? Among other things, it connects the standard output of the command on the left to the standard input of the command on the right. That is, it creates a special file, a pipe, which is opened as a write destination for the left command, and as a read source for the right command.\ncommand:   echo foo               |                cat\n\n ---       +--------------+               ---       +--------------+\n( 0 ) ----&gt;| /dev/pts/5   |     ------&gt;  ( 0 ) ----&gt;|pipe (read)   |\n ---       +--------------+    /          ---       +--------------+\n                              /\n ---       +--------------+  /            ---       +--------------+\n( 1 ) ----&gt;| pipe (write) | /            ( 1 ) ----&gt;| /dev/pts     |\n ---       +--------------+               ---       +--------------+\n\n ---       +--------------+               ---       +--------------+\n( 2 ) ----&gt;| /dev/pts/5   |              ( 2 ) ----&gt;| /dev/pts/    |\n ---       +--------------+               ---       +--------------+\nThis is possible because the redirections are set up by the shell before the commands are executed, and the commands inherit the file descriptors."
  },
  {
    "objectID": "notes/bash-essentials/index.html#core-utilities",
    "href": "notes/bash-essentials/index.html#core-utilities",
    "title": "Bash essentials",
    "section": "5 Core utilities",
    "text": "5 Core utilities\n\n5.1 ssh\n\nNAME\n  ssh - OpenSSH remote login client\n\nSYNOPSIS\n  ssh [-l login_name] [-p port] DESTINATION [command [argument...]\n\nssh is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.\nssh connects and logs into the specified destination, which may be specified as either [user@]hostname or a URI of the form ssh://[user@]hostname[:port].\nIf a command is specified, it will be executed on the remote host instead of a login shell.\n\n\n\n\n\n\nssh details & examples\n\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n5.2 rsync\n\nNAME\n  rsync - a fast, versatile, remote (and local) file-copying tool\n\nSYNOPSIS\n  Local:\n    rsync [OPTION...] SRC... [DEST]\n  Access via remote shell:\n    Pull:\n        rsync [OPTION...] [USER@]HOST:SRC... [DEST]\n    Push:\n        rsync [OPTION...] SRC... [USER@]HOST:DEST\n\nRsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon.\nIt is famous for sending only the differences between the source files and the existing files in the destination, increasing efficiency for repetitive synchronization between source and destination.\nRsync is widely used for backups and mirroring, and as an improved cp command for everyday use.\n\n\n\n\n\n\nrsync details & examples\n\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n5.3 tar, zip, and unzip\n\nNAME\n  tar - a general archiving utility for creation/extraction/compression and more\n  zip - package and compress files into a ZIP archive\n  unzip - list, test and extract compressed files from a ZIP archive\n\nSYNOPSIS\n  tar --create/--extract [--file ARCHIVE] [OPTIONS] [FILE...]\n  zip [OPTIONS] [ARCHIVE] [FILE...]\n  unzip [ARCHIVE] [-d OUTPUTDIR]\n\nThe tar, zip, and unzip programs provide the ability to create, extract, and otherwise manipulate archives of files, where an archive of files is simply a file that stores a collection of other files.\n\n\n\n\n\n\ntar, zip, and unzip details & examples\n\n\n\n\n\nThis section was adapted from (“GNU Tar 1.35: 2 Tutorial Introduction to Tar” n.d.).\nThe specific usecases for tar/zip/unzip are similar but vary slightly.\nAll three tools are used for efficient storage, transfer, and backup of collections of files, particularly large files via compression.\n\ntar:\n\ndefault: create/extract an uncompressed archive (.tar) of a collection of files\nwith --gzip/-z: create/extract a compressed archive (.tar.gz) of a collection of files\nwith --bzip2/-j: create/extract a compressed archive (.tar.bz2) of a collection of files\n\nzip:\n\ncreate a compressed collection of files (.zip)\n\nunzip:\n\nextract a compressed collection of files (.zip)\n\n\n\n5.3.1 Operations\nThere are two main operations of interest for archiving programs:\n\ncreate: create a new archive (.zip, .tar, .tar.gz, tar.bz2)\nextract: extract the files of an archive to a directory\n\nExamples of each follow below:\n\nCreateExtract\n\n\n# Assume you have a directory called music/ and three folders inside it:\n$ tree music\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Create an uncompressed archive (.tar) of all three files\n$ tar --create --file=collection.tar music\n\n# Creates a compressed archive (.zip, .tar.gz, .tar.bz2)\n$ zip -r collection.zip music\n$ tar --create --gzip --file=collection.tar.gz music\n$ tar --create --bzip2 --file=collection.tar.bz2 music\n\n# tar has shorthand versions of the above parameters\n$ tar -c -f collection.tar music\n$ tar -c -z -f collection.tar.gz music\n$ tar -cjf collection.tar.bz2 music\n\n\n\n# Assume you have the archives from the Create example:\n$ tar --list collection.tar\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Extract all files from an uncompressed archive (.tar) to the current directory\n$ tar --extract --file=collection.tar\n\n# Extract all files from a compressed archive (.zip, .tar.gz, .tar.bz2) to the current directory\n$ unzip collection.zip\n$ tar --extract --gzip --file=collection.tar.gz\n$ tar --extract --bzip2 --file=collection.tar.bz2\n\n# Extract all files from a compressed archive, specifying a different output directory\n$ unzip collection.zip -d ~/some-folder\n$ tar --extract --gzip --file=collection.tar.gz --directory ~/music\n$ tar --extract --bzip2 --file=collection.tar.bz2 --directory /tmp/music\n\n# tar has shorthand versions of the above parameters\n$ tar -x -f collection.tar\n$ tar -x -z -f collection.tar.gz -C ~/music\n$ tar -xjf collection.tar.bz2 -C /tmp/music\n\n\n\nEach of these operations is mutually exclusive, which makes some sense. You cannot create and extract an archive at the same time, that doesn’t make sense!\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen using --create or -c, tar will overwrite current contents of the file named by -f. To add files to an existing archive, you need to use --append or -r.\n\nYou can read more:\n\nthe usecases and history of tar at (gnu.org)\nA helpful comparison between tar and zip (stackoverflow)\nA reallyy thorough breakdown of compression in tar and zip (stackoverflow)\n\n\n\n5.4 git\n\nNAME\n  git - the stupid content tracker\n\nSYNOPSIS\n  git &lt;command&gt; [&lt;args&gt;]\n\nGit is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.\nSee man 7 gittutorial to get started, then see man 7 giteveryday for a useful minimum set of commands.\n\n\n\n\n\n\ngit details & examples\n\n\n\n\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.html#more-resources",
    "href": "notes/bash-essentials/index.html#more-resources",
    "title": "Bash essentials",
    "section": "6 More resources",
    "text": "6 More resources\n\nLinuxCommand.org\n\nShort guides on learning bash shell and bash scripting.\nLinks to interactive learning games under “Adventures”. Basic Shell Features\nComplete reference with examples."
  },
  {
    "objectID": "about/syllabus/index.html",
    "href": "about/syllabus/index.html",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#logistics",
    "href": "about/syllabus/index.html#logistics",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#course-material",
    "href": "about/syllabus/index.html#course-material",
    "title": "Syllabus",
    "section": "2 Course material",
    "text": "2 Course material\nThere are no required textbooks for this course – this website will contain all of the content that you need to complete course deliverables. Additionally, each lecture will contain references to additional resources for exploring each topic in further detail beyond the scope of the course."
  },
  {
    "objectID": "about/calendar/index.html",
    "href": "about/calendar/index.html",
    "title": "Calendar",
    "section": "",
    "text": "This is the authoritative calendar for content covered in class, and for content you should expect to see covered as we continue through the course.\nYou can compare this calendar with the calendar from the Course Outline to see where this course has deviated from the original outline."
  },
  {
    "objectID": "about/calendar/index.html#deliverables",
    "href": "about/calendar/index.html#deliverables",
    "title": "Calendar",
    "section": "1 Deliverables",
    "text": "1 Deliverables\n\nLab 0: dev env setup and bash review: Due January 31 (Demo: in-class. Code: end of day 11:59pm)\nLab 1: git good, bash better: Due February 10 end of day 11:59pm\nLab 2: Reusing functions in bash: Due February 24 end of day 11:59pm"
  },
  {
    "objectID": "about/calendar/index.html#lectures",
    "href": "about/calendar/index.html#lectures",
    "title": "Calendar",
    "section": "2 Lectures",
    "text": "2 Lectures\n\nJan 20: Introduction to course\nJan 24: Setting up developer environment\nJan 27: Review bash, begin Lab 0\nJan 31: Work on Lab 0\nFeb 3: Begin Lab 1\nFeb 7: (class cancelled, continue lab 1)\nFeb 10: Finish Lab 1\nFeb 14: Start Lab 2\nFeb 17: Class cancelled due to storm\nFeb 21: Continue work on Lab 2\nFeb 24: Begin Lab 3"
  }
]