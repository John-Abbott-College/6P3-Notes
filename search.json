[
  {
    "objectID": "announcements/index.html",
    "href": "announcements/index.html",
    "title": "Announcements",
    "section": "",
    "text": "No matching items\n\n Back to top"
  },
  {
    "objectID": "reference/course-hardware.html",
    "href": "reference/course-hardware.html",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n The reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "reference/course-hardware.html#reterminal",
    "href": "reference/course-hardware.html#reterminal",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n The reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "reference/course-hardware.html#compute-module-4",
    "href": "reference/course-hardware.html#compute-module-4",
    "title": "Course Hardware",
    "section": "Compute Module 4",
    "text": "Compute Module 4\n The Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\n\nGrove Base Hat for Raspberry Pi\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "reference/course-hardware.html#sensors",
    "href": "reference/course-hardware.html#sensors",
    "title": "Course Hardware",
    "section": "Sensors",
    "text": "Sensors\n\nAHT20 I2C Temperature & Humidity\n See AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\n\n\nAHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "reference/course-hardware.html#actuators-motors",
    "href": "reference/course-hardware.html#actuators-motors",
    "title": "Course Hardware",
    "section": "Actuators & Motors",
    "text": "Actuators & Motors\n\nLED Socketed\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n\n\nCooling Fan\n 5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\n\n\nRelay\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "reference/course-hardware.html#cabling",
    "href": "reference/course-hardware.html#cabling",
    "title": "Course Hardware",
    "section": "Cabling",
    "text": "Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "about/syllabus.html",
    "href": "about/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "From the course outline:"
  },
  {
    "objectID": "about/syllabus.html#logistics",
    "href": "about/syllabus.html#logistics",
    "title": "Syllabus",
    "section": "Logistics",
    "text": "Logistics\n\nRoom, times, etc.: see Course Outline (section 1) (section 2):\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle (section 1), (section 2) for assignment/project/quiz submissions.\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\nCommunication\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical).  Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\nAssessment\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus.html#course-material",
    "href": "about/syllabus.html#course-material",
    "title": "Syllabus",
    "section": "Course material",
    "text": "Course material\nThere are no required textbooks for this course – this website will contain all of the content that you need to complete course deliverables. Additionally, each lecture will contain references to additional resources for exploring each topic in further detail beyond the scope of the course."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\n\n\n\n\n\n\n\n\n\nAbout this website\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalendar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSyllabus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "lectures/docs/what-is-iot.html",
    "href": "lectures/docs/what-is-iot.html",
    "title": "Intro to the Internet of Things",
    "section": "",
    "text": "Image: © Irina Strelnikova / Adobe Stock"
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#internet-of-things-iot",
    "href": "lectures/docs/what-is-iot.html#internet-of-things-iot",
    "title": "Intro to the Internet of Things",
    "section": "Internet of Things (IoT)",
    "text": "Internet of Things (IoT)\nThe Internet of Things (IoT) is comprised of equipment, machines, products, and devices that are connected to the cloud and periodically collect, send and/or receive data.\n\nIoT refers to the entire network of:\n\nphysical devices,\ntools,\nequipment, and\nsmart objects\n\nThese objects have the capability to collect and share data about:\n\nhow they are used\nthe environment around them\n\nIoT devices can also receive commands or updates via the cloud."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#why-collect-all-this-data",
    "href": "lectures/docs/what-is-iot.html#why-collect-all-this-data",
    "title": "Intro to the Internet of Things",
    "section": "Why collect all this data?",
    "text": "Why collect all this data?\nBy analyzing the data collected by these connected objects, users and organisations can make informed decisions in near real-time and automate tightly integrated processes. This avoids decision making based on limited or out-dated data.\nThis data can create quick feedback loops for automation. Data from one object can trigger actions or control several other objects with timing and precision that could not be achieved by humans."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#iot-examples",
    "href": "lectures/docs/what-is-iot.html#iot-examples",
    "title": "Intro to the Internet of Things",
    "section": "IoT Examples",
    "text": "IoT Examples\nThe use of IoT can be organised in two fields of application:\n\nIndustrial IoT (IIoT)\nConsumer IoT\n\n\n\n\nExamples of industrial and consumer iot applications\n\n\n\n The Internet of Things and its Benefit to U.S. Water Customer    in kuritaamerica.com\n\n\nConsumer IoT\nExamples of consumer IoT are:\n\nHome Security: Sensors, alarms, cameras, lights, and microphones provide 24/7 security and surveillance. All of which can be controlled from a smart phone.\nSmart Home: Smart lighting, heating and sound systems can be automated to detect human present or receive instructions remotely. Voice Assistants can also control house appliances or and provide information.\nWearables: Smartwatches and fitness trackers can monitor blood pressure or heart rate, and physical activity and suggest workouts, breaks or medical assistance.\nAppliances: Smart fridges can keep track of food quantities and expiry dates and create shopping lists accordingly. Smart outlet plugs can measure electrical consumption and turn other appliances on/off.\n\n\n\nIndustrial IoT (IIoT)\nMost people tend to first think of IoT as consumer devices. However, their main value added happens in industrial applications.\n\n\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\n\nIndustrial IoT Examples:\n\nEquipment Maintenance: Rolls-Royce’s Total Care provides a suite of predictive maintenance and repair services for its jet engines, including monitoring engine health, and modifying engines to increase reliability and durability.\nFarming: John Deere is building intelligence into its large tractors and sprayers through sensors that make the machines into mobile platforms capable of self-driving.\nHeavy Machinery & Transportation: Rio Tinto, a global mining company uses a remote command center to orchestrate the actions of huge drills, excavators, trains, and trucks across multiple mining sites.\nRenewable Energies: Iberdrola and Siemens are using IoT to optimize the operation and maintenance of offshore wind power farms, the lifetime extension of wind turbines and the reducing the cost of energy.\nFacilities Management: Monitoring of buildings, infrastructure, and other spaces, allow to improve energy efficiency, space utilization, productivity, and safety. These insights may help:\n\nsave money by automating lighting or optimizing heating and cooling cycles.\nIncrease employee or occupant satisfaction by keep equipment running or ensuring that supplies are stocked."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#high-level-components-of-an-iot-system",
    "href": "lectures/docs/what-is-iot.html#high-level-components-of-an-iot-system",
    "title": "Intro to the Internet of Things",
    "section": "High-level Components of an IoT System",
    "text": "High-level Components of an IoT System\nIoT systems are compromised of five high-level components:\n\nSensors:\n\nCollect data from the device’s environment (eg. velocity, GPS coordinates, temperature, etc).\nSensors might use different communication protocols.\n\nIoT Devices are computing devices that have:\n\nAbility to securely register with the cloud;\nConnectivity options for sending and receiving data with the cloud.\n\nCloud Gateway / Hub:\n\nSecurely ingests and sends data or commands to devices;\nOffers device management (provisioning) services (add, remove, update, group, etc).\n\nData Processing:\n\nData validation;\nIntegrate with business processes (check thresholds, send alerts, trigger action)\nPlace data in Storage;\nRetrieve data from Storage for deeper / long-term analysis;\n\nUser Interface:\n\nData visualization;\nTrigger manual actions;\nConfigure automatic actions;\nFacilitate device management.\n\n\n\n\n\nIcons of IoT High level components"
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#iot-cloud-service-providers",
    "href": "lectures/docs/what-is-iot.html#iot-cloud-service-providers",
    "title": "Intro to the Internet of Things",
    "section": "IoT Cloud Service Providers",
    "text": "IoT Cloud Service Providers\nSince IoT objects typically move around, connectivity and data collection need to happen over wide geographical areas.\nMost companies do not want to deal with setting-up the physical infrastructure and software required to have this level of distributed connectivity and reliability (servers, databases, backup systems, networking, container orchestration, etc).\nIt is typically far more practical and cost-effective to use the services of an established IoT Cloud Service Provider.\nThe three main Cloud Service Providers in the IoT space are:\n\nAmazon Web Services (AWS)\nMicrosoft Azure\nGoogle Cloud\n\n\nThere are many other Cloud providers such as IBM Cloud IoT and Oracle IoT.\n\nIn this course we will focus on Microsoft Azure. However, all three platforms offer similar functionality."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#azure-account-check",
    "href": "lectures/docs/what-is-iot.html#azure-account-check",
    "title": "Intro to the Internet of Things",
    "section": "Azure Account Check",
    "text": "Azure Account Check\nStudents get $100 of credit for 12 months and free developer tools without a credit card.\n\nCreate an account and see details here.\n\nThe student account can be renewed annually (including $100 credits) for as long as you are a student.\nMost things we’ll do with Azure will use free services. We will occasionally use some of your free credits (~$20).\n\nChecking your balance 💸\nAs you experiment with Azure you might want to know your current balance.\nTL:DR 1. Sign in to the Azure portn in to the Azure portal.al. 2. Search for Cost Management \n\nSelect Payment methods\nCheck your Azure credits panel.\n\n\n\n\nCredit check panel in Azure\n\n\nFor details check Track Microsoft Customer Agreement Azure credit balance\n\n\nBudget Alerts\nIt’s possible to setup email alerts when your Azure spending exceeds a dollar threshold. This avoids unexpected spending of Azure credits.\nThere are two approaches to setting up a Budget in the Azure Portal:\n\nOpen the panel (aka “blade”) for the Resource Group in question, and then create a new Budget for that group.\nCreate a Budget for your account under Cost Management + Billing and then apply a filter according to ResourceGroupName in order to target a specific Resource Group.\n\nThe first approach involves a few less steps so it is described below.\n\n\nFor information on creating a budget from the Cost Management blade, see How to set up Azure budget alerts by TechTarget.com.\nFor details on using and managing budgets, see official tutorial: Create and manage Azure budgets.\n\n\n\nCreate a Budget for a Resource Group\n\nIn the Azure Portal Home, select the Resource groups service.\nSelect the resource group you want to monitor with a budget.\nIn the left panel, select Budgets under the Cost Management group and select Add.\n\n\n\n\nMenu for creating a budget for a resource group\n\n\n\nGive your budget a name and an amount.\n\n\n\nSelect the percent spending for the alert and the email to receive the notification.\nClick Create."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#exercises",
    "href": "lectures/docs/what-is-iot.html#exercises",
    "title": "Intro to the Internet of Things",
    "section": "Exercises",
    "text": "Exercises\nNOTE: The exercise below is out of date. We will see IOT learning material later in the course.\n\nRead the Microsoft training module Examine the architecture of an IoT solution and complete the Moodle quiz on the module."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#diving-deeper",
    "href": "lectures/docs/what-is-iot.html#diving-deeper",
    "title": "Intro to the Internet of Things",
    "section": "Diving Deeper",
    "text": "Diving Deeper\nVideo (15:19): The 7 Principles of the IoT by Tom Bradicich\n\nIn depth explanation of the integration between IoT sub-systems and opportunities from a technical and business perspective."
  },
  {
    "objectID": "lectures/docs/what-is-iot.html#references",
    "href": "lectures/docs/what-is-iot.html#references",
    "title": "Intro to the Internet of Things",
    "section": "References",
    "text": "References\n\nWhat is IoT by Microsoft Azure.\nHow Industrial Internet of Things are impacting our lives by Bluechip Infocorp Pvt Ltd via Medium.\nAn Introduction to the Internet of Things by Pier Paolo Ippolito via FreeCodeCamp Blog."
  },
  {
    "objectID": "lectures/docs/package-management.html",
    "href": "lectures/docs/package-management.html",
    "title": "Package management",
    "section": "",
    "text": "This lecture looks at the ways to acquire use and install external python packages.\n\nInstalling system python packages with apt on debian\nCreating virtual environments with venv\nInstalling packages locally with pip"
  },
  {
    "objectID": "lectures/docs/package-management.html#overview",
    "href": "lectures/docs/package-management.html#overview",
    "title": "Package management",
    "section": "",
    "text": "This lecture looks at the ways to acquire use and install external python packages.\n\nInstalling system python packages with apt on debian\nCreating virtual environments with venv\nInstalling packages locally with pip"
  },
  {
    "objectID": "lectures/docs/package-management.html#python-on-raspberry-pi",
    "href": "lectures/docs/package-management.html#python-on-raspberry-pi",
    "title": "Package management",
    "section": "Python on Raspberry Pi",
    "text": "Python on Raspberry Pi\nNote: most of these notes were adapted directly from the Raspberry Pi docs: Python on Raspberry Pi 1\nPython 3 is installed by default on Raspberry Pi OS, and is used for many important functions. Interfering with the system Python installation can cause problems for your operating system, so it’s important that if you install third-party Python libraries, you use the correct package-management tools.\nThere are two routes to installing libraries into the default python distribution. You can use apt and install pre-configured system packages, or you can use pip to install packages which are not distributed as part of Raspberry Pi OS."
  },
  {
    "objectID": "lectures/docs/package-management.html#installing-python-packages-using-apt",
    "href": "lectures/docs/package-management.html#installing-python-packages-using-apt",
    "title": "Package management",
    "section": "Installing Python packages using apt",
    "text": "Installing Python packages using apt\n\n\n\n\n\n\nImportant\n\n\n\nInstalling packages using apt is the preferred method for installing Python libraries under Raspberry Pi OS.\n\n\nPackages installed via apt are tested, are usually pre-compiled so they install faster, and are designed for Raspberry Pi OS. They won’t break your system. Installing via this route also means that all required dependencies are also installed, and a log of installation is maintained by the OS so installation can be easily rolled back (libraries can be uninstalled) if needed.\nYou can see a complete list of Python apps maintained by Debian developers on the stable repositories here. Many, but not all, popular open-source Python packages are maintained for Debian by professionals and hobbyists alike.\nTo see an example: you may find yourself wanting to install the Python 3 library to support the Raspberry Pi BuildHAT component. To install this using `apt1, you would:\n$ sudo apt install python3-build-hat\n…​to install the pre-built library.\nIf you want to install a Python library called \"foobar\" you can useapt search foobar to find the exact package name – partial search matches are supported, so you don’t need to know the whole name in advance. Very useful!\nUsing apt makes installing larger packages, like numpy (which has many native dependencies including a Fortran compiler), much simpler and more predictable than installing individual packages using Python’s own package-management system.\n\n\n\n\n\n\nIn apt, Python packages have a consistent naming scheme: you’ll find that the a given package “foobar” is going to be called python-foobar or python3-foobar in the apt repositories – this helps distinguish python packages from other packages on a debian system."
  },
  {
    "objectID": "lectures/docs/package-management.html#installing-python-packages-using-pip",
    "href": "lectures/docs/package-management.html#installing-python-packages-using-pip",
    "title": "Package management",
    "section": "Installing python packages using Pip",
    "text": "Installing python packages using Pip\nThe goal of operating systems like Debian is to be stable, that is, unlikely to crash due to a poorly tested/implemented program. That does come at a cost of not always offering the latest versions of packages, nor having a complelely comprehensive set of the bleeding edge packages that are available.\nMany developer depend on packages that are under active development. And, there are many packages that there are no Debian maintainers for. For cases like these (and many other cases, as we’ll see) it is useful for programming languages like Python to have an independent packaging manager.\nFor python, the most commonly used package manager is pip.\n\nPip installs packages from the Python Package Index repository (pypi.org) rather than the Debian or any other package repositories.\n\nEven though Raspberry Pi OS comes with pip installed, we can’t just use it right away, as we we’ll see in the next section.\n\nAbout Python virtual environments\nIn previous versions of the operating system, it was possible to install libraries directly, system-wide, using the package installer for Python, pip. You’ll find the following sort of command in many tutorials online – including in our Labs.\n$ pip install buildhat\nIn newer versions of Raspberry Pi OS, and most other operating systems, this is disallowed. If you try and install a Python package system-wide you’ll receive an error similar to this:\n$ pip install buildhat\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─&gt; To install Python packages system-wide, try apt install\n  python3-xyz, where xyz is the package you are trying to\n  install.\n\n  If you wish to install a non-Debian-packaged Python package,\n  create a virtual environment using python3 -m venv path/to/venv.\n  Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n  sure you have python3-full installed.\n\n  For more information visit http://rptl.io/venv\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\nhint: See PEP 668 for the detailed specification.\nThis error is generated because you’re trying to install a third-party package into the system Python. A long-standing practical problem for Python users has been conflicts between OS package managers like apt and Python-specific package management tools like pip. These conflicts include both Python-level API incompatibilities and conflicts over file ownership.\nTherefore from Debian Bookworm onwards, packages installed via pip must be installed into a Python virtual environment using venv. A virtual environment is a container where you can safely install third-party modules so they won’t interfere with, or break, your system Python.\n\n\nUsing pip with virtual environments\n\n\n\n\n\n\nAny packages that cannot be installed using apt should instead installed onto a Python Virtual Environment using venv and pip.\n\n\n\nTo use a virtual environment you will need to create a container to store the environment. There are several ways you can do this depending on how you want to work with Python.\n\n\nUsing a separate environment for each project\nOne way you can proceed is to create a new virtual environment for each Python project you make. Here, you’ll create a directory to hold your own code along with a virtual environment directory:\n$ mkdir my_project\n$ cd my_project\n$ python -m venv env\nIf you now look inside the my_project directory you’ll see a directory called env.\n$ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n$\n\n\n\n\n\n\nImportant\n\n\n\nVery important for Lab2:\nIf you want to inherit the currently installed packages from the system Python, you should create your virtual environment using python -m venv --system-site-packages env.\nThis will include the important Raspberry PI python modules that come with RaspberryPi OS in your venv.\n\n\nInside this directory is a full Python distribution. How do we use it?\nA nice feature of venvs is that they must be activated to be used. This allows you to maintained several different venvs all over your machines to maintain many different projects with different versions of python.\nTo activate your virtual environment and make that version of Python the one you’re currently using, you should type:\n$ source env/bin/activate\n(env) $\nYou’ll see that your prompt is now prepended with (env) to indicate that you’re no longer using the system Python. Instead, you’re using the version of Python contained inside your virtual environment. Any changes you make here won’t cause problems for your system Python; nor will any new modules you install into your environment.\n(env) $ which python\n/home/username/my_project/env/bin/python\nIf you install a third-party package, it’ll install into the Python distribution in your virtual environment:\n(env) $ pip install buildhat\nLooking in indexes: https://pypi.org/simple, https://www.piwheels.org/simple\nCollecting buildhat\n  Downloading https://www.piwheels.org/simple/buildhat/buildhat-0.5.12-py3-none-any.whl (57 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 57.8/57.8 kB 2.8 MB/s eta 0:00:00\nCollecting gpiozero\n  Downloading https://www.piwheels.org/simple/gpiozero/gpiozero-2.0-py3-none-any.whl (150 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 150.5/150.5 kB 6.9 MB/s eta 0:00:00\nCollecting pyserial\n  Downloading https://www.piwheels.org/simple/pyserial/pyserial-3.5-py2.py3-none-any.whl (90 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 90.6/90.6 kB 7.5 MB/s eta 0:00:00\nCollecting colorzero\n  Downloading https://www.piwheels.org/simple/colorzero/colorzero-2.0-py2.py3-none-any.whl (26 kB)\nRequirement already satisfied: setuptools in ./env/lib/python3.11/site-packages (from colorzero-&gt;gpiozero-&gt;buildhat) (66.1.1)\nInstalling collected packages: pyserial, colorzero, gpiozero, buildhat\nSuccessfully installed buildhat-0.5.12 colorzero-2.0 gpiozero-2.0 pyserial-3.5\n(env) $\nNow, if you pip list, you’ll see that your current version of Python includes your new modules.\n(env) $ pip list\nPackage    Version\n---------- -------\nbuildhat   0.5.12\ncolorzero  2.0\ngpiozero   2.0\npip        23.0.1\npyserial   3.5\nsetuptools 66.1.1\nAfter writing your code, you can run it from the command line inside the virtual environment as you’d expect, by invoking Python as usual.\n(env) $ ls -la\ntotal 12\ndrwxr-xr-x  3 pi pi 4096 Oct  3 14:34 .\ndrwx------ 20 pi pi 4096 Oct  3 14:34 ..\ndrwxr-xr-x  5 pi pi 4096 Oct  3 14:34 env\n-rw-r--r--  1 pi pi    0 Oct  3 14:45 my_code.py\n(env) $ python my_code.py\nHello World!\n(env) $\nYou can leave your virtual environment and return to using the system Python by typing:\n(env) $ deactivate\n$\n…​and demonstrate to yourself you’ve done so by checking the installed packages using pip list.\n\n\nIncluding system packages in your venv\nThis section has been adapted directly from realPython.com: Virtual Environments: Include the System Site-Packages. The whole article is worth skimming for reference.\nIn this class, we will often use the RaspberryPi python packages that we install system-wide (gpio, RPi, etc), and we may want to access them in the same environment where we create local virtual environments.\nThat is, while you still want to keep your projects in separate environments, you can save the effort of re-installing gpio or RPi into each of these projects.\nYou can access all modules you’ve installed to your base Python’s site-packages directory by adding the --system-site-packages flag when creating your virtual environment.\n\n\n\n\n\n\nNote: If you install any additional external packages, then Python will put them into the site-packages directory of your virtual environment. You only get read access to the system site-packages directory.\n\n\n\nCreate a new virtual environment while passing this argument. You’ll see that in addition to your local site-packages directory, the path to your base Python’s site-packages directory will stick around in sys.path.\nTo test this, you can create and activate a new virtual environment using the --system-site-packages argument:\n$ python3 -m venv env --system-site-packages\n$ source venv/bin/activate\n(venv) $\nOnce again, you’ve created a new virtual environment named venv, but this time you passed the --system-site-packages argument. Adding this optional argument resulted in a different setting in your venv/pyvenv.cfg file:\n$ cat env/pyvenv.cfg\nhome = /usr/bin\ninclude-system-site-packages = true\nversion = 3.11\nBy default, the include-system-site-packages is set to false.\n\n\n\n\n\n\nIt is common to forget to include the --system-site-packages flag when creating a venv. If you create a virtual environment and forget to include system site packages, you can include them again by changing include-system-site-packages in your environment env/pyvenv.cfg to true in your venv.\n\n\n\nThis change means that you’ll see an additional entry to sys.path, which allows the Python interpreter in your virtual environment to also access the system site-packages directory. Make sure your virtual environment is active, then start the Python interpreter to check the path variables:\n(env) $ python\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; from pprint import pp\n&gt;&gt;&gt; pp(sys.path)\n['',\n '/usr/local/lib/python311.zip',\n  'etc.'\n]\n\n\nUsing packages that require root permissions\nThe venv pattern is very useful for maintaining packages that do not require root permissions. This is a feature, not a bug – that way, you can have many developers independently install packages on one machine without needing to give them root permissions.\nSometimes (and particularly, in this couse) the packages we install require root permissions to work. Consider the packages that edit LED /sys/ files, like seeed-python-reterminal we install in Lab 2. We will run into an issue if we try to use these packages as normal users:\n(env) user@hostname:~/lab2/python $ python ./leds.py\n# ... output redacted\n&lt;Permissions error&gt;\nIt is unfortunately not fixable by simply using sudo:\n(env) user@hostname:~/lab2/python $ sudo python ./leds.py\n# ... output redacted\n&lt;Module seeed-python-terminal not included/available&gt;\nWhy isn’t the package available? Well, sudo runs python as the root user. The root user does not have your venv of python in its path. Try the commands below on your system to see if you understand what I mean.\n\nnormal usersudo user\n\n\n(env)jyourusername@yourhostname:~ $ which python\n# &lt;double check that the python executable comes from your venv&gt;\n\n\n(env)jyourusername@yourhostname:~ $ sudo su\n(env)root@yourhostname:~ # which python\n# &lt;you should see that the python executable is in a different place!, even though we still have \"env\"&gt;\n\n\n\nHow to resolve this problem? It is similar to the sudo echo &gt; file problem we saw with Bash. We need to make sure sudo is applying to the correct python executable. There are a few ways we can do this, all of which will look something like this:\n(env)jyourusername@yourhostname:~ $ sudo /absolute/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo ./env/relative/path/to/venv/python ./leds.py\n(env)jyourusername@yourhostname:~ $ sudo $(shell command for finding where python is installed) ./leds.py # use command substitution\nTry a few of these options out (will not work if you copy paste! Make sure you understand the commands)\n\n\nUsing a separate environment for each user\nAn alternative method to creating a virtual environment for each of your Python projects is to create a single virtual environment for your user account, and then activate that environment before running any of your Python code. This approach may be preferred if you commonly install the same set of modules for each project, and don’t want to have to bother creating individual Python environments for each project, essentially just duplicating your environment.\n$ python -m venv ~/.env\n$ source ~/.env/bin/activate\n(.env) $\nYou can check again that you’re in a separate environment by using pip list:\n(.env) $ pip list\nPackage    Version\n---------- -------\npip        23.0.1\nsetuptools 66.1.1\n…​and leave it using deactivate.\n(.env) $ deactivate\n$\n\n\nCheck library location\nCheck the location of where the module was installed with pip show &lt;module-name&gt;:\n(env) pi@raspberrypi:~ $ pip show seeed-python-reterminal\n\nName: seeed-python-reterminal\nVersion: 0.2\nSummary: seeed-python-reterminal\nHome-page: https://github.com/Seeed-Studio/Seeed_Python_ReTerminal\nAuthor: Takashi Matsuoka (matsujirushi)\nAuthor-email: matsujirushi@live.jp\nLicense: MIT License\nLocation: /usr/local/lib/python3.7/dist-packages      # Library location\nRequires: evdev\nRequired-by: \nThe library is installed at: Location: /usr/local/lib/python3.7/dist-packages"
  },
  {
    "objectID": "lectures/docs/package-management.html#troubleshooting",
    "href": "lectures/docs/package-management.html#troubleshooting",
    "title": "Package management",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nCheck python’s library paths\nSimilarly to Linux, there are environmental variables that determine where python will look for installed modules/libraries.\nSee the paths where python is looking for libraries with sys.path. They should look something like:\n\nsystemvenv\n\n\npi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n(env) pi@raspberrypi:~ $ python\n\n&gt;&gt;&gt; import sys      # Exposes configuration used by the python interpreter.\n&gt;&gt;&gt; sys.path        # Lists all paths where interpreter looks for modules.\n['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/home/pi/lab2/python/env/lib/python3.11/site-packages', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']\n\n\n\nIf the output of pip show seeed-python-reterminal is not in this list, python will not find it when you import it.\n\nNote: the python shell above was started as the user pi. If you start python as root, sys.path might have different paths.\n\nNote that the user pi does not have permission to add content inside /usr.\nThus, all pip installations as the regular user go into /home/pi/.local/lib/python3.11/site-packages."
  },
  {
    "objectID": "lectures/docs/package-management.html#footnotes",
    "href": "lectures/docs/package-management.html#footnotes",
    "title": "Package management",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRaspberry Pi documentation is copyright © 2012-2024 Raspberry Pi Ltd and is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA) licence. Some content originates from the eLinux wiki, and is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported licence.↩︎"
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html",
    "href": "lectures/docs/device-cloud-communication.html",
    "title": "Device to Cloud Communication",
    "section": "",
    "text": "Communication for IoT systems should be bi-directional:\nAzure offers a variety of ways of exchanging information in both directions. In this lesson we’ll look at the specifics of how these messaging systems work."
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#azure-iot-protocols",
    "href": "lectures/docs/device-cloud-communication.html#azure-iot-protocols",
    "title": "Device to Cloud Communication",
    "section": "Azure IoT Protocols",
    "text": "Azure IoT Protocols\nIoT Hub allows devices to use the following protocols for device-side communications:\n\nMQTT (including over WebSockets)\nAMQP (including over WebSockets)\nHTTPS\n\nBy now you are well familiar with MQTT and HTTPS.\nAMQP is not covered in this course, however, it is also a popular protocol for IoT communication. It is used for most of Azure IoT internal communication.\nAMQP is more complex and has slightly more over head than MQTT, thus consuming more bandwidth and device memory. However, it does not requires a broker (although one can be used) and has extra features for security and flow control.\n\nThe choice of protocol is a design choice that is implemented when using libraries from the Azure IoT SDKs (ex.: when instantiating a client or a connection object).\nFor example, the Azure IoT SDK for python uses MQTT by default.\n\nIf you would like to know more about AMQP and how it differs from MQTT, see the video on “Diving Deeper”."
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#device-to-cloud-d2c-communication",
    "href": "lectures/docs/device-cloud-communication.html#device-to-cloud-d2c-communication",
    "title": "Device to Cloud Communication",
    "section": "Device to Cloud (D2C) Communication",
    "text": "Device to Cloud (D2C) Communication\nIoT Hub exposes three options for sending information from the device to the cloud or solution back end:\n\nDevice-to-cloud messages for time series telemetry and alerts.\nFile uploads for media files and large telemetry batches uploaded by intermittently connected devices.\nDevice twin’s reported properties for reporting device state information such as configuration or last known state. Course notes on Device twins"
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#cloud-to-device-c2d-communication",
    "href": "lectures/docs/device-cloud-communication.html#cloud-to-device-c2d-communication",
    "title": "Device to Cloud Communication",
    "section": "Cloud to Device (C2D) Communication",
    "text": "Cloud to Device (C2D) Communication\nIoT Hub provides three options for devices to receive information and commands from the cloud or back-end app:\n\nCloud-to-device messages for one-way notifications to the device.\nDirect methods follow a request-response pattern and are meant for communications that require immediate confirmation of their result. For example, interactive control of the device, such as turning on a fan.\nTwin’s desired properties for long-running commands intended to put the device into a certain desired state. For example, set the telemetry send interval to 30 minutes. Course notes on Device twins"
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#end-points",
    "href": "lectures/docs/device-cloud-communication.html#end-points",
    "title": "Device to Cloud Communication",
    "section": "End-points",
    "text": "End-points\nIoT Hub also exposes multiple end-points that act as data input and output to various other actors.\nFor example, all messages received from a device are also forwarded to a “device to cloud message” end-point. An external client such as VS Code or Azure CLI can connect to this end-point and read the D2C messages sent to IoT Hub.\n\nYou can think of IoT Hub as a broker and the end-points as topics. A client can subscribe to a topic and receive forwarded messages.\nBy default, messages are routed to a built-in endpoint.\n\nIoT Hub allows data retention in the built-in end-points for a maximum of 7 days (1 day by default).\nFor a list of all built-in end-points see IoT Hub endpoints reference.\nThe Azure IoT SDKs article describes the various ways to access these endpoints."
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#message-anatomy",
    "href": "lectures/docs/device-cloud-communication.html#message-anatomy",
    "title": "Device to Cloud Communication",
    "section": "Message Anatomy",
    "text": "Message Anatomy\nAs previously mentioned, IoT Hub messages can be used for both D2C or C2D communication.\nAn IoT Hub message consists of:\n\nA predetermined set of system properties.\nA set of application properties: A dictionary of string properties that the application can define and access, without needing to deserialize the message body.\nAn opaque binary body (the payload / application data).\n\n(Property names and values can only contain ASCII alphanumeric characters).\n Below is an example of a message as they are received by the IoT Hub.\n\nNote that creating and manipulation of the message on the device-side will look different. Many properties are automatically set on message by the SDK.\n\n{ \n  \"message\": {\n   \n    \"systemProperties\": { \n      \"contentType\": \"application/json\", \n      \"contentEncoding\": \"UTF-8\", \n      \"iothub-message-source\": \"deviceMessages\", \n      \"iothub-enqueuedtime\": \"2017-05-08T18:55:31.8514657Z\" \n    },\n     \n    \"appProperties\": { \n      \"processingPath\": \"{cold | warm | hot}\", \n      \"verbose\": \"{true, false}\", \n      \"severity\": 1-5, \n      \"testDevice\": \"{true | false}\" \n    },\n     \n    \"body\": \"{\\\"Weather\\\":{\\\"Temperature\\\":50}}\" \n  } \n} \nSystem properties are added for all users and identify content of the message. Users can selectively add application properties to the message.\nFor a list of system and application properties that can be read or set on messages, see:\n\nSystem Properties of D2C IoT Hub messages\nApplication Properties of D2C IoT Hub messages\nSystem Properties of C2D IoT Hub messages\n\n\nApplication Properties in Python\nTo send device-to-cloud messages the method IoTHubDeviceClient.send_message(message) is used. This method can receive a string or a Message object. Typically we’ve been passing a json string with the telemetry payload and the Message object is created automatically for you (as per the docs).\nYou can, however, have more control over the properties of the Message object to be sent. As mention in Application Properties of D2C IoT Hub messages, there are many properties you can set yourself, including custom application properties. See the docs for the Message class.\nSee the example in azure-iot-sdk-python/azure-iot-device/samples/sync-samples/send_message.py to understand how to set message properties.\n\nThe messages described above (D2C and C2D communication) are typically created at the device or application with the help of a SDK (Software Development Kit) library.\n\n\nSee notes on Azure IoT SDKs for references to libraries and examples provided by Azure."
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#direct-methods",
    "href": "lectures/docs/device-cloud-communication.html#direct-methods",
    "title": "Device to Cloud Communication",
    "section": "Direct Methods",
    "text": "Direct Methods\nIoT Hub gives you the ability to invoke direct methods on devices from the cloud. For example, to trigger a relay or ask the device to initiate a upload process.\nSimilarly to HTTP, direct methods represent a request-reply interaction with a device. The request sender needs to know immediately if the request succeeded or failed. For example, turning on a light from a phone.\nThe life-cycle of a Direct Method is as follows:\n\n\nA service application (such as a back-end or mobile app) sends a Direct Method request to the device.\n\nThis is typically done using a SDK library running on the application or “manually” via a HTTPS call to IoT Hub.\n\nThe device receives the Direct Method, processes it and prepares a response.\n\nAlso typically done using a SDK library running on the device.\n\nThe response is sent back to the sender of the Direct Method.\nThe application inspects the response using a call-back function and decides what to do next.\n\nCallback calls are typically provided by a SDK library running on the application or “manually” by processing the HTTP response.\n\n\nFor details see Understand and invoke direct methods from IoT Hub\nFor examples of how to use Direct Methods, see Quickstart: Control a device connected to an IoT hub.\nYou can also review Lab 6 (Section 1, Section 2): we used the InvokeDeviceMethod sample service in this lab. You can use this code in your own project, modifying the direct method name to correspond to your use case (e.g. lights-on or door-unlock)."
  },
  {
    "objectID": "lectures/docs/device-cloud-communication.html#diving-deeper",
    "href": "lectures/docs/device-cloud-communication.html#diving-deeper",
    "title": "Device to Cloud Communication",
    "section": "Diving Deeper 🤿",
    "text": "Diving Deeper 🤿\nIf you would like to have a “bigger picture” view of how the different Azure IoT services fit together, watch the video below by Blaize Stewart.\n\n\nTo learn more about AMQT and how it differs from MQTT, see the presentation below by Ken Giusti."
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Lectures",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\n2024-01-29\n\n\nIntro to the Internet of Things\n\n\nFundamental concepts and applications behind the ‘Internet of Things’ paradigm.\n\n\n\n\n2024-02-19\n\n\nPackage management\n\n\nHow to use OS package managers, virtual environments, and pip to manage python applications effectively.\n\n\n\n\n2024-05-09\n\n\nDevice to Cloud Communication\n\n\nHow to use Azure for bidrectional device-cloud communication\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "about/calendar.html",
    "href": "about/calendar.html",
    "title": "Calendar",
    "section": "",
    "text": "This is the authoritative calendar for content covered in class, and for content you should expect to see covered as we continue through the course.\nYou can compare this calendar with the calendar from the Course Outline (section 1) (section 2) to see where this course has deviated from the original outline."
  },
  {
    "objectID": "about/calendar.html#january-february",
    "href": "about/calendar.html#january-february",
    "title": "Calendar",
    "section": "January & February",
    "text": "January & February\n\nDeliverables\n\nLab 0: Dev env and Python (1%). Section 1, Section 2\nLab 1: reTerminal First Login (3%). Section 1, Section 2\nLab 2: reTerminal Interface Scripting (3%). Section 1, Section 2\n\n\n\nSchedule\n\nJan 26/29: Intro to course, reTerminal distribution, Lab 0 exercises\nFeb 2: Finish Lab0, start Lab1\nFeb 5-16: Lab1\nFeb 19-March 1: Lab2"
  },
  {
    "objectID": "about/calendar.html#march",
    "href": "about/calendar.html#march",
    "title": "Calendar",
    "section": "March",
    "text": "March\n\nDeliverables\n\nLab 3: Analog & Digital Signals (3%). Section 1, Section 2\nLab 4: PWM, I2C, and Device Controllers (4%). Section 1, Section 2\nAssignment 1: HVAC IoT System (9%). Section 1, Section 2\nQuiz 1: Linux, Python, and reTerminal knowledge check (see Schedule below)\n\n\n\nSchedule\n\nMarch 4-8: Study break\nMarch 11 (Mon): Finish Lab3\nMarch 15 (Fri): Demo Lab3 beginning of class, start Lab4\nMarch 18 (Mon): Finish Lab4, work on A1\nMarch 22 (Fri): Quiz 1, work on A1\nMarch 25 (Mon): A1 due, project Milestone 1 released\nMarch 29 (Fri): Easter holiday, no class"
  },
  {
    "objectID": "about/calendar.html#april",
    "href": "about/calendar.html#april",
    "title": "Calendar",
    "section": "April",
    "text": "April\n\nDeliverables\n\nProject Milestone 1: Set up team Repo and Requirement Tracking (5%). Section 1, Section 2\nProject Milestone 2: Create sensor and actuator subsystems (9%). Section 1, Section 2\nLab 5: Eclipse Lab (3%). Section 1, Section 2\nLab 6: Azure IoT Hub (4%). Section 1, Section 2\nQuiz 2: March+April content (in-class April 26)\n\n\n\nSchedule\n\nApril 1 (Mon): Easter holiday, no class\nApril 2 (Tues): Stage, no class\nApril 5 (Fri): Work on project milestone 1\nApril 8 (Mon): Lab 5, Eclipse day\nApril 12 (Fri): Submit Lab 5 and Assignment 1\nApril 15 (Mon): Start Lab 6, Assignment 2, Milestone 2\nApril 19 (Fri): Finish Lab 6, work on Assignment 2\nApril 22 (Mon): Finish Milestone 2\nApril 26 (Fri): Quiz 2\nApril 29 (Mon): Work on Milestone/Assignment"
  },
  {
    "objectID": "about/calendar.html#may",
    "href": "about/calendar.html#may",
    "title": "Calendar",
    "section": "May",
    "text": "May\n\nDeliverables\n\nTest 1: All course content (in-class May 3)\nProject Milestone 4: (May 10) Azure IoT for devices in project. Section 1, Section 2\nAssignment 2: (May 10) HVAC system using Azure IoT (9%). Section 1, Section 2\nProject Milestone 6: (May 21) Finalizing IoT Communications System. Section 1, Section 2\nProject Milestone 7: (May 23/24) Final Presentations. Section 1, Section 2\n\n\n\nSchedule\n\nMay 3 (Fri): Test 1\nMay 6 (Mon): Work on Assignment 2 and Milestone 4\nMay 10 (Fri): Milestone 2 and Assignment 4 due.\nMay 13 (Mon): Work on Milestone 6 + App Dev III\nMay 16 (Thursday, Friday schedule): Wrap up Milestone 6 + App Dev III\nMay 21 (Tuesday): Milestone 6 Due\nMay 23/24 (Thurs/Fri): Final presentations, all milestones due"
  },
  {
    "objectID": "about/this-site.html",
    "href": "about/this-site.html",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site.html#course-content",
    "href": "about/this-site.html#course-content",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site.html#course-website",
    "href": "about/this-site.html#course-website",
    "title": "About this website",
    "section": "Course website",
    "text": "Course website\nDetails about how this website was built follow.\n\nColophon\n\n\n\nFrom Wikipedia: In publishing, a colophon is a brief statement containing information about the publication of a book… Some web pages also have colophons, which frequently contain (X)HTML, CSS, or usability standards compliance information and links to website validation tests.\n\n\n\nMarkup: Markdown\nFramework: Quarto\nDeployment: GitHub Pages\n\nYou can follow along directly with course updates at the course repository.\n\n\nCopyright\nThis website was written and designed by the Michael Haaf. All code and assets related to this website, unless indicated otherwise, are licensed under the GNU General Public License v3.0\n\nTerms of use\nThis website’s code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nThis website’s code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nGNU General Public License Notice"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This companion site for the 420-6P3 course includes:\n\n\nLecture slides / documents\nExercises\nReferences & Resources\n\n\nWebsite accessible at john-abbott-college.github.io/6P3-Notes\n\n\nThis course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands.\n\n\n\n\nExperience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup).\n\n\n\n\nThis webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Home",
    "section": "",
    "text": "This course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Home",
    "section": "",
    "text": "Experience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup)."
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Home",
    "section": "",
    "text": "This webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n\n2024-01-26\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n\n\n\nNo matching items\n\n Back to top"
  }
]