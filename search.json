[
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "Course Notes",
    "section": "",
    "text": "Default viewTable viewGrid view\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n\n\n\n2025-01-20\n\n\n2 min\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n\n\n\n2025-01-20\n\n\n3 min\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\n\nBash commands\n\n\nUseful bash commands\n\n\n\n\n\n2025-01-24\n\n\n1 min\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\n\nPython collection types and operations\n\n\nUseful python collection types and operations\n\n\n\n\n\n2025-01-24\n\n\n5 min\n\n\n2025-01-29\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nModified\n\n\nTitle\n\n\nSubtitle\n\n\nReading Time\n\n\n\n\n\n\n2025-01-20\n\n\n2025-01-29\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n2 min\n\n\n\n\n2025-01-20\n\n\n2025-01-29\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n3 min\n\n\n\n\n2025-01-24\n\n\n2025-01-29\n\n\nBash commands\n\n\nUseful bash commands\n\n\n1 min\n\n\n\n\n2025-01-24\n\n\n2025-01-29\n\n\nPython collection types and operations\n\n\nUseful python collection types and operations\n\n\n5 min\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n2 min\n\n\n\n2025-01-20\n\n\n\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n3 min\n\n\n\n2025-01-20\n\n\n\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\nBash commands\n\n\nUseful bash commands\n\n\n1 min\n\n\n\n2025-01-24\n\n\n\n\n\n2025-01-29\n\n\n\n\n\n\n\n\n\n\n\nPython collection types and operations\n\n\nUseful python collection types and operations\n\n\n5 min\n\n\n\n2025-01-24\n\n\n\n\n\n2025-01-29\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/python-collections/index.html",
    "href": "notes/python-collections/index.html",
    "title": "Python collection types and operations",
    "section": "",
    "text": "Image: https://realpython.com/python-lambda/"
  },
  {
    "objectID": "notes/python-collections/index.html#overview",
    "href": "notes/python-collections/index.html#overview",
    "title": "Python collection types and operations",
    "section": "1 Overview",
    "text": "1 Overview\n\nLoops\nList comprehensions\nGenerators\nLambdas\nDictionaries"
  },
  {
    "objectID": "notes/python-collections/index.html#loops",
    "href": "notes/python-collections/index.html#loops",
    "title": "Python collection types and operations",
    "section": "2 Loops",
    "text": "2 Loops\nThere are two types of loops in Python, for and while.\n\n2.1 The for loop\nFor loops iterate over a given sequence, or iterator. Here is an example:\n\n\nPython\n\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n\nFor loops can iterate over a sequence of numbers using the range function. range returns an iterator object which can be looped using the following syntax:\n\n\nPython\n\n# Prints out the numbers 0,1,2,3,4\nfor x in range(5):\n    print(x)\n\n# Prints out 3,4,5\nfor x in range(3, 6):\n    print(x)\n\n# Prints out 3,5,7\nfor x in range(3, 8, 2):\n    print(x)\n\n\n\n2.2 break and continue statements\nbreak is used to exit a for loop or a while loop, whereas continue is used to skip the current block, and return to the “for” or “while” statement. A few examples:\n\n\nPython\n\n# Prints out only odd numbers - 1,3,5,7,9\nfor x in range(10):\n    # Check if x is even\n    if x % 2 == 0:\n        continue\n    print(x)\n\n# Prints out 0,1,2,3,4\n\ncount = 0\nwhile True:  # we have while loops in Python too.\n    print(count)\n    count += 1\n    if count &gt;= 5:\n        break"
  },
  {
    "objectID": "notes/python-collections/index.html#list-comprehensions",
    "href": "notes/python-collections/index.html#list-comprehensions",
    "title": "Python collection types and operations",
    "section": "3 List Comprehensions",
    "text": "3 List Comprehensions\nList Comprehensions is a very powerful tool, which creates a new list based on another list, in a single, readable line.\nFor example, let’s say we need to create a list of integers which specify the length of each word in a certain sentence, but only if the word is not the word “the”.\n\n\nPython\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\nword_lengths = []\nfor word in words:\n    if word != \"the\":\n        word_lengths.append(len(word))\nprint(words)\nprint(word_lengths)\n\nUsing a list comprehension, we could simplify this process to this notation:\n\n\nPython\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\nword_lengths = [len(word) for word in words if word != \"the\"]\nprint(words)\nprint(word_lengths)"
  },
  {
    "objectID": "notes/python-collections/index.html#generators",
    "href": "notes/python-collections/index.html#generators",
    "title": "Python collection types and operations",
    "section": "4 Generators",
    "text": "4 Generators\nGenerators are very easy to implement, but a bit difficult to understand.\nGenerators are used to create iterators, but with a different approach. Generators are simple functions which return an iterable set of items, one at a time, in a special way.\nWhen an iteration over a set of item starts using the for statement, the generator is run. Once the generator’s function code reaches a “yield” statement, the generator yields its execution back to the for loop, returning a new value from the set. The generator function can generate as many values (possibly infinite) as it wants, yielding each one in its turn.\nHere is a simple example of a generator function which returns 7 random integers:\n\n\nPython\n\nimport random\n\n\ndef lottery():\n    # returns 6 numbers between 1 and 40\n    for i in range(6):\n        yield random.randint(1, 40)\n\n    # returns a 7th number between 1 and 15\n    yield random.randint(1, 15)\n\n\nfor random_number in lottery():\n    print(\"And the next number is... %d!\" % (random_number))\n\nThis function decides how to generate the random numbers on its own, and executes the yield statements one at a time, pausing in between to yield execution back to the main for loop."
  },
  {
    "objectID": "notes/python-collections/index.html#lambda-functions",
    "href": "notes/python-collections/index.html#lambda-functions",
    "title": "Python collection types and operations",
    "section": "5 Lambda functions",
    "text": "5 Lambda functions\nNormally we define a function using the def keyword somewhere in the code and call it whenever we need to use it.\n\n\nPython\n\ndef sum(a, b):\n    return a + b\n\n\na = 1\nb = 2\nc = sum(a, b)\nprint(c)\n\nNow instead of defining the function somewhere and calling it, we can use python’s lambda functions, which are inline functions defined at the same place we use it. So we don’t need to declare a function somewhere and revisit the code just for a single time use.\nThey don’t need to have a name, so they also called anonymous functions. We define a lambda function using the keyword lambda.\n\n\nPython\n\nyour_function_name = lambda inputs: output\n\nSo the above sum example using lambda function would be,\n\n\nPython\n\na = 1\nb = 2\nsum = lambda x, y: x + y\nc = sum(a, b)\nprint(c)\n\nHere we are assigning the lambda function to the variable sum, and upon giving the arguments i.e. a and b, it works like a normal function."
  },
  {
    "objectID": "notes/python-collections/index.html#dictionaries",
    "href": "notes/python-collections/index.html#dictionaries",
    "title": "Python collection types and operations",
    "section": "6 Dictionaries",
    "text": "6 Dictionaries\n\nA dictionary is a data type similar to arrays, but works with keys and values instead of indexes. Each value stored in a dictionary can be accessed using a key, which is any type of object (a string, a number, a list, etc.) instead of using its index to address it.\nFor example, a database of phone numbers could be stored using a dictionary like this:\n\n\nPython\n\nphonebook = {}\nphonebook[\"John\"] = 938477566\nphonebook[\"Jack\"] = 938377264\nphonebook[\"Jill\"] = 947662781\nprint(phonebook)\n\nAlternatively, a dictionary can be initialized with the same values in the following notation:\n\n\nPython\n\nphonebook = {\"John\": 938477566, \"Jack\": 938377264, \"Jill\": 947662781}\nprint(phonebook)\n\n\n6.1 Iterating over dictionaries\nDictionaries can be iterated over, just like a list. However, a dictionary, unlike a list, does not keep the order of the values stored in it. To iterate over key value pairs, use the following syntax:\n\n\nPython\n\nphonebook = {\"John\": 938477566, \"Jack\": 938377264, \"Jill\": 947662781}\nfor name, number in phonebook.items():\n    print(\"Phone number of %s is %d\" % (name, number))\n\n\n\n6.2 Removing a value\nTo remove a specified index, use either one of the following notations:\n\n\nPython\n\nphonebook = {\"John\": 938477566, \"Jack\": 938377264, \"Jill\": 947662781}\ndel phonebook[\"John\"]\nprint(phonebook)\n\nor:\n\n\nPython\n\nphonebook = {\"John\": 938477566, \"Jack\": 938377264, \"Jill\": 947662781}\nphonebook.pop(\"John\")\nprint(phonebook)"
  },
  {
    "objectID": "notes/python-collections/index.htm#overview",
    "href": "notes/python-collections/index.htm#overview",
    "title": "Python collection types and operations",
    "section": "Overview",
    "text": "Overview\n\nLoops\nList comprehensions\nGenerators\nLambdas\nDictionaries"
  },
  {
    "objectID": "notes/python-collections/index.htm#loops",
    "href": "notes/python-collections/index.htm#loops",
    "title": "Python collection types and operations",
    "section": "Loops",
    "text": "Loops\nThere are two types of loops in Python, for and while.\nThe for loop\nFor loops iterate over a given sequence, or iterator. Here is an example:\n\n\nPython\n\nprimes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n\nFor loops can iterate over a sequence of numbers using the range function. range returns an iterator object which can be looped using the following syntax:\n\n\nPython\n\n# Prints out the numbers 0,1,2,3,4\nfor x in range(5):\n    print(x)\n\n# Prints out 3,4,5\nfor x in range(3, 6):\n    print(x)\n\n# Prints out 3,5,7\nfor x in range(3, 8, 2):\n    print(x)\n\nbreak and continue statements\nbreak is used to exit a for loop or a while loop, whereas continue is used to skip the current block, and return to the “for” or “while” statement. A few examples:\n\n\nPython\n\n# Prints out only odd numbers - 1,3,5,7,9\nfor x in range(10):\n    # Check if x is even\n    if x % 2 == 0:\n        continue\n    print(x)\n\n# Prints out 0,1,2,3,4\n\ncount = 0\nwhile True:  # we have while loops in Python too.\n    print(count)\n    count += 1\n    if count &gt;= 5:\n        break"
  },
  {
    "objectID": "notes/python-collections/index.htm#list-comprehensions",
    "href": "notes/python-collections/index.htm#list-comprehensions",
    "title": "Python collection types and operations",
    "section": "List Comprehensions",
    "text": "List Comprehensions\nList Comprehensions is a very powerful tool, which creates a new list based on another list, in a single, readable line.\nFor example, let’s say we need to create a list of integers which specify the length of each word in a certain sentence, but only if the word is not the word “the”.\n\n\nPython\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\nword_lengths = []\nfor word in words:\n    if word != \"the\":\n        word_lengths.append(len(word))\nprint(words)\nprint(word_lengths)\n\nUsing a list comprehension, we could simplify this process to this notation:\n\n\nPython\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\nword_lengths = [len(word) for word in words if word != \"the\"]\nprint(words)\nprint(word_lengths)"
  },
  {
    "objectID": "notes/python-collections/index.htm#generators",
    "href": "notes/python-collections/index.htm#generators",
    "title": "Python collection types and operations",
    "section": "Generators",
    "text": "Generators\nGenerators are very easy to implement, but a bit difficult to understand.\nGenerators are used to create iterators, but with a different approach. Generators are simple functions which return an iterable set of items, one at a time, in a special way.\nWhen an iteration over a set of item starts using the for statement, the generator is run. Once the generator’s function code reaches a “yield” statement, the generator yields its execution back to the for loop, returning a new value from the set. The generator function can generate as many values (possibly infinite) as it wants, yielding each one in its turn.\nHere is a simple example of a generator function which returns 7 random integers:\n\n\nPython\n\nimport random\n\n\ndef lottery():\n    # returns 6 numbers between 1 and 40\n    for i in range(6):\n        yield random.randint(1, 40)\n\n    # returns a 7th number between 1 and 15\n    yield random.randint(1, 15)\n\n\nfor random_number in lottery():\n    print(\"And the next number is... %d!\" % (random_number))\n\nThis function decides how to generate the random numbers on its own, and executes the yield statements one at a time, pausing in between to yield execution back to the main for loop."
  },
  {
    "objectID": "notes/python-collections/index.htm#lambda-functions",
    "href": "notes/python-collections/index.htm#lambda-functions",
    "title": "Python collection types and operations",
    "section": "Lambda functions",
    "text": "Lambda functions\nNormally we define a function using the def keyword somewhere in the code and call it whenever we need to use it.\n\n\nPython\n\ndef sum(a, b):\n    return a + b\n\n\na = 1\nb = 2\nc = sum(a, b)\nprint(c)\n\nNow instead of defining the function somewhere and calling it, we can use python’s lambda functions, which are inline functions defined at the same place we use it. So we don’t need to declare a function somewhere and revisit the code just for a single time use.\nThey don’t need to have a name, so they also called anonymous functions. We define a lambda function using the keyword lambda.\n\n\nPython\n\nyour_function_name = lambda inputs: output\n\nSo the above sum example using lambda function would be,\n\n\nPython\n\na = 1\nb = 2\nsum = lambda x, y: x + y\nc = sum(a, b)\nprint(c)\n\nHere we are assigning the lambda function to the variable sum, and upon giving the arguments i.e. a and b, it works like a normal function."
  },
  {
    "objectID": "notes/python-collections/index.htm#dictionaries",
    "href": "notes/python-collections/index.htm#dictionaries",
    "title": "Python collection types and operations",
    "section": "Dictionaries",
    "text": "Dictionaries"
  },
  {
    "objectID": "notes/course-hardware/index.html",
    "href": "notes/course-hardware/index.html",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\n\nThe reTerminal device.\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.html#reterminal",
    "href": "notes/course-hardware/index.html#reterminal",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\n\nThe reTerminal device.\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.html#compute-module-4",
    "href": "notes/course-hardware/index.html#compute-module-4",
    "title": "Course Hardware",
    "section": "2 Compute Module 4",
    "text": "2 Compute Module 4\n\n\n\n\n\nRaspberry PI CM 4\n\n\nThe Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\n\n2.1 Grove Base Hat for Raspberry Pi\n\n\n\n\n\nGrove Base Hat for GPIO connections\n\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#sensors",
    "href": "notes/course-hardware/index.html#sensors",
    "title": "Course Hardware",
    "section": "3 Sensors",
    "text": "3 Sensors\n\n3.1 AHT20 I2C Temperature & Humidity\n\n\n\n\n\nAHT20 I2C temperature/humidity sensor\n\n\nSee AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\n\n\n3.2 AHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "notes/course-hardware/index.html#actuators-motors",
    "href": "notes/course-hardware/index.html#actuators-motors",
    "title": "Course Hardware",
    "section": "4 Actuators & Motors",
    "text": "4 Actuators & Motors\n\n4.1 LED Socket\n\n\n\n\n\nLED\n\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n\n\n4.2 Cooling Fan\n\n\n\n\n\nCooling Fan\n\n\n5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\n\n\n4.3 Relay\n\n\n\n\n\nRelay switch\n\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#cabling",
    "href": "notes/course-hardware/index.html#cabling",
    "title": "Course Hardware",
    "section": "5 Cabling",
    "text": "5 Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "notes/course-hardware/index.htm#reterminal",
    "href": "notes/course-hardware/index.htm#reterminal",
    "title": "Course Hardware",
    "section": "reTerminal",
    "text": "reTerminal\nThe reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\nThe reTerminal device.\n\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\nPower Supply\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.htm#compute-module-4",
    "href": "notes/course-hardware/index.htm#compute-module-4",
    "title": "Course Hardware",
    "section": "Compute Module 4",
    "text": "Compute Module 4\n\n\n\n\nRaspberry PI CM 4\n\n\n\nThe Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\nGrove Base Hat for Raspberry Pi\n\n\n\n\nGrove Base Hat for GPIO connections\n\n\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "notes/course-hardware/index.htm#sensors",
    "href": "notes/course-hardware/index.htm#sensors",
    "title": "Course Hardware",
    "section": "Sensors",
    "text": "Sensors\nAHT20 I2C Temperature & Humidity\n\n\n\n\nAHT20 I2C temperature/humidity sensor\n\n\n\nSee AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\nAHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "notes/course-hardware/index.htm#actuators-motors",
    "href": "notes/course-hardware/index.htm#actuators-motors",
    "title": "Course Hardware",
    "section": "Actuators & Motors",
    "text": "Actuators & Motors\nLED Socket\n\n\n\n\nLED\n\n\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\nCooling Fan\n\n\n\n\nCooling Fan\n\n\n\n5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\nRelay\n\n\n\n\nRelay switch\n\n\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "notes/course-hardware/index.htm#cabling",
    "href": "notes/course-hardware/index.htm#cabling",
    "title": "Course Hardware",
    "section": "Cabling",
    "text": "Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "notes/course-software/index.html",
    "href": "notes/course-software/index.html",
    "title": "Course software",
    "section": "",
    "text": "The operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\n\n\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.html#required-software",
    "href": "notes/course-software/index.html#required-software",
    "title": "Course software",
    "section": "",
    "text": "The operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\n\n\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.html#editor",
    "href": "notes/course-software/index.html#editor",
    "title": "Course software",
    "section": "2 Editor",
    "text": "2 Editor\n\n2.1 Recommended: VS Code\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\nPython language support extension\nPython formatter/linter extension (ruff)\nSetting up git credentials\n\nOnce you have set up git on your developer environment, VSCode will automatically pick up any --global configurations you have set\nThere remains one more important task: setting up VSCode to use your github token"
  },
  {
    "objectID": "notes/course-software/index.html#cloud",
    "href": "notes/course-software/index.html#cloud",
    "title": "Course software",
    "section": "3 Cloud",
    "text": "3 Cloud\n\n3.1 Microsoft Azure\n\n\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\nMicrosoft Azure will be used as the main platform that will:\n\nRegister and connect devices.\nStore and analyse data.\nManage the security layer.\nProvide libraries (SDKs) that can easily be integrated into our code.\nFor more information see Azure IoT page."
  },
  {
    "objectID": "notes/course-software/index.htm#required-software",
    "href": "notes/course-software/index.htm#required-software",
    "title": "Course software",
    "section": "Required software",
    "text": "Required software\nThe operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\nRecommended: Linux WSL\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.htm#editor",
    "href": "notes/course-software/index.htm#editor",
    "title": "Course software",
    "section": "Editor",
    "text": "Editor\nRecommended: VS Code\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\nPython language support extension\nPython formatter/linter extension (ruff)\nSetting up git credentials\n\nOnce you have set up git on your developer environment, VSCode will automatically pick up any --global configurations you have set\nThere remains one more important task: setting up VSCode to use your github token"
  },
  {
    "objectID": "notes/course-software/index.htm#cloud",
    "href": "notes/course-software/index.htm#cloud",
    "title": "Course software",
    "section": "Cloud",
    "text": "Cloud\nMicrosoft Azure\n\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\n\nMicrosoft Azure will be used as the main platform that will:\n\nRegister and connect devices.\nStore and analyse data.\nManage the security layer.\nProvide libraries (SDKs) that can easily be integrated into our code.\nFor more information see Azure IoT page."
  },
  {
    "objectID": "about/this-site/index.html",
    "href": "about/this-site/index.html",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-content",
    "href": "about/this-site/index.html#course-content",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-website",
    "href": "about/this-site/index.html#course-website",
    "title": "About this website",
    "section": "2 Course website",
    "text": "2 Course website\nDetails about how this website was built follow.\n\n2.1 Colophon\n\n\n\n\n\nFrom Wikipedia: In publishing, a colophon is a brief statement containing information about the publication of a book… Some web pages also have colophons, which frequently contain (X)HTML, CSS, or usability standards compliance information and links to website validation tests.\n\n\n\nMarkup: Markdown\nFramework: Quarto\nDeployment: GitHub Pages\n\nYou can follow along directly with course updates at the course repository."
  },
  {
    "objectID": "about/calendar/index.html",
    "href": "about/calendar/index.html",
    "title": "Calendar",
    "section": "",
    "text": "This is the authoritative calendar for content covered in class, and for content you should expect to see covered as we continue through the course.\nYou can compare this calendar with the calendar from the Course Outline to see where this course has deviated from the original outline."
  },
  {
    "objectID": "about/calendar/index.html#deliverables",
    "href": "about/calendar/index.html#deliverables",
    "title": "Calendar",
    "section": "1 Deliverables",
    "text": "1 Deliverables\n\nLab 0: Due January 31 (Demo: in-class. Code: end of day 11:59pm)"
  },
  {
    "objectID": "about/calendar/index.html#lectures",
    "href": "about/calendar/index.html#lectures",
    "title": "Calendar",
    "section": "2 Lectures",
    "text": "2 Lectures\n\nJan 20: Introduction to course\nJan 24: Setting up developer environment\nJan 27: Review bash, begin Lab 0\nJan 31:"
  },
  {
    "objectID": "about/syllabus/index.html",
    "href": "about/syllabus/index.html",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#logistics",
    "href": "about/syllabus/index.html#logistics",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#course-material",
    "href": "about/syllabus/index.html#course-material",
    "title": "Syllabus",
    "section": "2 Course material",
    "text": "2 Course material\nThere are no required textbooks for this course – this website will contain all of the content that you need to complete course deliverables. Additionally, each lecture will contain references to additional resources for exploring each topic in further detail beyond the scope of the course."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This companion site for the 420-6P3 course includes:\n\n\nLecture slides / documents\nExercises\nReferences & Resources\n\n\nWebsite accessible at john-abbott-college.github.io/6P3-Notes\n\n\nThis course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands.\n\n\n\n\nExperience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup).\n\n\n\n\nThis webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Home",
    "section": "",
    "text": "This course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Home",
    "section": "",
    "text": "Experience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup)."
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Home",
    "section": "",
    "text": "This webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "notes/bash-commands/index.htm#tips-tricks",
    "href": "notes/bash-commands/index.htm#tips-tricks",
    "title": "Bash commands",
    "section": "Tips & tricks",
    "text": "Tips & tricks\nman & --help\nKeyboard shortcuts\nConfiguration"
  },
  {
    "objectID": "notes/bash-commands/index.htm#common-commands",
    "href": "notes/bash-commands/index.htm#common-commands",
    "title": "Bash commands",
    "section": "Common commands",
    "text": "Common commands\ncd\ncat\nfile\nfind\ngrep\ndu\nssh"
  },
  {
    "objectID": "notes/bash-commands/index.html",
    "href": "notes/bash-commands/index.html",
    "title": "Bash commands",
    "section": "",
    "text": "Image: https://www.svgrepo.com/svg/353475/bash"
  },
  {
    "objectID": "notes/bash-commands/index.html#tips-tricks",
    "href": "notes/bash-commands/index.html#tips-tricks",
    "title": "Bash commands",
    "section": "1 Tips & tricks",
    "text": "1 Tips & tricks\n\n1.1 man & --help\n\n\n1.2 Keyboard shortcuts\n\n\n1.3 Configuration"
  },
  {
    "objectID": "notes/bash-commands/index.html#common-commands",
    "href": "notes/bash-commands/index.html#common-commands",
    "title": "Bash commands",
    "section": "2 Common commands",
    "text": "2 Common commands\n\n2.1 cd\n\n\n2.2 cat\n\n\n2.3 file\n\n\n2.4 find\n\n\n2.5 grep\n\n\n2.6 du\n\n\n2.7 ssh"
  }
]