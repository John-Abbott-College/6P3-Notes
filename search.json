[
  {
    "objectID": "notes/course-hardware/index.html",
    "href": "notes/course-hardware/index.html",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\n\nThe reTerminal device.\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.html#reterminal",
    "href": "notes/course-hardware/index.html#reterminal",
    "title": "Course Hardware",
    "section": "",
    "text": "The reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\n\nThe reTerminal device.\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\n\n\n\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.html#compute-module-4",
    "href": "notes/course-hardware/index.html#compute-module-4",
    "title": "Course Hardware",
    "section": "2 Compute Module 4",
    "text": "2 Compute Module 4\n\n\n\n\n\nRaspberry PI CM 4\n\n\nThe Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\n\n2.1 Grove Base Hat for Raspberry Pi\n\n\n\n\n\nGrove Base Hat for GPIO connections\n\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#sensors",
    "href": "notes/course-hardware/index.html#sensors",
    "title": "Course Hardware",
    "section": "3 Sensors",
    "text": "3 Sensors\n\n3.1 AHT20 I2C Temperature & Humidity\n\n\n\n\n\nAHT20 I2C temperature/humidity sensor\n\n\nSee AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\n\n\n3.2 AHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "notes/course-hardware/index.html#actuators-motors",
    "href": "notes/course-hardware/index.html#actuators-motors",
    "title": "Course Hardware",
    "section": "4 Actuators & Motors",
    "text": "4 Actuators & Motors\n\n4.1 LED Socket\n\n\n\n\n\nLED\n\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\n\n\n4.2 Cooling Fan\n\n\n\n\n\nCooling Fan\n\n\n5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\n\n\n4.3 Relay\n\n\n\n\n\nRelay switch\n\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "notes/course-hardware/index.html#cabling",
    "href": "notes/course-hardware/index.html#cabling",
    "title": "Course Hardware",
    "section": "5 Cabling",
    "text": "5 Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "notes/course-hardware/index.htm#reterminal",
    "href": "notes/course-hardware/index.htm#reterminal",
    "title": "Course Hardware",
    "section": "reTerminal",
    "text": "reTerminal\nThe reTerminal is a development board based on the Raspberry Pi Compute Module 4 (CM4) manufactured by Seeed Studio.\n\n\n\n\nThe reTerminal device.\n\n\n\nNotable features:\n\nCompute Module 4 with 4GB RAM & 32GB eMMC\n5-Inch IPS capacitive multi-touch screen at 1280 x 720 and 293 PPI\nWireless connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE\nCryptographic co-processor with secure hardware-based key storage\nBuilt-in modules such as accelerometer, light sensor, and RTC\n\n\nSee reTerminal Wiki page for detailed specs and documentation\n\nPower Supply\n\n\n\n\nRPI USB-C POWER SUPPLY BLACK US\n\n\n\nThe reTerminal requires a power supply that can provide a minimum of 3 Amps. The official Raspberry Pi USB-C Power Supply in included in the kit."
  },
  {
    "objectID": "notes/course-hardware/index.htm#compute-module-4",
    "href": "notes/course-hardware/index.htm#compute-module-4",
    "title": "Course Hardware",
    "section": "Compute Module 4",
    "text": "Compute Module 4\n\n\n\n\nRaspberry PI CM 4\n\n\n\nThe Compute Module 4 (CM4) made by the Raspberry Pi Foundation is powering the reTerminal.\nNotable features:\n\nProcessor: Broadcom BCM2711 quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.5GHz\n\n\nSee CM4 datasheet for details.\n\nSee Difference Between ARM64, ARMel, and ARMhf for more info on the different ARM architectures.\nGrove Base Hat for Raspberry Pi\n\n\n\n\nGrove Base Hat for GPIO connections\n\n\n\nIn a typical Raspberry Pi, sensors would be connected via the 40-pin GPIO.\nTo facilitate connections of the Grove sensors, this “Hat” (term for an add-on board of the Raspberry Pi) includes the following types of connection:\n\n6 Digital\n4 Analog\n3 I2C\n1 PWM\n1 UART\n\n\nSee Grove base hat Wiki for details."
  },
  {
    "objectID": "notes/course-hardware/index.htm#sensors",
    "href": "notes/course-hardware/index.htm#sensors",
    "title": "Course Hardware",
    "section": "Sensors",
    "text": "Sensors\nAHT20 I2C Temperature & Humidity\n\n\n\n\nAHT20 I2C temperature/humidity sensor\n\n\n\nSee AHT20 I2C Industrial Grade Temperature & Humidity Sensor wiki for details.\n\nTemperature measurement range -40 ~ 85°C, Humidity measurement range 0 ~ 100% RH.\nDigital output, Grove I2C interface.\n\nAHT20 Libraries\nThe main module for this sensor is provided by Seeed in this Github repository and can be installed with the grove.py library.\nFollow official Step by step installation for python 3 (see below). Don’t use the one-click installation or it will install to the wrong location\ngit clone [https://github.com/Seeed-Studio/grove.py](https://github.com/Seeed-Studio/grove.py)\ncd grove.py\nsudo pip3 install .\nAlternatively, it’s also possible to use Adafruit’s adafruit-circuitpython-ahtx0 library to communicate with the sensor (see library’s Pypi page). However, to instantiate the provided sensor class, you will need to pass it an I2C bus instance. To instantiate an I2C bus instance, install and use the adafruit-extended-bus library (see Pypi page)."
  },
  {
    "objectID": "notes/course-hardware/index.htm#actuators-motors",
    "href": "notes/course-hardware/index.htm#actuators-motors",
    "title": "Course Hardware",
    "section": "Actuators & Motors",
    "text": "Actuators & Motors\nLED Socket\n\n\n\n\nLED\n\n\n\nLED in a removable socket and potentiometer for power adjustment. LED can be swapped with different colors.\nSee LED wiki page for details.\nCooling Fan\n\n\n\n\nCooling Fan\n\n\n\n5V Cooling Fan 40mm x 10mm with 2-pin JST connector.\n\nSee product page here.\n\nRelay\n\n\n\n\nRelay switch\n\n\n\nA digital switch. Controls the on/off flow of electricity with a small digital signal.\n\nOperate voltage: 3.3V-5V\nInput current: 100mA\nRated load: 5A@250VAC 5A@30VDC\n\nSee relay wiki page for details."
  },
  {
    "objectID": "notes/course-hardware/index.htm#cabling",
    "href": "notes/course-hardware/index.htm#cabling",
    "title": "Course Hardware",
    "section": "Cabling",
    "text": "Cabling\nThe following cables are included in the base kit:\n\nGrove Universal 4 Pin Buckled 5cm Cable.\nGrove Universal 4 Pin Buckled 20cm Cable.\nGrove 4 pin Female Jumper to Grove 4 pin Cable\nGrove 4 pin Male Jumper to Grove 4 pin Cable\n40-pin flat ribbon cable 20cm (female-female).\n2-pin JST SM Plug, one end open."
  },
  {
    "objectID": "notes/course-software/index.html",
    "href": "notes/course-software/index.html",
    "title": "Course software",
    "section": "",
    "text": "The operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\n\n\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.html#required-software",
    "href": "notes/course-software/index.html#required-software",
    "title": "Course software",
    "section": "",
    "text": "The operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\n\n\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.html#editor",
    "href": "notes/course-software/index.html#editor",
    "title": "Course software",
    "section": "2 Editor",
    "text": "2 Editor\n\n2.1 Recommended: VS Code\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\nPython language support extension\nPython formatter/linter extension (ruff)\nSetting up git credentials\n\nOnce you have set up git on your developer environment, VSCode will automatically pick up any --global configurations you have set\nThere remains one more important task: setting up VSCode to use your github token"
  },
  {
    "objectID": "notes/course-software/index.html#cloud",
    "href": "notes/course-software/index.html#cloud",
    "title": "Course software",
    "section": "3 Cloud",
    "text": "3 Cloud\n\n3.1 Microsoft Azure\n\n\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\nMicrosoft Azure will be used as the main platform that will:\n\nRegister and connect devices.\nStore and analyse data.\nManage the security layer.\nProvide libraries (SDKs) that can easily be integrated into our code.\nFor more information see Azure IoT page."
  },
  {
    "objectID": "notes/course-software/index.htm#required-software",
    "href": "notes/course-software/index.htm#required-software",
    "title": "Course software",
    "section": "Required software",
    "text": "Required software\nThe operating system running inside the reTerminal is Raspberry Pi OS, which is based on Debian Linux.\nWe will make use of the following tools:\n\nbash and python and related packaging tools\ngit and related configuration\na Unix shell and package manager for installing and managing dependencies compatible with RasperryPi OS\n(later this semester) Azure and GitHub CLI tools\n(later this semester) .NET for interfacing with the App Dev III code\n\nWe will achieve that in one of the following ways, depending on the computer you are using:\n\n(on Windows computers such as the lab computers) by creating a Debian WSL container\n(on OS X computers) using brew\n(on Linux computers) using your system package manager.\n\nSee below for further instructions for each.\nRecommended: Linux WSL\nIf using a Windows machine (lab computers and/or personal) for this course, you will need to set up Windows Subsystem for Linux (WSL).\n\nInstall Debian on WSL\n\nChoosing Debian as the Linux distribution\nSet up Windows Terminal\nSet up VS Code\nSet up git\n\nInstall dependencies:\n\n# Update system:\nsudo apt update && sudo apt upgrade -y\n# Verify python version is &gt;= 3.9: \npython3 --version\n# Ensure pip is installed:\nsudo apt install python3-pip\npip3 --version"
  },
  {
    "objectID": "notes/course-software/index.htm#editor",
    "href": "notes/course-software/index.htm#editor",
    "title": "Course software",
    "section": "Editor",
    "text": "Editor\nRecommended: VS Code\n\nRemote - SSH by Microsoft: Open any folder on a remote machine using SSH and take advantage of VS Code’s full feature set.\nPython language support extension\nPython formatter/linter extension (ruff)\nSetting up git credentials\n\nOnce you have set up git on your developer environment, VSCode will automatically pick up any --global configurations you have set\nThere remains one more important task: setting up VSCode to use your github token"
  },
  {
    "objectID": "notes/course-software/index.htm#cloud",
    "href": "notes/course-software/index.htm#cloud",
    "title": "Course software",
    "section": "Cloud",
    "text": "Cloud\nMicrosoft Azure\n\n\n\n\nAzure IoT Hub: Create Using Azure Portal | Build5Nines\n\n\n\nMicrosoft Azure will be used as the main platform that will:\n\nRegister and connect devices.\nStore and analyse data.\nManage the security layer.\nProvide libraries (SDKs) that can easily be integrated into our code.\nFor more information see Azure IoT page."
  },
  {
    "objectID": "notes/bash-essentials/keyboard-shortcuts.html",
    "href": "notes/bash-essentials/keyboard-shortcuts.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "This section was adapted from www.ss64.com [@ss64_2025].\n\n0.0.1 Completions\nUse TAB completion for file/directory names. Type just enough characters to uniquely identify the item.\nFor example, to move to a directory sample1; Type cd sam. Then press TAB and ENTER.\n\n\n0.0.2 Moving the cursor\n\nCtrl+a: Go to the beginning of the line (Home).\nCtrl+e: Go to the End of the line (End).\nCtrl+p: Previous command (Up arrow).\nCtrl+n: Next command (Down arrow).\nAlt+b: Back (left) one word.\nAlt+f: Forward (right) one word.\nCtrl+f: Forward one character.\nCtrl+b: Backward one character.\n\n\n\n0.0.3 While using man or command --help | less\n\nk: Scroll up one line\nj: Scroll down one line\nCtrl+u: Page up\nCtrl+d: Page down\n/: Begin forward search\n?: Begin reverse search\nn/N: Find next/previous match\nq: close the less pager\n\n\n\n0.0.4 Editing\n\nCtrl+L: Clear the Screen, similar to the clear command.\nAlt+Del: Delete the Word before the cursor.\nAlt+d: Delete the Word after the cursor.\nCtrl+d: Delete character under the cursor.\nCtrl+h: Delete character before the cursor (Backspace).\nCtrl+w: Cut the Word before the cursor to the clipboard.\nCtrl+k: Cut the Line after the cursor to the clipboard.\nCtrl+u: Cut/delete the Line before the cursor to the clipboard.\nAlt+t: Swap current word with previous.\nCtrl+t: Swap the last two characters before the cursor (typo).\nctrl+y: Paste the last thing to be cut (yank).\nAlt+u: UPPER capitalize every character from the cursor to the end of the current word.\nAlt+l: Lower the case of every character from the cursor to the end of the current word.\nAlt+c: Capitalize the character under the cursor and move to the end of the word.\nAlt+r: Cancel the changes and put back the line as it was in the history (revert).\nctrl+_: Undo.\n\n\n\n0.0.5 Special keys\n\nCtrl+v tells the terminal to not interpret the following character\n\nso Ctrl+v TAB will display a tab character rather than attempting completion.\nsimilarly Ctrl+v ENTER will display the escape sequence for the Enter key: ^M\n\n\n\n\n0.0.6 History\n\nCtrl+r: Recall the last command including the specified character(s).\nCtrl+p: Previous command in history (walk back).\nCtrl+n: Next command in history (walk forward).\nCtrl+o: Execute the command found via Ctrl+r or Ctrl+s Ctrl+o\nCtrl+g: Escape from history searching mode.\n\n\n\n0.0.7 Process Control\n\nCtrl+c: Interrupt/Kill whatever you are running (SIGINT).\nCtrl+l: Clear the screen.\nCtrl+s: Stop output to the screen (for long running verbose commands). Then use PgUp/PgDn for navigation.\nCtrl+q: Allow output to the screen (if previously stopped using command above).\nCtrl+d: Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT).\nCtrl+z: Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter fg 'process name'\n\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/index.html",
    "href": "notes/bash-essentials/index.html",
    "title": "Bash essentials",
    "section": "",
    "text": "Image source"
  },
  {
    "objectID": "notes/bash-essentials/index.html#using-cli-effectively",
    "href": "notes/bash-essentials/index.html#using-cli-effectively",
    "title": "Bash essentials",
    "section": "1 Using CLI effectively",
    "text": "1 Using CLI effectively\nFirst things first: the terminal can feel awkward to use. What can we do about this?\nEach section below is some set of tips for using the interactive bash CLI effectively.\n\n1.1 Keyboard shortcuts\n\n\n\n\n\n\nKeyboard Shortcuts: details & examples\n\n\n\n\n\nThis section was adapted from www.ss64.com (“How-To: Redirection and Process Substitution - Linux - SS64.com” n.d.).\n\n1.1.1 Completions\nUse TAB completion for file/directory names. Type just enough characters to uniquely identify the item.\nFor example, to move to a directory sample1; Type cd sam. Then press TAB and ENTER.\n\n\n1.1.2 Moving the cursor\n\nCtrl+a: Go to the beginning of the line (Home).\nCtrl+e: Go to the End of the line (End).\nCtrl+p: Previous command (Up arrow).\nCtrl+n: Next command (Down arrow).\nAlt+b: Back (left) one word.\nAlt+f: Forward (right) one word.\nCtrl+f: Forward one character.\nCtrl+b: Backward one character.\n\n\n\n1.1.3 While using man or command --help | less\n\nk: Scroll up one line\nj: Scroll down one line\nCtrl+u: Page up\nCtrl+d: Page down\n/: Begin forward search\n?: Begin reverse search\nn/N: Find next/previous match\nq: close the less pager\n\n\n\n1.1.4 Editing\n\nCtrl+L: Clear the Screen, similar to the clear command.\nAlt+Del: Delete the Word before the cursor.\nAlt+d: Delete the Word after the cursor.\nCtrl+d: Delete character under the cursor.\nCtrl+h: Delete character before the cursor (Backspace).\nCtrl+w: Cut the Word before the cursor to the clipboard.\nCtrl+k: Cut the Line after the cursor to the clipboard.\nCtrl+u: Cut/delete the Line before the cursor to the clipboard.\nAlt+t: Swap current word with previous.\nCtrl+t: Swap the last two characters before the cursor (typo).\nctrl+y: Paste the last thing to be cut (yank).\nAlt+u: UPPER capitalize every character from the cursor to the end of the current word.\nAlt+l: Lower the case of every character from the cursor to the end of the current word.\nAlt+c: Capitalize the character under the cursor and move to the end of the word.\nAlt+r: Cancel the changes and put back the line as it was in the history (revert).\nctrl+_: Undo.\n\n\n\n1.1.5 Special keys\n\nCtrl+v tells the terminal to not interpret the following character\n\nso Ctrl+v TAB will display a tab character rather than attempting completion.\nsimilarly Ctrl+v ENTER will display the escape sequence for the Enter key: ^M\n\n\n\n\n1.1.6 History\n\nCtrl+r: Recall the last command including the specified character(s).\nCtrl+p: Previous command in history (walk back).\nCtrl+n: Next command in history (walk forward).\nCtrl+o: Execute the command found via Ctrl+r or Ctrl+s Ctrl+o\nCtrl+g: Escape from history searching mode.\n\n\n\n1.1.7 Process Control\n\nCtrl+c: Interrupt/Kill whatever you are running (SIGINT).\nCtrl+l: Clear the screen.\nCtrl+s: Stop output to the screen (for long running verbose commands). Then use PgUp/PgDn for navigation.\nCtrl+q: Allow output to the screen (if previously stopped using command above).\nCtrl+d: Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT).\nCtrl+z: Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter fg 'process name'\n\n\n\n\n\n\n\n1.2 Configuration\n\n\n\n\n\n\n.bashrc details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n\n\n\n\n.inputrc details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.html#bare-necessities",
    "href": "notes/bash-essentials/index.html#bare-necessities",
    "title": "Bash essentials",
    "section": "2 Bare necessities",
    "text": "2 Bare necessities\nThe following sections explain the purpose of each command and show a few use cases and useful options.\nThese are commands you probably already know – if you don’t, you’ll know by the end of lab-0, as you’ll need them all!\n\n2.1 Getting around: cd and ls\n\nNAME\n  cd - change the current directory\n  ls - list directory contents\n\nSYNOPSIS\n  cd [DIR]\n  ls [OPTION]... [FILE]...\n\n\n\n\n\n\n\ncd & ls details & examples\n\n\n\n\n\n\n2.1.1 cd\nUseful shorthands for cd to know:\n# Change to user home directory \n# (usually: /home/username)\n$ cd ~\n\n# WSL: Change to Windows mounted directory\n$ cd /mnt/c/\n\n# Return to previous directory\n$ cd -    # in this case, /home/username\n\n\n2.1.2 ls\nUseful ls options:\n-l                     use a long listing format\n-a, --all              do not ignore entries starting with .\n-d, --directory        list directories themselves, not their contents\n-s, --size             print the allocated size of each file, in blocks\n-t                     sort by time, newest first; see --time\n-h, --human-readable   with -l and -s, print sizes like 1K 234M 2G etc.\n    --si               likewise, but use powers of 1000 not 1024\n-R, --recursive        list subdirectories recursively\n\n\n\n\n\n\n2.2 Viewing files: cat and tac\n\nNAME\n  cat - concatenate files and print on the standard output\n  tac - concatenate and print files in reverse\n\nSYNOPSIS\n  cat [OPTION]... [FILE]...\n  tac [OPTION]... [FILE]...\n\n\n\n2.3 Creating files: touch and mkdir\n\nNAME\n  touch - Update the modification times of each `FILE` to the current time.\n          Creates the files if they do not exist.\n  mkdir - Create the given DIRECTORY(ies) if they do not exist\n\nSYNOPSIS\n  touch [FILE]...\n  mkdir [-p/--parents] [DIRECTORY]...\n\n\n\n2.4 Moving files: mv and cp\n\nNAME\n  mv - Move `SOURCE` to `DEST`, or multiple `SOURCE`(s) to `DIRECTORY`.\n  cp - Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\nSYNOPSIS\n  mv  [-f/--force] [-i/--interactive] [-g/--progress] [SOURCE]... [DEST]\n  cp  [-f/--force] [-i/--interactive] [-g/--progress] [-R/--recursive] [SOURCE]... [DEST]\n\n\n\n2.5 Managing permissions: chmod and chown\n\nNAME\n  chmod - Change the permissions mode of each FILE to MODE.\n  chown - Change file owner and group of each FILE to USER:GROUP\n\nSYNOPSIS\n  chmod [-R/--recursive] [MODE] [FILE]\n  chown [-R/--recursive] [USER:GROUP] [FILE]\n\n\n\n2.6 Deleting files: rm\n\nNAME\n  rm - Remove the FILE(s)\n\nSYNOPSIS\n  rm [-f/--force] [-i/--interactive] [-r/--recursive] [FILE]..."
  },
  {
    "objectID": "notes/bash-essentials/index.html#the-five-fingers-of-death",
    "href": "notes/bash-essentials/index.html#the-five-fingers-of-death",
    "title": "Bash essentials",
    "section": "3 The five fingers of death",
    "text": "3 The five fingers of death\n\n\n\n\n\nImage source\n\n\n\n3.1 find files and grep content\n\nNAME\n  find - search for files that match a given expression\n  grep - print lines in file(s) that match a given pattern\n\nSYNOPSIS\n  find [STARTING-POINT...] [EXPRESSION]\n  grep [OPTION...] PATTERNS [FILE...]\n\n\n\n\n\n\n\nfind & grep details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.2 tr characters and cut fields\n\nNAME\n  tr - Translate characters matching STRING1 in stdin/FILE to STRING2 writing to stdout\n  cut - Prints specified columns from each line of stdin, writes to stdout\n\nSYNOPSIS\n  tr [OPTION]... STRING1 STRING2\n  cut [-d/--delimiter] [-f|--fields] [FILE]\n\n\n\n\n\n\n\ntr & cut details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.3 sort data and uniq duplicates\n\nNAME\n  sort - Display sorted concatenation of all FILE(s). With no FILE, or when FILE is -, read stdin\n  uniq - Report or omit repeated lines.\n\nSYNOPSIS\n  sort [FILE]...\n  uniq [-d/--repeated] [FILE]...\n\n\n\n\n\n\n\nsort and uniq details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.4 know head from tail\n\nNAME\n  head - Print the first 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n  tail - Print the last 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n\nSYNOPSIS\n  head [-n/--lines] [FILE]...\n  tail [-n/--lines] [-f/--follow] [FILE]...\n\n\n\n\n\n\n\nhead & tail details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n3.5 tree and tee\n\nNAME\n  tree - list contents of DIRECTORIES in a tree-like format.\n  tee - Copy standard input to each FILE, and also to standard output.\n\nSYNOPSIS\n  tree [-L level] [DIRECTORY]...\n  tee [FILE]...\n\n\n\n\n\n\n\ntree & tee details & examples\n\n\n\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.html#redirection-and-pipes",
    "href": "notes/bash-essentials/index.html#redirection-and-pipes",
    "title": "Bash essentials",
    "section": "4 Redirection and Pipes",
    "text": "4 Redirection and Pipes\nThis section was adapted from www.ss64.com: How-to: Redirection and Process Substitution\n\ncommand  &gt;  filename     Redirect command output (stdout) into a file\ncommand  &gt;  /dev/null    Discard stdout of command\ncommand  2&gt; filename     Redirect error output (stderr) to a file\ncommand  2&gt;  /dev/null   Discard stderr of command\ncommand  2&gt;&1 filename   Redirect stderr to stdout \ncommand  1&gt;&2 filename   Redirect stdout to stderr\ncommand  &gt;&gt; filename     Redirect command output and APPEND into a file\ncommand  &lt;  filename     Redirect a file into a command\ncommand  &&gt; filename     Redirect every output of command to filename\n\ncommandA | commandB       Redirect stdout of commandA to commandB\ncommandA |& commandB      Redirect stdERR of commandA to commandB\ncommandA | tee filename   Redirect commandA into filename AND stdout"
  },
  {
    "objectID": "notes/bash-essentials/index.html#core-utilities",
    "href": "notes/bash-essentials/index.html#core-utilities",
    "title": "Bash essentials",
    "section": "5 Core utilities",
    "text": "5 Core utilities\n\n5.1 ssh\n\nNAME\n  ssh - OpenSSH remote login client\n\nSYNOPSIS\n  ssh [-l login_name] [-p port] DESTINATION [command [argument...]\n\nssh is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.\nssh connects and logs into the specified destination, which may be specified as either [user@]hostname or a URI of the form ssh://[user@]hostname[:port].\nIf a command is specified, it will be executed on the remote host instead of a login shell.\n\n\n\n\n\n\nssh details & examples\n\n\n\n\n\n\nThere’heapds nothing here yet… stay tuned!\n\n\n\n\n\n5.2 rsync\n\nNAME\n  rsync - a fast, versatile, remote (and local) file-copying tool\n\nSYNOPSIS\n  Local:\n    rsync [OPTION...] SRC... [DEST]\n  Access via remote shell:\n    Pull:\n        rsync [OPTION...] [USER@]HOST:SRC... [DEST]\n    Push:\n        rsync [OPTION...] SRC... [USER@]HOST:DEST\n\nRsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon.\nIt is famous for sending only the differences between the source files and the existing files in the destination, increasing efficiency for repetitive synchronization between source and destination.\nRsync is widely used for backups and mirroring, and as an improved cp command for everyday use.\n\n\n\n\n\n\nrsync details & examples\n\n\n\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n5.3 tar, zip, and unzip\n\nNAME\n  tar - a general archiving utility for creation/extraction/compression and more\n  zip - package and compress files into a ZIP archive\n  unzip - list, test and extract compressed files from a ZIP archive\n\nSYNOPSIS\n  tar --create/--extract [--file ARCHIVE] [OPTIONS] [FILE...]\n  zip [OPTIONS] [ARCHIVE] [FILE...]\n  unzip [ARCHIVE] [-d OUTPUTDIR]\n\nThe tar, zip, and unzip programs provide the ability to create, extract, and otherwise manipulate archives of files, where an archive of files is simply a file that stores a collection of other files.\n\n\n\n\n\n\ntar, zip, and unzip details & examples\n\n\n\n\n\nThis section was adapted from www.gnu.org (“GNU Tar 1.35: 2 Tutorial Introduction to Tar” n.d.).\nAll three tools are used for efficient storage, transfer, and backup of collections of files, particularly large files via compression.\nThe specific usecases for tar/zip/unzip are similar but vary slightly:\n\ntar:\n\ndefault: create/extract an uncompressed archive (.tar) of a collection of files\nwith --gzip/-z: create/extract a compressed archive (.tar.gz) of a collection of files\nwith --bzip2/-j: create/extract a compressed archive (.tar.bz2) of a collection of files\n\nzip:\n\ncreate a compressed collection of files (.zip)\n\nunzip:\n\nextract a compressed collection of files (.zip)\n\n\n\n5.3.1 Operations\nThere are three main operations of interest for archiving programs:\n\ncreate: create a new archive (.zip, .tar, .tar.gz, tar.bz2)\nextract: extract the files of an archive to a directory\n\nExamples of each follow below:\n\nCreateExtract\n\n\n# Assume you have a directory called music/ and three folders inside it:\n$ tree music\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Create an uncompressed archive (.tar) of all three files\n$ tar --create --file=collection.tar music\n\n# Creates a compressed archive (.zip, .tar.gz, .tar.bz2)\n$ zip -r collection.zip music\n$ tar --create --gzip --file=collection.tar.gz music\n$ tar --create --bzip2 --file=collection.tar.bz2 music\n\n# tar has shorthand versions of the above parameters\n$ tar -c -f collection.tar music\n$ tar -c -z -f collection.tar.gz music\n$ tar -cjf collection.tar.bz2 music\n\n\n\n# Assume you have the archives from the Create example:\n$ tar --list collection.tar\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Extract all files from an uncompressed archive (.tar) to the current directory\n$ tar --extract --file=collection.tar\n\n# Extract all files from a compressed archive (.zip, .tar.gz, .tar.bz2) to the current directory\n$ unzip collection.zip\n$ tar --extract --gzip --file=collection.tar.gz\n$ tar --extract --bzip2 --file=collection.tar.bz2\n\n# Extract all files from a compressed archive, specifying a different output directory\n$ unzip collection.zip -d ~/some-folder\n$ tar --extract --gzip --file=collection.tar.gz --directory ~/music\n$ tar --extract --bzip2 --file=collection.tar.bz2 --directory /tmp/music\n\n# tar has shorthand versions of the above parameters\n$ tar -x -f collection.tar\n$ tar -x -z -f collection.tar.gz -C ~/music\n$ tar -xjf collection.tar.bz2 -C /tmp/music\n\n\n\nEach of these operations is mutually exclusive, which makes some sense. You cannot create and extract an archive at the same time, that doesn’t make sense!\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen using --create or -c, tar will overwrite current contents of the file named by -f. To add files to an existing archive, you need to use --append or -r.\n\nYou can read more:\n\nthe usecases and history of tar at (gnu.org)\nA helpful comparison between tar and zip (stackoverflow)\nA reallyy thorough breakdown of compression in tar and zip (stackoverflow)\n\n\n\n5.4 git\n\nNAME\n  git - the stupid content tracker\n\nSYNOPSIS\n  git &lt;command&gt; [&lt;args&gt;]\n\nGit is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.\nSee man 7 gittutorial to get started, then see man 7 giteveryday for a useful minimum set of commands.\n\n\n\n\n\n\ngit details & examples\n\n\n\n\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.htm#using-cli-effectively",
    "href": "notes/bash-essentials/index.htm#using-cli-effectively",
    "title": "Bash essentials",
    "section": "Using CLI effectively",
    "text": "Using CLI effectively\nFirst things first: the terminal can feel awkward to use. What can we do about this?\nEach section below is some set of tips for using the interactive bash CLI effectively.\nKeyboard shortcuts\n\n\n\n\n\n\nKeyboard Shortcuts: details & examples\n\n\nThis section was adapted from www.ss64.com (“How-To: Redirection and Process Substitution - Linux - SS64.com” n.d.).\nCompletions\nUse TAB completion for file/directory names. Type just enough characters to uniquely identify the item.\nFor example, to move to a directory sample1; Type cd sam. Then press TAB and ENTER.\nMoving the cursor\n\nCtrl+a: Go to the beginning of the line (Home).\nCtrl+e: Go to the End of the line (End).\nCtrl+p: Previous command (Up arrow).\nCtrl+n: Next command (Down arrow).\nAlt+b: Back (left) one word.\nAlt+f: Forward (right) one word.\nCtrl+f: Forward one character.\nCtrl+b: Backward one character.\n\nWhile using man or command --help | less\n\nk: Scroll up one line\nj: Scroll down one line\nCtrl+u: Page up\nCtrl+d: Page down\n/: Begin forward search\n?: Begin reverse search\nn/N: Find next/previous match\nq: close the less pager\n\nEditing\n\nCtrl+L: Clear the Screen, similar to the clear command.\nAlt+Del: Delete the Word before the cursor.\nAlt+d: Delete the Word after the cursor.\nCtrl+d: Delete character under the cursor.\nCtrl+h: Delete character before the cursor (Backspace).\nCtrl+w: Cut the Word before the cursor to the clipboard.\nCtrl+k: Cut the Line after the cursor to the clipboard.\nCtrl+u: Cut/delete the Line before the cursor to the clipboard.\nAlt+t: Swap current word with previous.\nCtrl+t: Swap the last two characters before the cursor (typo).\nctrl+y: Paste the last thing to be cut (yank).\nAlt+u: UPPER capitalize every character from the cursor to the end of the current word.\nAlt+l: Lower the case of every character from the cursor to the end of the current word.\nAlt+c: Capitalize the character under the cursor and move to the end of the word.\nAlt+r: Cancel the changes and put back the line as it was in the history (revert).\nctrl+_: Undo.\n\nSpecial keys\n\nCtrl+v tells the terminal to not interpret the following character\n\nso Ctrl+v TAB will display a tab character rather than attempting completion.\nsimilarly Ctrl+v ENTER will display the escape sequence for the Enter key: ^M\n\n\nHistory\n\nCtrl+r: Recall the last command including the specified character(s).\nCtrl+p: Previous command in history (walk back).\nCtrl+n: Next command in history (walk forward).\nCtrl+o: Execute the command found via Ctrl+r or Ctrl+s Ctrl+o\nCtrl+g: Escape from history searching mode.\n\nProcess Control\n\nCtrl+c: Interrupt/Kill whatever you are running (SIGINT).\nCtrl+l: Clear the screen.\nCtrl+s: Stop output to the screen (for long running verbose commands). Then use PgUp/PgDn for navigation.\nCtrl+q: Allow output to the screen (if previously stopped using command above).\nCtrl+d: Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT).\nCtrl+z: Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter fg 'process name'\n\n\n\n\nConfiguration\n\n\n\n\n\n\n.bashrc details & examples\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n\n\n\n\n.inputrc details & examples\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.htm#bare-necessities",
    "href": "notes/bash-essentials/index.htm#bare-necessities",
    "title": "Bash essentials",
    "section": "Bare necessities",
    "text": "Bare necessities\nThe following sections explain the purpose of each command and show a few use cases and useful options.\nThese are commands you probably already know – if you don’t, you’ll know by the end of lab-0, as you’ll need them all!\nGetting around: cd and ls\n\nNAME\n  cd - change the current directory\n  ls - list directory contents\n\nSYNOPSIS\n  cd [DIR]\n  ls [OPTION]... [FILE]...\n\n\n\n\n\n\n\ncd & ls details & examples\n\n\ncd\nUseful shorthands for cd to know:\n# Change to user home directory \n# (usually: /home/username)\n$ cd ~\n\n# WSL: Change to Windows mounted directory\n$ cd /mnt/c/\n\n# Return to previous directory\n$ cd -    # in this case, /home/username\nls\nUseful ls options:\n-l                     use a long listing format\n-a, --all              do not ignore entries starting with .\n-d, --directory        list directories themselves, not their contents\n-s, --size             print the allocated size of each file, in blocks\n-t                     sort by time, newest first; see --time\n-h, --human-readable   with -l and -s, print sizes like 1K 234M 2G etc.\n    --si               likewise, but use powers of 1000 not 1024\n-R, --recursive        list subdirectories recursively\n\n\n\nViewing files: cat and tac\n\nNAME\n  cat - concatenate files and print on the standard output\n  tac - concatenate and print files in reverse\n\nSYNOPSIS\n  cat [OPTION]... [FILE]...\n  tac [OPTION]... [FILE]...\n\nCreating files: touch and mkdir\n\nNAME\n  touch - Update the modification times of each `FILE` to the current time.\n          Creates the files if they do not exist.\n  mkdir - Create the given DIRECTORY(ies) if they do not exist\n\nSYNOPSIS\n  touch [FILE]...\n  mkdir [-p/--parents] [DIRECTORY]...\n\nMoving files: mv and cp\n\nNAME\n  mv - Move `SOURCE` to `DEST`, or multiple `SOURCE`(s) to `DIRECTORY`.\n  cp - Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\n\nSYNOPSIS\n  mv  [-f/--force] [-i/--interactive] [-g/--progress] [SOURCE]... [DEST]\n  cp  [-f/--force] [-i/--interactive] [-g/--progress] [-R/--recursive] [SOURCE]... [DEST]\n\nManaging permissions: chmod and chown\n\nNAME\n  chmod - Change the permissions mode of each FILE to MODE.\n  chown - Change file owner and group of each FILE to USER:GROUP\n\nSYNOPSIS\n  chmod [-R/--recursive] [MODE] [FILE]\n  chown [-R/--recursive] [USER:GROUP] [FILE]\n\nDeleting files: rm\n\nNAME\n  rm - Remove the FILE(s)\n\nSYNOPSIS\n  rm [-f/--force] [-i/--interactive] [-r/--recursive] [FILE]..."
  },
  {
    "objectID": "notes/bash-essentials/index.htm#the-five-fingers-of-death",
    "href": "notes/bash-essentials/index.htm#the-five-fingers-of-death",
    "title": "Bash essentials",
    "section": "The five fingers of death",
    "text": "The five fingers of death\n\n\n\n\nImage source\n\n\n\nfind files and grep content\n\nNAME\n  find - search for files that match a given expression\n  grep - print lines in file(s) that match a given pattern\n\nSYNOPSIS\n  find [STARTING-POINT...] [EXPRESSION]\n  grep [OPTION...] PATTERNS [FILE...]\n\n\n\n\n\n\n\nfind & grep details & examples\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\ntr characters and cut fields\n\nNAME\n  tr - Translate characters matching STRING1 in stdin/FILE to STRING2 writing to stdout\n  cut - Prints specified columns from each line of stdin, writes to stdout\n\nSYNOPSIS\n  tr [OPTION]... STRING1 STRING2\n  cut [-d/--delimiter] [-f|--fields] [FILE]\n\n\n\n\n\n\n\ntr & cut details & examples\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\nsort data and uniq duplicates\n\nNAME\n  sort - Display sorted concatenation of all FILE(s). With no FILE, or when FILE is -, read stdin\n  uniq - Report or omit repeated lines.\n\nSYNOPSIS\n  sort [FILE]...\n  uniq [-d/--repeated] [FILE]...\n\n\n\n\n\n\n\nsort and uniq details & examples\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\nknow head from tail\n\nNAME\n  head - Print the first 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n  tail - Print the last 10 lines of each `FILE` to standard output. With no `FILE`, or when `FILE` is `-`, read stdin\n\nSYNOPSIS\n  head [-n/--lines] [FILE]...\n  tail [-n/--lines] [-f/--follow] [FILE]...\n\n\n\n\n\n\n\nhead & tail details & examples\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\ntree and tee\n\nNAME\n  tree - list contents of DIRECTORIES in a tree-like format.\n  tee - Copy standard input to each FILE, and also to standard output.\n\nSYNOPSIS\n  tree [-L level] [DIRECTORY]...\n  tee [FILE]...\n\n\n\n\n\n\n\ntree & tee details & examples\n\n\nThere’s nothing here yet… stay tuned!"
  },
  {
    "objectID": "notes/bash-essentials/index.htm#redirection-and-pipes",
    "href": "notes/bash-essentials/index.htm#redirection-and-pipes",
    "title": "Bash essentials",
    "section": "Redirection and Pipes",
    "text": "Redirection and Pipes\nThis section was adapted from www.ss64.com: How-to: Redirection and Process Substitution\n\ncommand  &gt;  filename     Redirect command output (stdout) into a file\ncommand  &gt;  /dev/null    Discard stdout of command\ncommand  2&gt; filename     Redirect error output (stderr) to a file\ncommand  2&gt;  /dev/null   Discard stderr of command\ncommand  2&gt;&1 filename   Redirect stderr to stdout \ncommand  1&gt;&2 filename   Redirect stdout to stderr\ncommand  &gt;&gt; filename     Redirect command output and APPEND into a file\ncommand  &lt;  filename     Redirect a file into a command\ncommand  &&gt; filename     Redirect every output of command to filename\n\ncommandA | commandB       Redirect stdout of commandA to commandB\ncommandA |& commandB      Redirect stdERR of commandA to commandB\ncommandA | tee filename   Redirect commandA into filename AND stdout"
  },
  {
    "objectID": "notes/bash-essentials/index.htm#core-utilities",
    "href": "notes/bash-essentials/index.htm#core-utilities",
    "title": "Bash essentials",
    "section": "Core utilities",
    "text": "Core utilities\nssh\n\nNAME\n  ssh - OpenSSH remote login client\n\nSYNOPSIS\n  ssh [-l login_name] [-p port] DESTINATION [command [argument...]\n\nssh is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.\nssh connects and logs into the specified destination, which may be specified as either [user@]hostname or a URI of the form ssh://[user@]hostname[:port].\nIf a command is specified, it will be executed on the remote host instead of a login shell.\n\n\n\n\n\n\nssh details & examples\n\n\n\nThere’heapds nothing here yet… stay tuned!\n\n\n\nrsync\n\nNAME\n  rsync - a fast, versatile, remote (and local) file-copying tool\n\nSYNOPSIS\n  Local:\n    rsync [OPTION...] SRC... [DEST]\n  Access via remote shell:\n    Pull:\n        rsync [OPTION...] [USER@]HOST:SRC... [DEST]\n    Push:\n        rsync [OPTION...] SRC... [USER@]HOST:DEST\n\nRsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon.\nIt is famous for sending only the differences between the source files and the existing files in the destination, increasing efficiency for repetitive synchronization between source and destination.\nRsync is widely used for backups and mirroring, and as an improved cp command for everyday use.\n\n\n\n\n\n\nrsync details & examples\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\ntar, zip, and unzip\n\nNAME\n  tar - a general archiving utility for creation/extraction/compression and more\n  zip - package and compress files into a ZIP archive\n  unzip - list, test and extract compressed files from a ZIP archive\n\nSYNOPSIS\n  tar --create/--extract [--file ARCHIVE] [OPTIONS] [FILE...]\n  zip [OPTIONS] [ARCHIVE] [FILE...]\n  unzip [ARCHIVE] [-d OUTPUTDIR]\n\nThe tar, zip, and unzip programs provide the ability to create, extract, and otherwise manipulate archives of files, where an archive of files is simply a file that stores a collection of other files.\n\n\n\n\n\n\ntar, zip, and unzip details & examples\n\n\nThis section was adapted from www.gnu.org (“GNU Tar 1.35: 2 Tutorial Introduction to Tar” n.d.).\nAll three tools are used for efficient storage, transfer, and backup of collections of files, particularly large files via compression.\nThe specific usecases for tar/zip/unzip are similar but vary slightly:\n\ntar:\n\ndefault: create/extract an uncompressed archive (.tar) of a collection of files\nwith --gzip/-z: create/extract a compressed archive (.tar.gz) of a collection of files\nwith --bzip2/-j: create/extract a compressed archive (.tar.bz2) of a collection of files\n\nzip:\n\ncreate a compressed collection of files (.zip)\n\nunzip:\n\nextract a compressed collection of files (.zip)\n\n\nOperations\nThere are three main operations of interest for archiving programs:\n\ncreate: create a new archive (.zip, .tar, .tar.gz, tar.bz2)\nextract: extract the files of an archive to a directory\n\nExamples of each follow below:\n\nCreateExtract\n\n\n# Assume you have a directory called music/ and three folders inside it:\n$ tree music\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Create an uncompressed archive (.tar) of all three files\n$ tar --create --file=collection.tar music\n\n# Creates a compressed archive (.zip, .tar.gz, .tar.bz2)\n$ zip -r collection.zip music\n$ tar --create --gzip --file=collection.tar.gz music\n$ tar --create --bzip2 --file=collection.tar.bz2 music\n\n# tar has shorthand versions of the above parameters\n$ tar -c -f collection.tar music\n$ tar -c -z -f collection.tar.gz music\n$ tar -cjf collection.tar.bz2 music\n\n\n\n\n\n\n\nImportant\n\n\nWhen using --create or -c, tar will overwrite current contents of the file named by -f. To add files to an existing archive, you need to use --append or -r.\n\n\n\n\n\n\n# Assume you have the archives from the Create example:\n$ tar --list collection.tar\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Extract all files from an uncompressed archive (.tar) to the current directory\n$ tar --extract --file=collection.tar\n\n# Extract all files from a compressed archive (.zip, .tar.gz, .tar.bz2) to the current directory\n$ unzip collection.zip\n$ tar --extract --gzip --file=collection.tar.gz\n$ tar --extract --bzip2 --file=collection.tar.bz2\n\n# Extract all files from a compressed archive, specifying a different output directory\n$ unzip collection.zip -d ~/some-folder\n$ tar --extract --gzip --file=collection.tar.gz --directory ~/music\n$ tar --extract --bzip2 --file=collection.tar.bz2 --directory /tmp/music\n\n# tar has shorthand versions of the above parameters\n$ tar -x -f collection.tar\n$ tar -x -z -f collection.tar.gz -C ~/music\n$ tar -xjf collection.tar.bz2 -C /tmp/music\n\n\n\nEach of these operations is mutually exclusive, which makes some sense. You cannot create and extract an archive at the same time, that doesn’t make sense!\n\n\n\nYou can read more:\n\nthe usecases and history of tar at (gnu.org)\nA helpful comparison between tar and zip (stackoverflow)\nA reallyy thorough breakdown of compression in tar and zip (stackoverflow)\n\ngit\n\nNAME\n  git - the stupid content tracker\n\nSYNOPSIS\n  git &lt;command&gt; [&lt;args&gt;]\n\nGit is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.\nSee man 7 gittutorial to get started, then see man 7 giteveryday for a useful minimum set of commands.\n\n\n\n\n\n\ngit details & examples\n\n\n\nThere’s nothing here yet… stay tuned!\n\n\n\n\n\n\n\n“GNU Tar 1.35: 2 Tutorial Introduction to Tar.” n.d. Accessed January 31, 2025. https://www.gnu.org/software/tar/manual/html_chapter/Tutorial.html.\n\n\n“How-To: Redirection and Process Substitution - Linux - SS64.com.” n.d. Accessed January 31, 2025. https://ss64.com/bash/syntax-redirection.html."
  },
  {
    "objectID": "notes/bash-essentials/sort-uniq.html",
    "href": "notes/bash-essentials/sort-uniq.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/inputrc.html",
    "href": "notes/bash-essentials/inputrc.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/head-tail.html",
    "href": "notes/bash-essentials/head-tail.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This companion site for the 420-6P3 course includes:\n\n\nLecture slides / documents\nExercises\nReferences & Resources\n\n\nWebsite accessible at john-abbott-college.github.io/6P3-Notes\n\n\nThis course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands.\n\n\n\n\nExperience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup).\n\n\n\n\nThis webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Home",
    "section": "",
    "text": "This course will introduce students to the principles of the Internet of Things (IoT). Students will use Linux and Python to program a Raspberry Pi in order to read data from sensors and control actuators.\nBy the end of the course, students build and deploy an IoT product that is securely connected to the Azure ecosystem in order to collect and analyse telemetry data as well as respond to remote commands."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Home",
    "section": "",
    "text": "Experience using Object Oriented Programming to create applications in any language.\nFamiliarity using the Bash shell and basic Linux CLI.\nFamiliarity with Python.\nA Raspberry Pi with various sensors and actuators (see page Hardware List).\nA Microsoft Azure account: create a free Azure for Students account if necessary.\nVS Code configured for Python programming and remote development (see page Dev Setup)."
  },
  {
    "objectID": "index.html#source-code",
    "href": "index.html#source-code",
    "title": "Home",
    "section": "",
    "text": "This webpage is written in Markdown using the Quarto framework. The website is hosted via GitHub Pages\nSource code is open source and available on GitHub.\n\n\nCreate a local copy of these notes:\n\nInstall Quarto for your system\nClone the course GitHub repository.\nPreview the website:\nquarto preview .\n\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. See the Copyright statement on the course webpage."
  },
  {
    "objectID": "about/syllabus/index.html",
    "href": "about/syllabus/index.html",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#logistics",
    "href": "about/syllabus/index.html#logistics",
    "title": "Syllabus",
    "section": "",
    "text": "Room, times, etc.: see Course Outline\nOffice: Penfield 311\nOffice hours: Mon/Fri 11:00 - 12:30pm or so\nEmail: michael DOT haaf AT johnabbott DOT qc DOT ca\nCourse webpage: This website for all content, Moodle for assignment/project/quiz submissions.\n\n\n\n\n\n\nForgive me the smarmy comic, this is usually true…\n\n\n\n\n\nTeams - For communicating (fastest, most reliable that I will check it same-day)\nMIO - For communicating (non-time-critical)\nEmail - For communicating (time-critical). Will aim for &lt;24hr response.\nMoodle - For receiving & submitting exercises/assignments/project and getting marks\n\n\n\n\n\n45% Assignments and Labs\n20% Test (first week of April)\n35% Project Milestones"
  },
  {
    "objectID": "about/syllabus/index.html#course-material",
    "href": "about/syllabus/index.html#course-material",
    "title": "Syllabus",
    "section": "2 Course material",
    "text": "2 Course material\nThere are no required textbooks for this course – this website will contain all of the content that you need to complete course deliverables. Additionally, each lecture will contain references to additional resources for exploring each topic in further detail beyond the scope of the course."
  },
  {
    "objectID": "about/calendar/index.html",
    "href": "about/calendar/index.html",
    "title": "Calendar",
    "section": "",
    "text": "This is the authoritative calendar for content covered in class, and for content you should expect to see covered as we continue through the course.\nYou can compare this calendar with the calendar from the Course Outline to see where this course has deviated from the original outline."
  },
  {
    "objectID": "about/calendar/index.html#deliverables",
    "href": "about/calendar/index.html#deliverables",
    "title": "Calendar",
    "section": "1 Deliverables",
    "text": "1 Deliverables\n\nLab 0: Due January 31 (Demo: in-class. Code: end of day 11:59pm)"
  },
  {
    "objectID": "about/calendar/index.html#lectures",
    "href": "about/calendar/index.html#lectures",
    "title": "Calendar",
    "section": "2 Lectures",
    "text": "2 Lectures\n\nJan 20: Introduction to course\nJan 24: Setting up developer environment\nJan 27: Review bash, begin Lab 0\nJan 31:"
  },
  {
    "objectID": "about/this-site/index.html",
    "href": "about/this-site/index.html",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-content",
    "href": "about/this-site/index.html#course-content",
    "title": "About this website",
    "section": "",
    "text": "Course content, both for lectures and assignments, has been adapted by me from a variety of sources. This section serves the purpose of both acknowledging these references as well as pointing the way for curious students to begin investigating further into course material than we had time to cover.\n\n\nAll course content was either written by Mauricio Buschinelli, Michael Haaf, or explicitly adapted from external resources with attributions made clear. This course content retains the licenses of the original works where relevant, and is otherwise licensed under the Creative Commons Attribution 4.0 International License.\n\nTerms of use\nYou are free to:\n\nShare: copy and redistribute the material in any medium or format\nAdapt: remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nCreative Commons Attribution 4.0 International License"
  },
  {
    "objectID": "about/this-site/index.html#course-website",
    "href": "about/this-site/index.html#course-website",
    "title": "About this website",
    "section": "2 Course website",
    "text": "2 Course website\nDetails about how this website was built follow.\n\n2.1 Colophon\n\n\n\n\n\nFrom Wikipedia: In publishing, a colophon is a brief statement containing information about the publication of a book… Some web pages also have colophons, which frequently contain (X)HTML, CSS, or usability standards compliance information and links to website validation tests.\n\n\n\nMarkup: Markdown\nFramework: Quarto\nDeployment: GitHub Pages\n\nYou can follow along directly with course updates at the course repository."
  },
  {
    "objectID": "notes/bash-essentials/cd-ls.html",
    "href": "notes/bash-essentials/cd-ls.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "0.0.1 cd\nUseful shorthands for cd to know:\n# Change to user home directory \n# (usually: /home/username)\n$ cd ~\n\n# WSL: Change to Windows mounted directory\n$ cd /mnt/c/\n\n# Return to previous directory\n$ cd -    # in this case, /home/username\n\n\n0.0.2 ls\nUseful ls options:\n-l                     use a long listing format\n-a, --all              do not ignore entries starting with .\n-d, --directory        list directories themselves, not their contents\n-s, --size             print the allocated size of each file, in blocks\n-t                     sort by time, newest first; see --time\n-h, --human-readable   with -l and -s, print sizes like 1K 234M 2G etc.\n    --si               likewise, but use powers of 1000 not 1024\n-R, --recursive        list subdirectories recursively\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/tree-tee.html",
    "href": "notes/bash-essentials/tree-tee.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/tr-cut.html",
    "href": "notes/bash-essentials/tr-cut.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/bashrc.html",
    "href": "notes/bash-essentials/bashrc.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/tar.html",
    "href": "notes/bash-essentials/tar.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "This section was adapted from www.gnu.org [@gnu_2023].\nAll three tools are used for efficient storage, transfer, and backup of collections of files, particularly large files via compression.\nThe specific usecases for tar/zip/unzip are similar but vary slightly:\n\ntar:\n\ndefault: create/extract an uncompressed archive (.tar) of a collection of files\nwith --gzip/-z: create/extract a compressed archive (.tar.gz) of a collection of files\nwith --bzip2/-j: create/extract a compressed archive (.tar.bz2) of a collection of files\n\nzip:\n\ncreate a compressed collection of files (.zip)\n\nunzip:\n\nextract a compressed collection of files (.zip)\n\n\n\n0.0.1 Operations\nThere are three main operations of interest for archiving programs:\n\ncreate: create a new archive (.zip, .tar, .tar.gz, tar.bz2)\nextract: extract the files of an archive to a directory\n\nExamples of each follow below:\n\n\n\n\n\n\nImportant\n\n\n\nWhen using --create or -c, tar will overwrite current contents of the file named by -f. To add files to an existing archive, you need to use --append or -r.\n\n\nCreateExtract\n\n\n# Assume you have a directory called music/ and three folders inside it:\n$ tree music\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Create an uncompressed archive (.tar) of all three files\n$ tar --create --file=collection.tar music\n\n# Creates a compressed archive (.zip, .tar.gz, .tar.bz2)\n$ zip -r collection.zip music\n$ tar --create --gzip --file=collection.tar.gz music\n$ tar --create --bzip2 --file=collection.tar.bz2 music\n\n# tar has shorthand versions of the above parameters\n$ tar -c -f collection.tar music\n$ tar -c -z -f collection.tar.gz music\n$ tar -cjf collection.tar.bz2 music\n\n\n\n# Assume you have the archives from the Create example:\n$ tar --list collection.tar\nmusic/\n├── blues\n│   └── nina-simone\n├── folk\n│   └── phil-ochs\n└── jazz\n    └── charles-mingus\n\n# Extract all files from an uncompressed archive (.tar) to the current directory\n$ tar --extract --file=collection.tar\n\n# Extract all files from a compressed archive (.zip, .tar.gz, .tar.bz2) to the current directory\n$ unzip collection.zip\n$ tar --extract --gzip --file=collection.tar.gz\n$ tar --extract --bzip2 --file=collection.tar.bz2\n\n# Extract all files from a compressed archive, specifying a different output directory\n$ unzip collection.zip -d ~/some-folder\n$ tar --extract --gzip --file=collection.tar.gz --directory ~/music\n$ tar --extract --bzip2 --file=collection.tar.bz2 --directory /tmp/music\n\n# tar has shorthand versions of the above parameters\n$ tar -x -f collection.tar\n$ tar -x -z -f collection.tar.gz -C ~/music\n$ tar -xjf collection.tar.bz2 -C /tmp/music\n\n\n\nEach of these operations is mutually exclusive, which makes some sense. You cannot create and extract an archive at the same time, that doesn’t make sense!\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/bash-essentials/find-grep.html",
    "href": "notes/bash-essentials/find-grep.html",
    "title": "{{< var course.title >}}",
    "section": "",
    "text": "There’s nothing here yet… stay tuned!\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  },
  {
    "objectID": "notes/index.html",
    "href": "notes/index.html",
    "title": "Course Notes",
    "section": "",
    "text": "Default viewTable viewGrid view\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n\n\n\n2025-01-20\n\n\n2 min\n\n\n2025-01-31\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n\n\n\n2025-01-20\n\n\n3 min\n\n\n2025-01-31\n\n\n\n\n\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects. \n\n\n\n\n\n2025-01-31\n\n\n7 min\n\n\n2025-01-31\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nModified\n\n\nTitle\n\n\nSubtitle\n\n\nReading Time\n\n\n\n\n\n\n2025-01-20\n\n\n2025-01-31\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n2 min\n\n\n\n\n2025-01-20\n\n\n2025-01-31\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n3 min\n\n\n\n\n2025-01-31\n\n\n2025-01-31\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects. \n\n\n7 min\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nCourse software\n\n\nThe essential software that will be used for development during the course.\n\n\n2 min\n\n\n\n2025-01-20\n\n\n\n\n\n2025-01-31\n\n\n\n\n\n\n\n\n\n\nCourse Hardware\n\n\nList of hardware available for the course as well as their respective specifications and documentation.\n\n\n3 min\n\n\n\n2025-01-20\n\n\n\n\n\n2025-01-31\n\n\n\n\n\n\n\n\n\n\nBash essentials\n\n\nTips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects.\n\n\n7 min\n\n\n\n2025-01-31\n\n\n\n\n\n2025-01-31\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n Back to topReuseCC BY-NC 4.0. ©2022-25 Mauricio Buschinelli & Michael Haaf.\n(View License)"
  }
]