---
title: Azure CLI Cheatsheet
subtitle: "Reference for common Azure commands"
date: 2024-04-21
---

## Azure CLI Cheatsheet

Here is a list of commands we'll commonly use with Azure CLI.

### Requirements

- Azure CLI is installed: see [Azure CLI Installation Instructions](/notes/azure-features/#azure-cli)
- Azure IoT extension enabled: `az extension add --name azure-iot`

You can check that both requirements are met with the command `az --version`.

## Create a Simulated Device

You can "simulate" an IoT Device (that is, create a temporary stream that sends IoT messages similar to real IoT Devices)
using the commands below:

```bash
# Create a device with the name "simDevice"
$ az iot hub device-identity create -d simDevice -n {YourIoTHubName}

# Begin device simulation
$ az iot device simulate -d simDevice -n {YourIoTHubName}
```

::: {.callout-note .column-margin}
The `az iot device simulate` command takes a minute to run.
Use [Bash Process Control keyboard shortcuts](/notes/bash-essentials/#process-control)
to suspend, resume, scroll through the output, etc.!
:::

By default, this command will:

- Send D2C messages with a payload of `Ping from Az CLI IoT Extension`
- Automatically receive and acknowledge C2D messages.

See `az iot device simulate`
[documentation for details](https://learn.microsoft.com/en-us/cli/azure/iot/device?view=azure-cli-latest#az-iot-device-simulate).

## Monitor Messages

You can monitor all actions in an Azure IOT Hub using the `az iot hub monitor-events` command:

::: {.callout-note .column-margin}
[Bash Process Control keyboard shortcuts](/notes/bash-essentials/#process-control)
and [Bash redirect](/notes/bash-essentials/#redirection-and-pipes) commands are useful for 
pausing/continuing/scrolling/parsing the `az iot hub monitor-events` command.
:::

```bash
# List all message details for all devices.
$ az iot hub monitor-events --output table -p all -n {YourIoTHubName}

# List message details for a specific device:
$ az iot hub monitor-events --output table --device-id {YourDevice} --hub-name {YourIoTHubName}
```

See `az iot hub monitor-events`
[documentation for details](https://learn.microsoft.com/en-us/cli/azure/iot/device?view=azure-cli-latest#az-iot-hub-monitor-events).


## Connection Strings

### IoT Hub

See detailed documentation at
[az iot hub connection-string](https://learn.microsoft.com/en-us/cli/azure/iot/hub/connection-string?view=azure-cli-latest)

#### IoT Hub Owner String

Be advised: this connection string provides the highest level of access.

```bash
az iot hub connection-string  show --hub-name {YourIoTHubName}
```

#### IoT Hub Service String

Recommended level of access for external applications:

```bash
az iot hub connection-string show --policy-name service --hub-name {YourIoTHubName} --output table
```

#### EventHub Compatible String

Show the eventhub compatible connection string of the given IoT Hub's default
eventhub:

```bash
az iot hub connection-string show -n MyIotHub --default-eventhub
```

### Device Strings

Manage IoT device's connection string with
[az iot hub device-identity connection-string show](https://learn.microsoft.com/en-us/cli/azure/iot/hub/device-identity/connection-string?view=azure-cli-latest#az-iot-hub-device-identity-connection-string-show)

```bash
az iot hub device-identity connection-string show --device-id {YourDevice}
```

## Device Commands

### Send C2D Message from Simulated Device

Includes custom key, value properties.
[See documentation](https://learn.microsoft.com/en-us/cli/azure/iot/device/c2d-message?view=azure-cli-latest#az-iot-device-c2d-message-send).

```bash
az iot device c2d-message send -d simDevice --data "Hello World" --props "key0=value0;key1=value1" -n {YourIoTHubName}
```

### Invoke Direct Method on Device

```bash
az iot hub invoke-device-method --mn MySampleMethod -d simDevice -n {YourIoTHubName}
```

### Update Device Twin Properties

```bash
az iot hub device-twin update -d simDevice --desired '{"conditions":{"temperature":{"warning":98, "critical":107}}}' -n {YourIoTHubName}
```

### Get Device Twin Properties

```bash
az iot hub device-twin show -d simDevice --query properties.reported -n {YourIoTHubName}
```
