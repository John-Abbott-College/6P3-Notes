---
title: Azure CLI Cheatsheet
subtitle: "Reference for common Azure commands"
date: 2025-04-21
---

## Azure CLI Cheatsheet

Here is a list of commands we'll commonly use with Azure CLI.

### Requirements

- Azure CLI is installed: see [Azure CLI Installation Instructions](/notes/azure-features/#azure-cli)
- Azure IoT extension enabled: `az extension add --name azure-iot`

You can check that both requirements are met with the command `az --version`.

## Create a Simulated Device

You can "simulate" an IoT Device (that is, create a temporary stream that sends IoT messages similar to real IoT Devices)
using the commands below:

```bash
# It's convenient to store these names in environment variables to re-use them
$ export IOT_DEVICE_NAME=simDevice
$ export IOTHUB_NAME=YourIoTHubName

# Create a device with the name "simDevice"
$ az iot hub device-identity create -d ${IOT_DEVICE_NAME} -n ${IOTHUB_NAME}

# Begin device simulation
$ az iot device simulate -d ${IOT_DEVICE_NAME} -n ${IOTHUB_NAME}
```

::: {.callout-note .column-margin}
The `az iot device simulate` command takes a minute to run.
Use [Bash Process Control keyboard shortcuts](/notes/bash-essentials/#process-control)
to suspend, resume, scroll through the output, etc.!
:::

By default, this command will:

- Send D2C messages with a payload of `Ping from Az CLI IoT Extension`
- Automatically receive and acknowledge C2D messages.

See `az iot device simulate`
[documentation for details](https://learn.microsoft.com/en-us/cli/azure/iot/device?view=azure-cli-latest#az-iot-device-simulate).

## Monitor Messages

You can monitor all actions in an Azure IOT Hub using the `az iot hub monitor-events` command:

::: {.callout-note .column-margin}
[Bash Process Control keyboard shortcuts](/notes/bash-essentials/#process-control)
and [Bash redirection and pipes](/notes/bash-essentials/#redirection-and-pipes) are useful for
pausing/continuing/scrolling/parsing the `az iot hub monitor-events` command.
:::

```bash
# List all message details for all devices.
$ az iot hub monitor-events --output table -p all -n ${IOTHUB_NAME}

# List message details for a specific device:
$ az iot hub monitor-events --output table --device-id ${IOT_DEVICE_NAME} --hub-name ${IOTHUB_NAME}
```

See `az iot hub monitor-events`
[documentation for details](https://learn.microsoft.com/en-us/cli/azure/iot/device?view=azure-cli-latest#az-iot-hub-monitor-events).

## Device Commands

### Send C2D Message to Simulated Device

The `az iot device c2d-message send` command sends a **cloud-to-device** message from your IoT hub to an IoT device.
The message can include a **data** string, representing a **payload** for the command, and a set of key-value pairs, representing command **properties**.

```bash
az iot device c2d-message send -d ${IOT_DEVICE_NAME} --data "Hello World" --props "key0=value0;key1=value1" -n ${IOTHUB_NAME}
```

If `simDevice` is the default simulated device as seen in the [Create a Simulated Device](#create-a-simulated-device) section,
then you should see the following log printed when a `c2d-message` is sent to it:

```bash
C2D Message Handler [Received C2D message]:
{ 'Message Properties': { 'content_encoding': 'utf-8',
                          'key0': 'value0',
                          'key1': 'value1',
                          'message_id': '1bbb2dd3-7b24-4e62-ab3a-79a8b13cb1fe'},
  'Payload': 'Hello World',
  'Topic': '/devices/simDevice/messages/devicebound'}
```

Note that the keys, values, and payload are set by the `--props` and `--data` arguments of the `c2d-message` command.

See [az iot device c2d-message send documentation](https://learn.microsoft.com/en-us/cli/azure/iot/device/c2d-message?view=azure-cli-latest#az-iot-device-c2d-message-send)
for more details.

### Invoke Direct Method on Device

The `az iot hub invoke-device-method` command calls a method (specified by name) on a chosen device, and returns a payload.

```bash
az iot hub invoke-device-method --mn ${METHOD_NAME} -d ${IOT_DEVICE_NAME} -n ${IOTHUB_NAME}
```

If `simDevice` is the default simulated device as seen in the [Create a Simulated Device](#create-a-simulated-device) section,
then you should see the following log printed when the `SetTelemetryInterval` direct method is invoked:

::: {.panel-tabset}

## Device console

```bash
Method Request Handler [Received direct method invocation request]:
{ 'Device Id': 'simDevice',
  'Method Request Id': '1',
  'Method Request Name': 'SetTelemetryInterval',
  'Method Request Payload': {}}
```

## Service console

```json
{
  "payload": {
    "methodName": "SetTelemetryInterval",
    "methodRequestId": "1",
    "methodRequestPayload": {}
  },
  "status": 200
}
```

:::

### Update Device Twin Properties

```bash
az iot hub device-twin update -d ${IOT_DEVICE_NAME} --desired '{"conditions":{"temperature":{"warning":98, "critical":107}}}' -n ${IOTHUB_NAME}
```

### Get Device Twin Properties

```bash
az iot hub device-twin show -d ${IOT_DEVICE_NAME} --query properties.reported -n ${IOTHUB_NAME}
```

## Connection Strings

### IoT Hub

See detailed documentation at
[az iot hub connection-string](https://learn.microsoft.com/en-us/cli/azure/iot/hub/connection-string?view=azure-cli-latest)

#### IoT Hub Owner String

Be advised: this connection string provides the highest level of access.

```bash
az iot hub connection-string  show --hub-name ${IOTHUB_NAME}
```

#### IoT Hub Service String

Recommended level of access for external applications:

```bash
az iot hub connection-string show --policy-name service --hub-name ${IOTHUB_NAME} --output table
```

#### EventHub Compatible String

Show the eventhub compatible connection string of the given IoT Hub's default
eventhub:

```bash
az iot hub connection-string show -n ${IOTHUB_NAME} --default-eventhub
```

### Device Strings

Manage IoT device's connection string with
[az iot hub device-identity connection-string show](https://learn.microsoft.com/en-us/cli/azure/iot/hub/device-identity/connection-string?view=azure-cli-latest#az-iot-hub-device-identity-connection-string-show)

```bash
az iot hub device-identity connection-string show --device-id ${IOT_DEVICE_NAME}
```

