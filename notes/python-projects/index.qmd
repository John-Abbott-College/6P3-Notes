---
draft: true
---

## Virtual Environments

This section shows the use the python virtual environments (virt. envs.) with the `venv`
built-in tool.

`venv` is the officially recommended way to manage virt. envs. but it's not the only one.
Other tools such as [Conda](https://docs.conda.io/en/latest/index.html),
[Pipenv](https://pipenv.pypa.io/en/latest/), [Poetry](https://python-poetry.org/) and
[PDM](https://pdm.fming.dev/latest/) are other options.

> **Short guide by *python.org***
>
> - [Installing packages using pip and virtual environments](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#installing-packages-using-pip-and-virtual-environments)
>
> **Detailed guide by *RealPython.com***
>
> - \*[Python Virtual Environments: A Primer](https://realpython.com/python-virtual-environments-a-primer/)
>     \*

### Why Virtual Environments?

Python is not good at dependency management. We want to avoid:

1. **Avoid system pollution**

    - Installing packages to the OS’s global Python will mix them with OS relevant
        packages. This could have unexpected side effects on OS tasks.
    - Because of the reason above, updating OS packages might overwrite or delete global
        Python packages.

1. **Avoid project dependency conflicts**

    - Python projects might require different versions the same external library.

1. **Making projects reproducible in other environments.**

    - Since all dependencies are isolated to a specific project, it is easier to identify
        and document them.
    - Once the dependencies are "locked", the project dependency can be easily reproduced in
        other environments.

### Virtual Dependency Steps

Creating and using virtual environments involved the following steps:

1. Creation
1. Activation
1. Installing dependencies
1. Deactivation
1. Locking dependencies

### Creating

1. Create a new folder for the project (if one doesn't already exist).

1. `cd` into the folder and create a new virt. env.:

```shell
$ python3 -m venv my-env
```

Note that `my-env` is the name of your virtual environment. `venv` is a popular choice.

### Activate & Deactivate

Once created, the virt. env. needs to be activated.

```shell
# Linux
$ source my-env/bin/activate

# Windows
$ my-env/Scripts/activate.bat
```

> **Note:** You can work with virtual environments without activating it. To do this,
> [provide the full path](https://realpython.com/python-virtual-environments-a-primer/#it-runs-from-anywhere-with-absolute-paths)
> to its Python interpreter when executing a command.
>
> Typically, you’ll want to activate the virtual environment to avoid repeatedly having to
> type long paths.

To deactivate:

```shell
# Notice the shell prompt indicates a virt. env. is active
$ (my-env) deactivate
```

### Installing Packages with `pip`

Once a virtual environment is active, **packages installed with `pip` will be local to
that virtual environment.**

By default, project packages are installed in:

```
project-folder
	|- <project-venv>
	|		|- lib
	|			|- python3.X
	|					|- site-packages 
```

For example, installing `aiohttp`:

```shell
# Notice the shell prompt indicates a virt. env. is active
$ (my-env) pip install aiohttp
```

### Using `requirements.txt`

Project dependencies can be listed in a file for portability. By convention, the file
`requirements.txt` contains all the dependencies of a project created with a virtual
environment.

> This is analogous to `package.json` for Node.Js projects

**To generate** a `requirements.txt` for an existing project:

```shell
$ pip freeze > requirements.txt
```

**To install** packages from a `requirements.txt`:

```
$ pip install -r requirements.txt
```

### Moving Virtual Environments

If you move a project that uses virtual environments to a different folder, **you must
re-initialize the virtual environment.**

From the [official docs](https://docs.python.org/3/library/venv.html#how-venvs-work):

> Scripts installed in environments contain the absolute paths to their environment’s
> interpreters.
>
> - Because of this, environments are inherently non-portable. You should always have a
>     simple means of recreating an environment (for example, have a requirements file
>     `requirements.txt`, and invoke `pip install -r requirements.txt`.

### Virtual Env Exercises

The following exercises are meant for familiarization with `venv`.

1. Compare packages installed with `pip` inside and outside of a new virtual environment
    (virt. env.):

    1. List all globally installed `pip` packages: `pip list`
    1. Create a new folder and use `venv` to create a virtual environment inside.
    1. Activate the new virt. env..
    1. List the `pip` packages as seen from inside the active virtual environment.
    1. Deactivate the new virtual environment.

1. Complete the following steps inside the virtual environment (virt. env.) you created in
    the previous question.

    1. Activate the virt. env.
    1. install the following libraries:
        - [howdoi](https://pypi.org/project/howdoi/)
        - [pyjokes](https://pyjok.es/)
    1. List all pip packages to see the extra dependencies that got installed.
    1. Have some fun using both installed packages (see their docs).
    1. Export the dependency list to `requirements.txt` by using `pip freeze`.
    1. Deactivate the virt. env.
    1. Move `requirements.txt` to one folder level above the project folder (so it's not
        deleted in the next step).
    1. Delete the project folder.

1. Create a new project and virtual environment using the `requirements.txt` from the
    previous exercise.

    1. Create a new project folder with a virtual environment inside.
    1. Move `requirements.txt` inside the new project folder.
    1. Install project packages using `requirements.txt`

