<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-8ea72dc5fed832574809a9c94082fbbb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.40">

  <meta name="dcterms.date" content="2025-01-31">
  <title>{{&lt; var course.title &gt;}} – Bash essentials</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
    /* CSS for citations */
    div.csl-bib-body { }
    div.csl-entry {
      clear: both;
      margin-bottom: 0em;
    }
    .hanging-indent div.csl-entry {
      margin-left:2em;
      text-indent:-2em;
    }
    div.csl-left-margin {
      min-width:2em;
      float:left;
    }
    div.csl-right-inline {
      margin-left:2em;
      padding-left:1em;
    }
    div.csl-indent {
      margin-left: 2em;
    }  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Bash essentials – Connected Objects">
<meta property="og:description" content="Tips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects.">
<meta property="og:image" content="https://john-abbott-college.github.io/6P3-Notes/notes/bash-essentials/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Bash essentials</h1>
  <p class="subtitle"></p><p>Tips for using the bash interactive shell CLI effectively. The core bash commands everyone should know. How to combine commands using pipes and redirects.</p><p></p>

<div class="quarto-title-authors">
</div>

  <p class="date">2025-01-31</p>
</section>
<section class="slide level2">

<div class="column-margin">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://tiswww.case.edu/php/chet/img/bash-logo-web.png"></p>
<figcaption><a href="https://tiswww.case.edu/php/chet/bash/bashtop.html">Image source</a></figcaption>
</figure>
</div>
</div>
</section>
<section id="using-cli-effectively" class="slide level2">
<h2>Using CLI effectively</h2>
<p>First things first: the terminal can feel awkward to use. What can we do about this?</p>
<p>Each section below is some set of tips for using the interactive bash CLI effectively.</p>
<h3 id="keyboard-shortcuts">Keyboard shortcuts</h3>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Keyboard Shortcuts: details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p><em>This section was adapted from www.ss64.com <span class="citation" data-cites="ss64_2025">(<a href="#/core-utilities" role="doc-biblioref" onclick=""><span>“How-<span>To</span>: <span>Redirection</span> and <span>Process</span> <span>Substitution</span> - <span>Linux</span> - <span>SS64</span>.com”</span> n.d.</a>)</span>.</em></p>
<h4 id="completions">Completions</h4>
<p>Use <code>TAB</code> completion for file/directory names. Type just enough characters to uniquely identify the item.</p>
<p>For example, to move to a directory <code>sample1</code>; Type <code>cd sam</code>. Then press <code>TAB</code> and <code>ENTER</code>.</p>
<h4 id="moving-the-cursor">Moving the cursor</h4>
<ul>
<li><code>Ctrl+a</code>: Go to the beginning of the line (Home).</li>
<li><code>Ctrl+e</code>: Go to the End of the line (End).</li>
<li><code>Ctrl+p</code>: Previous command (Up arrow).</li>
<li><code>Ctrl+n</code>: Next command (Down arrow).</li>
<li><code>Alt+b</code>: Back (left) one word.</li>
<li><code>Alt+f</code>: Forward (right) one word.</li>
<li><code>Ctrl+f</code>: Forward one character.</li>
<li><code>Ctrl+b</code>: Backward one character.</li>
</ul>
<h4 id="while-using-man-or-command---help-less">While using <code>man</code> or <code>command --help | less</code></h4>
<ul>
<li><code>k</code>: Scroll up one line</li>
<li><code>j</code>: Scroll down one line</li>
<li><code>Ctrl+u</code>: Page up</li>
<li><code>Ctrl+d</code>: Page down</li>
<li><code>/</code>: Begin forward search</li>
<li><code>?</code>: Begin reverse search</li>
<li><code>n</code>/<code>N</code>: Find next/previous match</li>
<li><code>q</code>: close the <code>less</code> pager</li>
</ul>
<h4 id="editing">Editing</h4>
<ul>
<li><code>Ctrl+L</code>: Clear the Screen, similar to the clear command.</li>
<li><code>Alt+Del</code>: Delete the Word before the cursor.</li>
<li><code>Alt+d</code>: Delete the Word after the cursor.</li>
<li><code>Ctrl+d</code>: Delete character under the cursor.</li>
<li><code>Ctrl+h</code>: Delete character before the cursor (Backspace).</li>
<li><code>Ctrl+w</code>: Cut the Word before the cursor to the clipboard.</li>
<li><code>Ctrl+k</code>: Cut the Line after the cursor to the clipboard.</li>
<li><code>Ctrl+u</code>: Cut/delete the Line before the cursor to the clipboard.</li>
<li><code>Alt+t</code>: Swap current word with previous.</li>
<li><code>Ctrl+t</code>: Swap the last two characters before the cursor (typo).</li>
<li><code>ctrl+y</code>: Paste the last thing to be cut (yank).</li>
<li><code>Alt+u</code>: UPPER capitalize every character from the cursor to the end of the current word.</li>
<li><code>Alt+l</code>: Lower the case of every character from the cursor to the end of the current word.</li>
<li><code>Alt+c</code>: Capitalize the character under the cursor and move to the end of the word.</li>
<li><code>Alt+r</code>: Cancel the changes and put back the line as it was in the history (revert).</li>
<li><code>ctrl+_</code>: Undo.</li>
</ul>
<h4 id="special-keys">Special keys</h4>
<ul>
<li><code>Ctrl+v</code> tells the terminal to not interpret the following character
<ul>
<li>so <code>Ctrl+v</code> <code>TAB</code> will display a tab character rather than attempting completion.</li>
<li>similarly <code>Ctrl+v</code> <code>ENTER</code> will display the escape sequence for the Enter key: <code>^M</code></li>
</ul></li>
</ul>
<h4 id="history">History</h4>
<ul>
<li><code>Ctrl+r</code>: Recall the last command including the specified character(s).</li>
<li><code>Ctrl+p</code>: Previous command in history (walk back).</li>
<li><code>Ctrl+n</code>: Next command in history (walk forward).</li>
<li><code>Ctrl+o</code>: Execute the command found via <code>Ctrl+r</code> or <code>Ctrl+s</code> <code>Ctrl+o</code></li>
<li><code>Ctrl+g</code>: Escape from history searching mode.</li>
</ul>
<h4 id="process-control">Process Control</h4>
<ul>
<li><code>Ctrl+c</code>: Interrupt/Kill whatever you are running (SIGINT).</li>
<li><code>Ctrl+l</code>: Clear the screen.</li>
<li><code>Ctrl+s</code>: Stop output to the screen (for long running verbose commands). Then use PgUp/PgDn for navigation.</li>
<li><code>Ctrl+q</code>: Allow output to the screen (if previously stopped using command above).</li>
<li><code>Ctrl+d</code>: Send an EOF marker, unless disabled by an option, this will close the current shell (EXIT).</li>
<li><code>Ctrl+z</code>: Send the signal SIGTSTP to the current task, which suspends it. To return to it later enter <code>fg 'process name'</code></li>
</ul>
</div>
</div>
</div>
<h3 id="configuration">Configuration</h3>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>.bashrc</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>.inputrc</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
</section>
<section id="bare-necessities" class="slide level2">
<h2>Bare necessities</h2>
<p>The following sections explain the purpose of each command and show a few use cases and useful options.</p>
<p>These are commands you probably already know – if you don’t, you’ll know by the end of <code>lab-0</code>, as you’ll need them all!</p>
<h3 id="getting-around-cd-and-ls">Getting around: <code>cd</code> and <code>ls</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><a></a><span class="ex">NAME</span></span>
<span id="cb1-2"><a></a>  <span class="bu">cd</span> <span class="at">-</span> change the current directory</span>
<span id="cb1-3"><a></a>  <span class="fu">ls</span> <span class="at">-</span> list directory contents</span>
<span id="cb1-4"><a></a></span>
<span id="cb1-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb1-6"><a></a>  <span class="bu">cd</span> <span class="pp">[</span><span class="ss">DIR</span><span class="pp">]</span></span>
<span id="cb1-7"><a></a>  <span class="fu">ls</span> <span class="pp">[</span><span class="ss">OPTION</span><span class="pp">]</span>... <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>cd</code> &amp; <code>ls</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<h4 id="cd"><code>cd</code></h4>
<p>Useful shorthands for <code>cd</code> to know:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><a></a><span class="co"># Change to user home directory </span></span>
<span id="cb2-2"><a></a><span class="co"># (usually: /home/username)</span></span>
<span id="cb2-3"><a></a><span class="ex">$</span> cd ~</span>
<span id="cb2-4"><a></a></span>
<span id="cb2-5"><a></a><span class="co"># WSL: Change to Windows mounted directory</span></span>
<span id="cb2-6"><a></a><span class="ex">$</span> cd /mnt/c/</span>
<span id="cb2-7"><a></a></span>
<span id="cb2-8"><a></a><span class="co"># Return to previous directory</span></span>
<span id="cb2-9"><a></a><span class="ex">$</span> cd <span class="at">-</span>    <span class="co"># in this case, /home/username</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h4 id="ls"><code>ls</code></h4>
<p>Useful <code>ls</code> options:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><a></a><span class="ex">-l</span>                     use a long listing format</span>
<span id="cb3-2"><a></a><span class="ex">-a,</span> <span class="at">--all</span>              do not ignore entries starting with .</span>
<span id="cb3-3"><a></a><span class="ex">-d,</span> <span class="at">--directory</span>        list directories themselves, not their contents</span>
<span id="cb3-4"><a></a><span class="ex">-s,</span> <span class="at">--size</span>             print the allocated size of each file, in blocks</span>
<span id="cb3-5"><a></a><span class="ex">-t</span>                     sort by time, newest first<span class="kw">;</span> <span class="ex">see</span> <span class="at">--time</span></span>
<span id="cb3-6"><a></a><span class="ex">-h,</span> <span class="at">--human-readable</span>   with <span class="at">-l</span> and <span class="at">-s,</span> print sizes like 1K 234M 2G etc.</span>
<span id="cb3-7"><a></a>    <span class="ex">--si</span>               likewise, but use powers of 1000 not 1024</span>
<span id="cb3-8"><a></a><span class="ex">-R,</span> <span class="at">--recursive</span>        list subdirectories recursively</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
</div>
</div>
<h3 id="viewing-files-cat-and-tac">Viewing files: <code>cat</code> and <code>tac</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><a></a><span class="ex">NAME</span></span>
<span id="cb4-2"><a></a>  <span class="fu">cat</span> <span class="at">-</span> concatenate files and print on the standard output</span>
<span id="cb4-3"><a></a>  <span class="fu">tac</span> <span class="at">-</span> concatenate and print files in reverse</span>
<span id="cb4-4"><a></a></span>
<span id="cb4-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb4-6"><a></a>  <span class="fu">cat</span> <span class="pp">[</span><span class="ss">OPTION</span><span class="pp">]</span>... <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span>
<span id="cb4-7"><a></a>  <span class="fu">tac</span> <span class="pp">[</span><span class="ss">OPTION</span><span class="pp">]</span>... <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<h3 id="creating-files-touch-and-mkdir">Creating files: <code>touch</code> and <code>mkdir</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><a></a><span class="ex">NAME</span></span>
<span id="cb5-2"><a></a>  <span class="fu">touch</span> <span class="at">-</span> Update the modification times of each <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span> to the current time.</span>
<span id="cb5-3"><a></a>          <span class="ex">Creates</span> the files if they do not exist.</span>
<span id="cb5-4"><a></a>  <span class="fu">mkdir</span> <span class="at">-</span> Create the given DIRECTORY<span class="er">(</span><span class="ex">ies</span><span class="kw">)</span> <span class="cf">if</span> <span class="ex">they</span> do not exist</span>
<span id="cb5-5"><a></a></span>
<span id="cb5-6"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb5-7"><a></a>  <span class="fu">touch</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span>
<span id="cb5-8"><a></a>  <span class="fu">mkdir</span> <span class="pp">[-</span><span class="ss">p/</span><span class="pp">--</span><span class="ss">parents</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">DIRECTORY</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<h3 id="moving-files-mv-and-cp">Moving files: <code>mv</code> and <code>cp</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><a></a><span class="ex">NAME</span></span>
<span id="cb6-2"><a></a>  <span class="fu">mv</span> <span class="at">-</span> Move <span class="kw">`</span><span class="ex">SOURCE</span><span class="kw">`</span> to <span class="kw">`</span><span class="ex">DEST</span><span class="kw">`</span>, or multiple <span class="kw">`</span><span class="ex">SOURCE</span><span class="kw">`</span><span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="ex">to</span> <span class="kw">`</span><span class="ex">DIRECTORY</span><span class="kw">`</span>.</span>
<span id="cb6-3"><a></a>  <span class="fu">cp</span> <span class="at">-</span> Copy SOURCE to DEST, or multiple SOURCE<span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="ex">to</span> DIRECTORY.</span>
<span id="cb6-4"><a></a></span>
<span id="cb6-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb6-6"><a></a>  <span class="fu">mv</span>  <span class="pp">[-</span><span class="ss">f/</span><span class="pp">--</span><span class="ss">force</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">i/</span><span class="pp">--</span><span class="ss">interactive</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">g/</span><span class="pp">--</span><span class="ss">progress</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">SOURCE</span><span class="pp">]</span>... <span class="pp">[</span><span class="ss">DEST</span><span class="pp">]</span></span>
<span id="cb6-7"><a></a>  <span class="fu">cp</span>  <span class="pp">[-</span><span class="ss">f/</span><span class="pp">--</span><span class="ss">force</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">i/</span><span class="pp">--</span><span class="ss">interactive</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">g/</span><span class="pp">--</span><span class="ss">progress</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">R/</span><span class="pp">--</span><span class="ss">recursive</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">SOURCE</span><span class="pp">]</span>... <span class="pp">[</span><span class="ss">DEST</span><span class="pp">]</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<h3 id="managing-permissions-chmod-and-chown">Managing permissions: <code>chmod</code> and <code>chown</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><a></a><span class="ex">NAME</span></span>
<span id="cb7-2"><a></a>  <span class="fu">chmod</span> <span class="at">-</span> Change the permissions mode of each FILE to MODE.</span>
<span id="cb7-3"><a></a>  <span class="fu">chown</span> <span class="at">-</span> Change file owner and group of each FILE to USER:GROUP</span>
<span id="cb7-4"><a></a></span>
<span id="cb7-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb7-6"><a></a>  <span class="fu">chmod</span> <span class="pp">[-</span><span class="ss">R/</span><span class="pp">--</span><span class="ss">recursive</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">MODE</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span></span>
<span id="cb7-7"><a></a>  <span class="fu">chown</span> <span class="pp">[-</span><span class="ss">R/</span><span class="pp">--</span><span class="ss">recursive</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">USER:GROUP</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<h3 id="deleting-files-rm">Deleting files: <code>rm</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><a></a><span class="ex">NAME</span></span>
<span id="cb8-2"><a></a>  <span class="fu">rm</span> <span class="at">-</span> Remove the FILE<span class="er">(</span><span class="ex">s</span><span class="kw">)</span></span>
<span id="cb8-3"><a></a></span>
<span id="cb8-4"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb8-5"><a></a>  <span class="fu">rm</span> <span class="pp">[-</span><span class="ss">f/</span><span class="pp">--</span><span class="ss">force</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">i/</span><span class="pp">--</span><span class="ss">interactive</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">r/</span><span class="pp">--</span><span class="ss">recursive</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
</section>
<section id="the-five-fingers-of-death" class="slide level2">
<h2>The five fingers of death</h2>
<div class="column-margin">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://theactionelite.com/wp-content/uploads/2019/04/GetAttachmentThumbnail.jpg"></p>
<figcaption><a href="https://theactionelite.com/five-fingers-of-death-1972-review/">Image source</a></figcaption>
</figure>
</div>
</div>
<h3 id="find-files-and-grep-content"><code>find</code> files and <code>grep</code> content</h3>
<div class="column-page-right">
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><a></a><span class="ex">NAME</span></span>
<span id="cb9-2"><a></a>  <span class="fu">find</span> <span class="at">-</span> search for files that match a given expression</span>
<span id="cb9-3"><a></a>  <span class="fu">grep</span> <span class="at">-</span> print lines in file<span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="ex">that</span> match a given pattern</span>
<span id="cb9-4"><a></a></span>
<span id="cb9-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb9-6"><a></a>  <span class="fu">find</span> <span class="pp">[</span><span class="ss">STARTING</span><span class="pp">-</span><span class="ss">POINT...</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">EXPRESSION</span><span class="pp">]</span></span>
<span id="cb9-7"><a></a>  <span class="fu">grep</span> <span class="pp">[</span><span class="ss">OPTION...</span><span class="pp">]</span> PATTERNS <span class="pp">[</span><span class="ss">FILE...</span><span class="pp">]</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>find</code> &amp; <code>grep</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="tr-characters-and-cut-fields"><code>tr</code> characters and <code>cut</code> fields</h3>
<div class="column-page-right">
<div class="sourceCode" id="cb10"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><a></a><span class="ex">NAME</span></span>
<span id="cb10-2"><a></a>  <span class="fu">tr</span> <span class="at">-</span> Translate characters matching STRING1 in stdin/FILE to STRING2 writing to stdout</span>
<span id="cb10-3"><a></a>  <span class="fu">cut</span> <span class="at">-</span> Prints specified columns from each line of stdin, writes to stdout</span>
<span id="cb10-4"><a></a></span>
<span id="cb10-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb10-6"><a></a>  <span class="fu">tr</span> <span class="pp">[</span><span class="ss">OPTION</span><span class="pp">]</span>... STRING1 STRING2</span>
<span id="cb10-7"><a></a>  <span class="fu">cut</span> <span class="pp">[-</span><span class="ss">d/</span><span class="pp">--</span><span class="ss">delimiter</span><span class="pp">]</span> [-f<span class="kw">|</span><span class="ex">--fields]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>tr</code> &amp; <code>cut</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="sort-data-and-uniq-duplicates"><code>sort</code> data and <code>uniq</code> duplicates</h3>
<div class="column-page-right">
<div class="sourceCode" id="cb11"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><a></a><span class="ex">NAME</span></span>
<span id="cb11-2"><a></a>  <span class="fu">sort</span> <span class="at">-</span> Display sorted concatenation of all FILE<span class="er">(</span><span class="ex">s</span><span class="kw">)</span><span class="bu">.</span> With no FILE, or when FILE is <span class="at">-,</span> read stdin</span>
<span id="cb11-3"><a></a>  <span class="fu">uniq</span> <span class="at">-</span> Report or omit repeated lines.</span>
<span id="cb11-4"><a></a></span>
<span id="cb11-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb11-6"><a></a>  <span class="fu">sort</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span>
<span id="cb11-7"><a></a>  <span class="fu">uniq</span> <span class="pp">[-</span><span class="ss">d/</span><span class="pp">--</span><span class="ss">repeated</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>sort</code> and <code>uniq</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="know-head-from-tail">know <code>head</code> from <code>tail</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><a></a><span class="ex">NAME</span></span>
<span id="cb12-2"><a></a>  <span class="fu">head</span> <span class="at">-</span> Print the first 10 lines of each <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span> to standard output. With no <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span>, or when <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span> is <span class="kw">`</span><span class="ex">-</span><span class="kw">`</span>, read stdin</span>
<span id="cb12-3"><a></a>  <span class="fu">tail</span> <span class="at">-</span> Print the last 10 lines of each <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span> to standard output. With no <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span>, or when <span class="kw">`</span><span class="ex">FILE</span><span class="kw">`</span> is <span class="kw">`</span><span class="ex">-</span><span class="kw">`</span>, read stdin</span>
<span id="cb12-4"><a></a></span>
<span id="cb12-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb12-6"><a></a>  <span class="fu">head</span> <span class="pp">[-</span><span class="ss">n/</span><span class="pp">--</span><span class="ss">lines</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span>
<span id="cb12-7"><a></a>  <span class="fu">tail</span> <span class="pp">[-</span><span class="ss">n/</span><span class="pp">--</span><span class="ss">lines</span><span class="pp">]</span> <span class="pp">[-</span><span class="ss">f/</span><span class="pp">--</span><span class="ss">follow</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>head</code> &amp; <code>tail</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="tree-and-tee"><code>tree</code> and <code>tee</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb13"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><a></a><span class="ex">NAME</span></span>
<span id="cb13-2"><a></a>  <span class="ex">tree</span> <span class="at">-</span> list contents of DIRECTORIES in a tree-like format.</span>
<span id="cb13-3"><a></a>  <span class="fu">tee</span> <span class="at">-</span> Copy standard input to each FILE, and also to standard output.</span>
<span id="cb13-4"><a></a></span>
<span id="cb13-5"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb13-6"><a></a>  <span class="ex">tree</span> [-L level] <span class="pp">[</span><span class="ss">DIRECTORY</span><span class="pp">]</span>...</span>
<span id="cb13-7"><a></a>  <span class="fu">tee</span> <span class="pp">[</span><span class="ss">FILE</span><span class="pp">]</span>...</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>tree</code> &amp; <code>tee</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
</section>
<section id="redirection-and-pipes" class="slide level2">
<h2>Redirection and Pipes</h2>
<p><em>This section was adapted from www.ss64.com: <a href="https://ss64.com/bash/syntax-redirection.html">How-to: Redirection and Process Substitution</a></em></p>
<div class="column-page-right">
<div class="sourceCode" id="cb14"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><a></a><span class="bu">command</span>  <span class="op">&gt;</span>  filename     Redirect command output <span class="er">(</span><span class="ex">stdout</span><span class="kw">)</span> <span class="ex">into</span> a file</span>
<span id="cb14-2"><a></a><span class="bu">command</span>  <span class="op">&gt;</span>  /dev/null    Discard stdout of command</span>
<span id="cb14-3"><a></a><span class="bu">command</span>  <span class="dv">2</span><span class="op">&gt;</span> /dev/null   Discard stderr of command</span>
<span id="cb14-4"><a></a></span>
<span id="cb14-5"><a></a><span class="bu">command</span>  <span class="op">&gt;&gt;</span> filename     Redirect command output and APPEND into a file</span>
<span id="cb14-6"><a></a><span class="bu">command</span>  <span class="op">&lt;</span>  filename     Redirect a file into a command</span>
<span id="cb14-7"><a></a></span>
<span id="cb14-8"><a></a><span class="ex">commandA</span> <span class="kw">|</span> <span class="ex">commandB</span>       Pipe stdout of commandA to commandB</span>
<span id="cb14-9"><a></a><span class="ex">commandA</span> <span class="kw">|</span> <span class="fu">tee</span> filename   Pipe stdout of commandA into filename AND stdout</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Redirection explained further</strong></p>
</div>
<div class="callout-content">
<p><em>This section was adapted from wiki.bash-hackers.org <span class="citation" data-cites="bashhackers_2023">(<a href="#/core-utilities" role="doc-biblioref" onclick=""><span>“Illustrated <span>Redirection</span> <span>Tutorial</span> [<span>Bash</span> <span>Hackers</span> <span>Wiki</span>]”</span> 2023</a>)</span></em></p>
<h4 id="stdin-stdout-stderr">stdin, stdout, stderr</h4>
<p>When Bash starts, normally, 3 file descriptors are opened, 0, 1 and 2 also known as standard input (stdin), standard output (stdout) and standard error (stderr).</p>
<p>For example, with Bash running in a Linux terminal emulator, you’ll see:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>bash</strong></pre>
</div>
<div class="sourceCode" id="cb15" data-filename="bash"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><a></a><span class="ex">$</span> lsof +f g <span class="at">-ap</span> <span class="va">$BASHPID</span> <span class="at">-d</span> 0,1,2</span>
<span id="cb15-2"><a></a><span class="ex">COMMAND</span>   PID USER   FD   TYPE FILE-FLAG DEVICE SIZE/OFF NODE NAME</span>
<span id="cb15-3"><a></a><span class="fu">bash</span>    12135 root    0u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5</span>
<span id="cb15-4"><a></a><span class="fu">bash</span>    12135 root    1u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5</span>
<span id="cb15-5"><a></a><span class="fu">bash</span>    12135 root    2u   CHR     RW,LG 136,13      0t0   16 /dev/pts/5</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>This <code>/dev/pts/5</code> is a pseudo terminal used to emulate a real terminal. Bash reads (<code>stdin</code>) from this terminal and prints via <code>stdout</code> and <code>stderr</code> to this terminal.</p>
<pre><code>                  ---       +-----------------------+
standard input   ( 0 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard output  ( 1 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard error   ( 2 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+</code></pre>
<p>When a command, a compound command, a subshell etc. is executed, it inherits these file descriptors. For instance <code>echo foo</code> will send the text <code>foo</code> to the file descriptor <code>1</code> inherited from the shell, which is connected to <code>/dev/pts/5</code>.</p>
<h4 id="output-redirection-n-file">Output Redirection <code>n&gt; file</code></h4>
<p><code>&gt;</code> is probably the simplest redirection.</p>
<p><code>echo foo &gt; file</code></p>
<p>the <code>&gt;</code> file after the command alters the file descriptors belonging to the command echo. It changes the file descriptor 1 (&gt; file is the same as 1&gt;file) so that it points to the file file. They will look like:</p>
<pre><code>                  ---       +-----------------------+
standard input   ( 0 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard output  ( 1 ) ----&gt;| file                  |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard error   ( 2 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+</code></pre>
<p>Now characters written by our command, echo, that are sent to the standard output, i.e., the file descriptor 1, end up in the file named file.</p>
<p>In the same way, <code>command 2&gt; file</code> will change the standard error and will make it point to file. For example, <code>command 2&gt; /dev/null</code> will <em>delete</em> all errors outputted by <code>command</code>:</p>
<pre><code>                  ---       +-----------------------+
standard input   ( 0 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard output  ( 1 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard error   ( 2 ) ----&gt;| /dev/null             |
                  ---       +-----------------------+</code></pre>
<h4 id="input-redirection-n-file">Input Redirection <code>n&lt; file</code></h4>
<p>When you run a command using <code>command &lt; file</code>, it changes the file descriptor <code>0</code> so that it looks like:</p>
<pre><code>                  ---       +-----------------------+
standard input   ( 0 ) &lt;----| file                  |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard output  ( 1 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+

                  ---       +-----------------------+
standard error   ( 2 ) ----&gt;| /dev/pts/5            |
                  ---       +-----------------------+</code></pre>
<p>If the command reads from stdin, it now will read from file and not from the console.</p>
<h4 id="pipes">Pipes <code>|</code></h4>
<p>What does this <code>|</code> do? Among other things, it connects the standard output of the command on the left to the standard input of the command on the right. That is, it creates a special file, a pipe, which is opened as a write destination for the left command, and as a read source for the right command.</p>
<pre><code>command:   echo foo               |                cat

 ---       +--------------+               ---       +--------------+
( 0 ) ----&gt;| /dev/pts/5   |     ------&gt;  ( 0 ) ----&gt;|pipe (read)   |
 ---       +--------------+    /          ---       +--------------+
                              /
 ---       +--------------+  /            ---       +--------------+
( 1 ) ----&gt;| pipe (write) | /            ( 1 ) ----&gt;| /dev/pts     |
 ---       +--------------+               ---       +--------------+

 ---       +--------------+               ---       +--------------+
( 2 ) ----&gt;| /dev/pts/5   |              ( 2 ) ----&gt;| /dev/pts/    |
 ---       +--------------+               ---       +--------------+</code></pre>
<p>This is possible because the redirections are set up by the shell before the commands are executed, and the commands inherit the file descriptors.</p>
</div>
</div>
</div>
</section>
<section id="core-utilities" class="slide level2 smaller scrollable">
<h2>Core utilities</h2>
<h3 id="ssh"><code>ssh</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb21"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><a></a><span class="ex">NAME</span></span>
<span id="cb21-2"><a></a>  <span class="fu">ssh</span> <span class="at">-</span> OpenSSH remote login client</span>
<span id="cb21-3"><a></a></span>
<span id="cb21-4"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb21-5"><a></a>  <span class="fu">ssh</span> [-l login_name] [-p port] DESTINATION [command <span class="pp">[</span><span class="ss">argument...</span><span class="pp">]</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p><code>ssh</code> is a program for logging into a remote machine and for executing commands on a remote machine. It is intended to provide secure encrypted communications between two untrusted hosts over an insecure network.</p>
<p>ssh connects and logs into the specified destination, which may be specified as either <code>[user@]hostname</code> or a URI of the form <code>ssh://[user@]hostname[:port]</code>.</p>
<p>If a <code>command</code> is specified, it will be executed on the remote host instead of a login shell.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>ssh</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<!-- {{< include ssh.qmd >}} -->
<p>There’heapds nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="rsync"><code>rsync</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb22"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><a></a><span class="ex">NAME</span></span>
<span id="cb22-2"><a></a>  <span class="fu">rsync</span> <span class="at">-</span> a fast, versatile, remote <span class="er">(</span><span class="ex">and</span> local<span class="kw">)</span> <span class="ex">file-copying</span> tool</span>
<span id="cb22-3"><a></a></span>
<span id="cb22-4"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb22-5"><a></a>  <span class="ex">Local:</span></span>
<span id="cb22-6"><a></a>    <span class="fu">rsync</span> <span class="pp">[</span><span class="ss">OPTION...</span><span class="pp">]</span> SRC... <span class="pp">[</span><span class="ss">DEST</span><span class="pp">]</span></span>
<span id="cb22-7"><a></a>  <span class="ex">Access</span> via remote shell:</span>
<span id="cb22-8"><a></a>    <span class="ex">Pull:</span></span>
<span id="cb22-9"><a></a>        <span class="fu">rsync</span> <span class="pp">[</span><span class="ss">OPTION...</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">USER@</span><span class="pp">]</span>HOST:SRC... <span class="pp">[</span><span class="ss">DEST</span><span class="pp">]</span></span>
<span id="cb22-10"><a></a>    <span class="ex">Push:</span></span>
<span id="cb22-11"><a></a>        <span class="fu">rsync</span> <span class="pp">[</span><span class="ss">OPTION...</span><span class="pp">]</span> SRC... <span class="pp">[</span><span class="ss">USER@</span><span class="pp">]</span>HOST:DEST</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Rsync is a fast and extraordinarily versatile file copying tool. It can copy locally, to/from another host over any remote shell, or to/from a remote rsync daemon.</p>
<p>It is famous for sending only the differences between the source files and the existing files in the destination, increasing efficiency for repetitive synchronization between source and destination.</p>
<p>Rsync is widely used for backups and mirroring, and as an improved <code>cp</code> command for everyday use.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>rsync</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<!-- {{< include rsync.qmd >}} -->
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>
<h3 id="tar-zip-and-unzip"><code>tar</code>, <code>zip</code>, and <code>unzip</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb23"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><a></a><span class="ex">NAME</span></span>
<span id="cb23-2"><a></a>  <span class="fu">tar</span> <span class="at">-</span> a general archiving utility for creation/extraction/compression and more</span>
<span id="cb23-3"><a></a>  <span class="fu">zip</span> <span class="at">-</span> package and compress files into a ZIP archive</span>
<span id="cb23-4"><a></a>  <span class="fu">unzip</span> <span class="at">-</span> list, test and extract compressed files from a ZIP archive</span>
<span id="cb23-5"><a></a></span>
<span id="cb23-6"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb23-7"><a></a>  <span class="fu">tar</span> <span class="at">--create</span>/--extract [--file ARCHIVE] <span class="pp">[</span><span class="ss">OPTIONS</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE...</span><span class="pp">]</span></span>
<span id="cb23-8"><a></a>  <span class="fu">zip</span> <span class="pp">[</span><span class="ss">OPTIONS</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">ARCHIVE</span><span class="pp">]</span> <span class="pp">[</span><span class="ss">FILE...</span><span class="pp">]</span></span>
<span id="cb23-9"><a></a>  <span class="fu">unzip</span> <span class="pp">[</span><span class="ss">ARCHIVE</span><span class="pp">]</span> [-d OUTPUTDIR]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>The <code>tar</code>, <code>zip</code>, and <code>unzip</code> programs provide the ability to create, extract, and otherwise manipulate <strong>archives</strong> of files, where an <strong>archive</strong> of files is simply a file that stores a collection of other files.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>tar</code>, <code>zip</code>, and <code>unzip</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<p><em>This section was adapted from www.gnu.org <span class="citation" data-cites="gnu_2023">(<a href="#/core-utilities" role="doc-biblioref" onclick=""><span>“<span>GNU</span> Tar 1.35: 2 <span>Tutorial</span> <span>Introduction</span> to Tar”</span> n.d.</a>)</span>.</em></p>
<p>All three tools are used for efficient <strong>storage</strong>, <strong>transfer</strong>, and <strong>backup</strong> of collections of files, particularly large files via <strong>compression.</strong></p>
<p>The specific usecases for <code>tar</code>/<code>zip</code>/<code>unzip</code> are similar but vary slightly:</p>
<ul>
<li><code>tar</code>:
<ul>
<li>default: create/extract an <em>uncompressed</em> archive (<code>.tar</code>) of a collection of files</li>
<li>with <code>--gzip/-z</code>: create/extract a <em>compressed</em> archive (<code>.tar.gz</code>) of a collection of files</li>
<li>with <code>--bzip2/-j</code>: create/extract a <em>compressed</em> archive (<code>.tar.bz2</code>) of a collection of files</li>
</ul></li>
<li><code>zip</code>:
<ul>
<li>create a compressed collection of files (<code>.zip</code>)</li>
</ul></li>
<li><code>unzip</code>:
<ul>
<li>extract a compressed collection of files (<code>.zip</code>)</li>
</ul></li>
</ul>
<h4 id="operations">Operations</h4>
<p>There are three main operations of interest for archiving programs:</p>
<ul>
<li>create: create a new archive (<code>.zip</code>, <code>.tar</code>, <code>.tar.gz</code>, <code>tar.bz2</code>)</li>
<li>extract: extract the files of an archive to a directory</li>
</ul>
<p>Examples of each follow below:</p>
<div class="panel-tabset">
<ul id="tabset-1" class="panel-tabset-tabby"><li><a data-tabby-default="" href="#tabset-1-1">Create</a></li><li><a href="#tabset-1-2">Extract</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1">
<div class="sourceCode" id="cb24"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><a></a><span class="co"># Assume you have a directory called music/ and three folders inside it:</span></span>
<span id="cb24-2"><a></a><span class="ex">$</span> tree music</span>
<span id="cb24-3"><a></a><span class="ex">music/</span></span>
<span id="cb24-4"><a></a><span class="ex">├──</span> blues</span>
<span id="cb24-5"><a></a><span class="ex">│&nbsp;&nbsp;</span> └── nina-simone</span>
<span id="cb24-6"><a></a><span class="ex">├──</span> folk</span>
<span id="cb24-7"><a></a><span class="ex">│&nbsp;&nbsp;</span> └── phil-ochs</span>
<span id="cb24-8"><a></a><span class="ex">└──</span> jazz</span>
<span id="cb24-9"><a></a>    <span class="ex">└──</span> charles-mingus</span>
<span id="cb24-10"><a></a></span>
<span id="cb24-11"><a></a><span class="co"># Create an uncompressed archive (.tar) of all three files</span></span>
<span id="cb24-12"><a></a><span class="ex">$</span> tar <span class="at">--create</span> <span class="at">--file</span><span class="op">=</span>collection.tar music</span>
<span id="cb24-13"><a></a></span>
<span id="cb24-14"><a></a><span class="co"># Creates a compressed archive (.zip, .tar.gz, .tar.bz2)</span></span>
<span id="cb24-15"><a></a><span class="ex">$</span> zip <span class="at">-r</span> collection.zip music</span>
<span id="cb24-16"><a></a><span class="ex">$</span> tar <span class="at">--create</span> <span class="at">--gzip</span> <span class="at">--file</span><span class="op">=</span>collection.tar.gz music</span>
<span id="cb24-17"><a></a><span class="ex">$</span> tar <span class="at">--create</span> <span class="at">--bzip2</span> <span class="at">--file</span><span class="op">=</span>collection.tar.bz2 music</span>
<span id="cb24-18"><a></a></span>
<span id="cb24-19"><a></a><span class="co"># tar has shorthand versions of the above parameters</span></span>
<span id="cb24-20"><a></a><span class="ex">$</span> tar <span class="at">-c</span> <span class="at">-f</span> collection.tar music</span>
<span id="cb24-21"><a></a><span class="ex">$</span> tar <span class="at">-c</span> <span class="at">-z</span> <span class="at">-f</span> collection.tar.gz music</span>
<span id="cb24-22"><a></a><span class="ex">$</span> tar <span class="at">-cjf</span> collection.tar.bz2 music</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<div class="column-margin">
<div class="callout callout-important callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Important</strong></p>
</div>
<div class="callout-content">
<p>When using <code>--create</code> or <code>-c</code>, <code>tar</code> will <strong>overwrite</strong> current contents of the file named by <code>-f</code>. To add files to an existing archive, you need to use <code>--append</code> or <code>-r</code>.</p>
</div>
</div>
</div>
</div>
</div>
<div id="tabset-1-2">
<div class="sourceCode" id="cb25"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><a></a><span class="co"># Assume you have the archives from the Create example:</span></span>
<span id="cb25-2"><a></a><span class="ex">$</span> tar <span class="at">--list</span> collection.tar</span>
<span id="cb25-3"><a></a><span class="ex">music/</span></span>
<span id="cb25-4"><a></a><span class="ex">├──</span> blues</span>
<span id="cb25-5"><a></a><span class="ex">│&nbsp;&nbsp;</span> └── nina-simone</span>
<span id="cb25-6"><a></a><span class="ex">├──</span> folk</span>
<span id="cb25-7"><a></a><span class="ex">│&nbsp;&nbsp;</span> └── phil-ochs</span>
<span id="cb25-8"><a></a><span class="ex">└──</span> jazz</span>
<span id="cb25-9"><a></a>    <span class="ex">└──</span> charles-mingus</span>
<span id="cb25-10"><a></a></span>
<span id="cb25-11"><a></a><span class="co"># Extract all files from an uncompressed archive (.tar) to the current directory</span></span>
<span id="cb25-12"><a></a><span class="ex">$</span> tar <span class="at">--extract</span> <span class="at">--file</span><span class="op">=</span>collection.tar</span>
<span id="cb25-13"><a></a></span>
<span id="cb25-14"><a></a><span class="co"># Extract all files from a compressed archive (.zip, .tar.gz, .tar.bz2) to the current directory</span></span>
<span id="cb25-15"><a></a><span class="ex">$</span> unzip collection.zip</span>
<span id="cb25-16"><a></a><span class="ex">$</span> tar <span class="at">--extract</span> <span class="at">--gzip</span> <span class="at">--file</span><span class="op">=</span>collection.tar.gz</span>
<span id="cb25-17"><a></a><span class="ex">$</span> tar <span class="at">--extract</span> <span class="at">--bzip2</span> <span class="at">--file</span><span class="op">=</span>collection.tar.bz2</span>
<span id="cb25-18"><a></a></span>
<span id="cb25-19"><a></a><span class="co"># Extract all files from a compressed archive, specifying a different output directory</span></span>
<span id="cb25-20"><a></a><span class="ex">$</span> unzip collection.zip <span class="at">-d</span> ~/some-folder</span>
<span id="cb25-21"><a></a><span class="ex">$</span> tar <span class="at">--extract</span> <span class="at">--gzip</span> <span class="at">--file</span><span class="op">=</span>collection.tar.gz <span class="at">--directory</span> ~/music</span>
<span id="cb25-22"><a></a><span class="ex">$</span> tar <span class="at">--extract</span> <span class="at">--bzip2</span> <span class="at">--file</span><span class="op">=</span>collection.tar.bz2 <span class="at">--directory</span> /tmp/music</span>
<span id="cb25-23"><a></a></span>
<span id="cb25-24"><a></a><span class="co"># tar has shorthand versions of the above parameters</span></span>
<span id="cb25-25"><a></a><span class="ex">$</span> tar <span class="at">-x</span> <span class="at">-f</span> collection.tar</span>
<span id="cb25-26"><a></a><span class="ex">$</span> tar <span class="at">-x</span> <span class="at">-z</span> <span class="at">-f</span> collection.tar.gz <span class="at">-C</span> ~/music</span>
<span id="cb25-27"><a></a><span class="ex">$</span> tar <span class="at">-xjf</span> collection.tar.bz2 <span class="at">-C</span> /tmp/music</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
</div>
</div>
<p>Each of these operations is <strong>mutually exclusive</strong>, which makes some sense. You cannot <strong>create</strong> and <strong>extract</strong> an archive at the same time, that doesn’t make sense!</p>
</div>
</div>
</div>
<p>You can read more:</p>
<ul>
<li><a href="https://www.gnu.org/software/tar/manual/html_chapter/Introduction.html#What-tar-Does">the usecases and history of tar at (gnu.org)</a></li>
<li><a href="https://stackoverflow.com/a/10540952">A helpful comparison between <code>tar</code> and <code>zip</code> (stackoverflow)</a></li>
<li><a href="https://stackoverflow.com/a/20765054">A reallyy thorough breakdown of compression in <code>tar</code> and <code>zip</code> (stackoverflow)</a></li>
</ul>
<h3 id="git"><code>git</code></h3>
<div class="column-page-right">
<div class="sourceCode" id="cb26"><pre class="sourceCode numberSource sh number-lines code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><a></a><span class="ex">NAME</span></span>
<span id="cb26-2"><a></a>  <span class="fu">git</span> <span class="at">-</span> the stupid content tracker</span>
<span id="cb26-3"><a></a></span>
<span id="cb26-4"><a></a><span class="ex">SYNOPSIS</span></span>
<span id="cb26-5"><a></a>  <span class="fu">git</span> <span class="op">&lt;</span>command<span class="op">&gt;</span> [<span class="op">&lt;</span>args<span class="op">&gt;</span>]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.</p>
<p>See <code>man 7 gittutorial</code> to get started, then see <code>man 7 giteveryday</code> for a useful minimum set of commands.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong><code>git</code> details &amp; examples</strong></p>
</div>
<div class="callout-content">
<!-- {{< include git.qmd >}} -->
<p>There’s nothing here yet… stay tuned!</p>
</div>
</div>
</div>


<div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" role="list">
<div id="ref-gnu_2023" class="csl-entry" role="listitem">
<span>“<span>GNU</span> Tar 1.35: 2 <span>Tutorial</span> <span>Introduction</span> to Tar.”</span> n.d. Accessed January 31, 2025. <a href="https://www.gnu.org/software/tar/manual/html_chapter/Tutorial.html">https://www.gnu.org/software/tar/manual/html_chapter/Tutorial.html</a>.
</div>
<div id="ref-ss64_2025" class="csl-entry" role="listitem">
<span>“How-<span>To</span>: <span>Redirection</span> and <span>Process</span> <span>Substitution</span> - <span>Linux</span> - <span>SS64</span>.com.”</span> n.d. Accessed January 31, 2025. <a href="https://ss64.com/bash/syntax-redirection.html">https://ss64.com/bash/syntax-redirection.html</a>.
</div>
<div id="ref-bashhackers_2023" class="csl-entry" role="listitem">
<span>“Illustrated <span>Redirection</span> <span>Tutorial</span> [<span>Bash</span> <span>Hackers</span> <span>Wiki</span>].”</span> 2023. <a href="https://web.archive.org/web/20230315225157/https://wiki.bash-hackers.org/howto/redirection_tutorial">https://web.archive.org/web/20230315225157/https://wiki.bash-hackers.org/howto/redirection_tutorial</a>.
</div>
</div>
</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">
<p>© Copyright 2024-2025 Michael Haaf. All rights reserved.</p>
</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': true,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("https:\/\/john-abbott-college\.github\.io\/6P3-Notes\/");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>