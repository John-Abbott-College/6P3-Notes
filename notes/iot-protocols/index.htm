<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-8ea72dc5fed832574809a9c94082fbbb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.40">

  <meta name="dcterms.date" content="2024-04-15">
  <title>{{&lt; var course.title &gt;}} – IoT Communication Protocols</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="IoT Communication Protocols – Connected Objects">
<meta property="og:description" content="How communication protocols can be optimized for device-cloud communication, i.e.&nbsp;why not everything should use HTTP">
<meta property="og:image" content="https://john-abbott-college.github.io/6P3-Notes/notes/iot-protocols/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">IoT Communication Protocols</h1>
  <p class="subtitle">How communication protocols can be optimized for device-cloud communication, i.e.&nbsp;why not everything should use HTTP</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2024-04-15</p>
</section>
<section class="slide level2">

<p>IoT devices typically exchange data with a cloud service using a specific <strong>communication protocol</strong>.</p>
<blockquote>
<p>Data gathered from sensors and sent to the cloud is called <strong>telemetry</strong>.</p>
</blockquote>
<p>This section looks at common communication protocols used in IoT with a focus on <strong>MQTT</strong>.</p>
</section>
<section id="http" class="slide level2">
<h2>HTTP</h2>
<p>So far in this course we’ve been exchanging data between our devices and Python Flask/Dash servers using HTTP.</p>
<blockquote>
<p>The default web server instantiated by the Dash python library is a thin HTTP wrapper around the Flask web server.</p>
</blockquote>
<p>HTTP is a common protocol for the web, however, some of its characteristics make it not ideal for IoT applications, as the next section explains.</p>
<h3 id="typical-http-request">Typical HTTP request</h3>
<p><img data-src="https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/images/HTTP_RequestMessageExample.png"></p>
<p class="img-info">
<a href="https://cheapsslsecurity.com/p/http2-vs-http1/"> Example of an HTTP Request </a>&nbsp; cheapsslsecurity.com.
</p>
<h3 id="typical-http-response">Typical HTTP Response</h3>
<p><img data-src="https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/images/HTTP_ResponseMessageExample.png"></p>
<p class="img-info">
<a href="https://cheapsslsecurity.com/p/http2-vs-http1/"> Example of an HTTP Response </a>&nbsp; cheapsslsecurity.com.
</p>
<p>Below is the HTTP response header for the posting of AIO data above (1 KB long)</p>
<h3 id="http-characteristics">HTTP Characteristics</h3>
<p>The following HTTP characteristics are relevant in the IoT context:</p>
<ul>
<li><strong>Request response protocol</strong>: client always has to request an update from the server.</li>
<li>Designed for <strong>large bandwidth</strong>, low delay.</li>
<li><strong>Stateless</strong>: each request is considered as the new request. Server doesn’t recognise the user by default (cookies or tokens are required).</li>
<li><strong>Resource identification</strong>: each request includes a URI (universal resource identifier).</li>
<li><strong>DNS lookup</strong>: 3-way identification handshake (overhead).</li>
<li><strong>Big protocol headers</strong>: uncompressed content transfer that is not the payload.</li>
</ul>
<p>In HTTP, the client has to be constantly “pulling” the server for new information. Pull updates are either slow (check only every few minutes) or data/power intensive (check constantly).</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://cdn-learn.adafruit.com/assets/assets/000/049/264/medium800/customer___partner_projects_adafruit_io_polling.png?1513195213"></p>
<figcaption>customer___partner_projects_adafruit_io_polling.png</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.adafruit.com/alltheiot-protocols?view=all#internet-of-toast-2977937-4"> HTTP Client constantly pulling the server for updates </a>&nbsp; HTTP Protocol, Adafruit.
</p>
<h3 id="dash-app-example">Dash app example</h3>
<p>In our dash apps, this problem showed up in the form of a strict dependency between the Dash app and the Device Controller – at each interval, the Dash app had to directly call the Device Controller “read_sensors” and “control_actuators” methods. This is fine in a simple example where it doesn’t matter that we poll the device each second, but on faster intervals, or when information is not aligned with regular intervals, this results in large inefficiencies.</p>
</section>
<section id="pubsub-communication" class="slide level2">
<h2>Pub/Sub Communication</h2>
<blockquote>
<p>The most popular communication pattern for IoT systems is a publish/subscribe (pub/sub) messaging system done via some kind of broker.</p>
</blockquote>
<p>This IoT system has two types of actors:</p>
<ul>
<li>One or more <strong>Clients</strong></li>
<li>One <strong>Broker</strong></li>
</ul>
<p>In the image below, a client device is publishing messages to the topic <code>/telemetry</code> while a client in the cloud is subscribed to the same topic.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><a href="https://github.com/microsoft/IoT-For-Beginners/blob/main/images/mqtt.png"><img data-src="https://github.com/microsoft/IoT-For-Beginners/raw/main/images/mqtt.png" alt="IoT device publishing telemetry on the /telemetry topic, and the cloud service subscribing to that topic"></a></p>
<figcaption>IoT device publishing telemetry on the /telemetry topic, and the cloud service subscribing to that topic</figcaption>
</figure>
</div>
<p>It’s very typical that any particular client is both the publisher and the subscriber.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><a href="https://github.com/microsoft/IoT-For-Beginners/blob/main/images/pub-sub.png"><img data-src="https://github.com/microsoft/IoT-For-Beginners/raw/main/images/pub-sub.png" alt="IoT devices connect to a broker and publish telemetry and subscribe to commands. Cloud services connect to the broker and subscribe to all telemetry and send commands to specific devices."></a></p>
<figcaption>IoT devices connect to a broker and publish telemetry and subscribe to commands. Cloud services connect to the broker and subscribe to all telemetry and send commands to specific devices.</figcaption>
</figure>
</div>
<p>Figures from: <a href="https://github.com/microsoft/IoT-For-Beginners/tree/main/1-getting-started/lessons/4-connect-internet">Broker and client relationship</a>, IoT for Beginners, Microsoft.</p>
<h3 id="clients">Clients</h3>
<p><strong>Clients</strong> are typically devices, applications or back-end services. They connect to the broker and publish telemetry as well as subscribe to commands.</p>
<blockquote>
<p><strong>A cloud service is an example of a client</strong>.</p>
<p>It connects to the broker and subscribes to all the telemetry messages and publishes commands either to specific devices, or to groups of devices.</p>
</blockquote>
<p>The client performs two operations:</p>
<ul>
<li><strong>Publishes information:</strong> When the client sends the data to the server.</li>
<li><strong>Subscribes to information:</strong> When the client receives the data from the server.</li>
</ul>
<h3 id="broker">Broker</h3>
<p>The Broker is typically running on a server and performs the following operations:</p>
<ul>
<li>Accepts messages from clients.</li>
<li>Processes subscribe and unsubscribe requests.</li>
<li>Forwards messages to specific clients according to subscription requests.</li>
</ul>
<blockquote>
<p>MQTT is the most popular communication protocol for IoT devices</p>
</blockquote>
</section>
<section id="mqtt" class="slide level2 scrollable">
<h2>MQTT</h2>
<p>Message Queueing Telemetry Transport, i.e.&nbsp;<a href="http://mqtt.org">MQTT</a>, is a lightweight pub/sub protocol. It was originally designed to monitor oil pipelines where connectivity could not be guaranteed.</p>
<p>One or more clients connect to a single broker, who routes messages to the interested clients.</p>
<p>MQTT manages messages <strong>asynchronously</strong> over a <strong>network socket</strong>.</p>
<p>The broker can hold and forward messages from client to client so if one gets disconnected, it will be able to fetch the message when it reconnects later.</p>
<blockquote>
<p><a href="https://engineering.fb.com/2011/08/12/android/building-facebook-messenger/">Facebook Messenger uses MQTT</a> and is the World’s largest MQTT network.</p>
<p>Infrastructure details <a href="https://engineering.fb.com/2014/10/09/production-engineering/building-mobile-first-infrastructure-for-messenger/">here</a> (nice read!).</p>
</blockquote>
<h3 id="topics-wildcards">Topics &amp; Wildcards</h3>
<p>Messages are routed using <strong>named topics</strong>, rather than being sent directly to an individual client. A client can publish to a topic, and any clients subscribed to that topic will receive the message.</p>
<p>In the example below, a <strong>client device is publishing</strong> some data (not shown) to the topic <code>/telemetry</code>. Immediately after the data is received by the broker, the <strong>broker routes the message</strong> to a client application previously <strong>subscribed to the same topic</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><a href="https://github.com/microsoft/IoT-For-Beginners/blob/main/images/mqtt.png"><img data-src="https://github.com/microsoft/IoT-For-Beginners/raw/main/images/mqtt.png" alt="IoT device publishing telemetry on the /telemetry topic, and the cloud service subscribing to that topic"></a></p>
<figcaption>IoT device publishing telemetry on the /telemetry topic, and the cloud service subscribing to that topic</figcaption>
</figure>
</div>
<p><a href="https://github.com/microsoft/IoT-For-Beginners/tree/main/1-getting-started/lessons/4-connect-internet"> MQTT Topics </a>&nbsp; IoT for Beginners, Microsoft.</p>
<blockquote>
<p>Topics <strong>typically have a hierarchy</strong> to keep data organized and intuitive to access.</p>
</blockquote>
<p>For example, a factory might want to track temperature from different HVAC units on different floor.</p>
<p>The topic hierarchy could be set up in the following way:</p>
<p><code>sensors/&lt;FLOOR&gt;/temperature/&lt;HVAC_UNIT_ID&gt;</code></p>
<p>HVAC units would publish data to the following topics:</p>
<ul>
<li>The AC unit on the third floor: <code>sensors/floor3/temperature/AC1</code></li>
<li>The boiler unit on the tenth floor: <code>sensors/floor10/temperature/boiler</code></li>
<li>The heater unit on the fourth floor: <code>sensors/floor4/temperature/heater</code></li>
</ul>
<h4 id="wildcards">Wildcards</h4>
<p>Clients can subscribe to different levels of the topic hierarchy using <strong>wildcards</strong>.</p>
<p>When subscribing to multiple topics two <strong>wildcard</strong> characters can be used:</p>
<ul>
<li><strong># (hash character)</strong> – multi level wildcard</li>
<li><strong>+</strong> <strong>(plus character)</strong> -single level wildcard</li>
</ul>
<p>Using the previous factory temperature example, an application could monitor multiple temperatures in the following way:</p>
<table class="caption-top">
<colgroup>
<col style="width: 37%">
<col style="width: 62%">
</colgroup>
<thead>
<tr class="header">
<th>Topic string</th>
<th>Subscription result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>sensors/floor3/temperature/+</code></td>
<td><strong>All</strong> of the temperature sensors on the 3rd floor</td>
</tr>
<tr class="even">
<td><code>sensors/+/temperature/+</code></td>
<td><strong>All</strong> the temperature data on <strong>all</strong> floors</td>
</tr>
<tr class="odd">
<td><code>sensors/#</code></td>
<td><strong>All</strong> topics going on <strong>all</strong> floors</td>
</tr>
<tr class="even">
<td><code>sensors/floor10/#</code></td>
<td><strong>All</strong> topics of the tenth floor</td>
</tr>
</tbody>
</table>
<h3 id="messages">Messages</h3>
<p>Like to HTTP, MQTT is built on top of TCP/IP and can also be used over websockets.</p>
<p>MQTT messages can be as short as 2 bytes (eg. acknowledgement or disconnect messages), as big as 256Mb (eg. publishing a picture or firmware update).</p>
<p>A typical telemetry message with payload data such as <code>value=40</code> to a topic <code>/assign1-temp</code> has a size around 20 to 40 bytes.</p>
<blockquote>
<p>Message headers and topic names are text encoded (UTF-8).</p>
<p>Message payload encoding is specific to the application (eg. plain text, JSON, binary, etc)</p>
</blockquote>
<p>MQTT connections can be <strong>public and open, or encrypted and secured</strong> using usernames and passwords, or certificates.</p>
<h3 id="qos">QoS</h3>
<p>Messages can be sent with a quality of service (QoS) flag, which determines the guarantee of the message being received.</p>
<ul>
<li><p><strong>QoS 0: At most once (Fire and Forget)</strong> - the message is sent only once and the client and broker take no additional steps to acknowledge delivery (fire and forget).</p></li>
<li><p><strong>QoS 1: At least once</strong> - the message is re-tried by the sender multiple times until acknowledgement is received (acknowledged delivery).</p></li>
<li><p><strong>QoS 2: Exactly once</strong> - the sender and receiver engage in a two-level handshake to ensure only one copy of the message is received (assured delivery).</p></li>
</ul>
<p>Below is an example of <strong>QoS 1</strong>:</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://cdn-learn.adafruit.com/assets/assets/000/049/303/medium800/customer___partner_projects_adafruit_io_puback.png?1513286630"></p>
<figcaption>customer___partner_projects_adafruit_io_puback.png</figcaption>
</figure>
</div>
<p class="img-info">
<a href="https://learn.adafruit.com/alltheiot-protocols/mqtt-qos"> Example of ‘At Least Once’ (QoS 1) delivery </a>&nbsp; MQTT QoS, Adafruit.
</p>
<blockquote>
<p>By default MQTT sessions are established with QoS 0 for all messages (clean sessions).</p>
<p>This means that if a client disconnects and then reconnects, <strong>it won’t receive messages sent during the disconnection</strong>.</p>
</blockquote>
<p>When setting QoS, there are two sides of message delivery:</p>
<ol type="1">
<li>Message delivery from the publishing client to the broker.</li>
<li>Message delivery from the broker to the subscribing client.</li>
</ol>
<p>The client that publishes the message to the broker defines the QoS level of the message when it sends the message to the broker.</p>
<p>The broker transmits this message to subscribing clients <strong>using the QoS level that each subscribing client defines</strong> during the subscription process.</p>
<blockquote>
<p>If the subscribing client defines a lower QoS than the publishing client, the broker transmits the message with the lower quality of service.</p>
</blockquote>
<h3 id="sessions-clean-or-persistent">Sessions: Clean or Persistent</h3>
<p>Typically, a client-broker connection is established with the session flag set to <strong>Clean</strong> with <code>CleanSession = true</code> (however, this is specific to the library implementation).</p>
<p>In this case the broker does not store anything for the client and purges all information from any previous subscriptions.</p>
<p>In a persistent session (<code>CleanSession = false</code>), the broker stores all subscriptions for the client and all missed messages for the client <strong>IF it subscribed with a QoS level 1 or 2</strong>.</p>
<h3 id="keepalive">KeepAlive</h3>
<p>The keep alive flag is <strong>a time interval in seconds</strong> that the client specifies and communicates to the broker when the connection established.</p>
<p>This is longest period of time that the broker and client can go without <strong>pinging each other</strong>. This method allows both sides to determine if the session is still available.</p>
<h3 id="last-will-testament">Last Will &amp; Testament</h3>
<p>When a client connects, it can provide the broker with a Last Will and Testament (LWT) message and topic.</p>
<p>If the client disconnects unexpectedly, the broker sends the LWT message on behalf of the client.</p>
<p><strong>This message notifies other clients when a client disconnects unexpectedly.</strong></p>
<p><img data-src="../assets/11-iot-protocols-last-will.png"></p>
<p class="img-info">
<a href="https://www.youtube.com/watch?v=LKz1jYngpcU"> Last Will &amp; Testament </a>&nbsp; Why HTTP isn’t the King of the IoT, Robert Bird, Akamai.
</p>
<h3 id="retained-messages">Retained Messages</h3>
<p>A retained message is <strong>a normal MQTT message with the retained flag set to true</strong>.</p>
<p>The broker stores the last retained message and the corresponding QoS for that topic.</p>
<p>Each client that subscribes to a topic pattern that matches the topic of the retained message receives the retained message immediately after they subscribe.</p>
<p>The broker stores only one retained message per topic.</p>
<blockquote>
<p>Retained messages help newly-subscribed clients get a status update immediately after they subscribe to a topic.</p>
</blockquote>
<p><img data-src="../assets/11-iot-protocols-retained.png"></p>
<p class="img-info">
<a href="https://www.youtube.com/watch?v=LKz1jYngpcU"> Message with Retained Flag </a>&nbsp; Why HTTP isn’t the King of the IoT, Robert Bird, Akamai.
</p>
</section>
<section id="http-vs-mqtt" class="slide level2">
<h2>HTTP vs MQTT</h2>
<table class="caption-top">
<colgroup>
<col style="width: 19%">
<col style="width: 47%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Criteria</th>
<th>MQTT</th>
<th>HTTP</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Complexity</td>
<td>Simple and lightweight</td>
<td>More complex and slightly heavier</td>
</tr>
<tr class="even">
<td>Consumption</td>
<td>More energy efficient</td>
<td>Less energy efficient</td>
</tr>
<tr class="odd">
<td>Communication direction</td>
<td>Bi-directional (client or broker can initiate)</td>
<td>Uni-directional (client must initiate)</td>
</tr>
<tr class="even">
<td>Architecture</td>
<td>Publish / Subscribe model</td>
<td>Request / Response Model</td>
</tr>
<tr class="odd">
<td>Session</td>
<td>Can keep connection open</td>
<td>Connection closes after every request</td>
</tr>
<tr class="even">
<td>Delivery assurance</td>
<td>Reliable message delivery with QoS (Quality of Service)</td>
<td>No QoS option</td>
</tr>
<tr class="odd">
<td>Header size</td>
<td>Smaller (~2 bytes)</td>
<td>Comparatively large size (~8 bytes)</td>
</tr>
</tbody>
</table>
</section>
<section id="mqtt-client-examples" class="slide level2 scrollable">
<h2>MQTT Client Examples</h2>
<blockquote>
<p>Examples of <strong>graphical</strong> MQTT clients:</p>
<ul>
<li><a href="https://mqttx.app/">MQTT X</a> (supports <code>cleanSession = False</code>)</li>
<li><a href="https://mqtt-explorer.com/">MQTT Explorer</a></li>
<li>VS Code <a href="https://marketplace.visualstudio.com/items?itemName=rpdswtk.vsmqtt">Extension VSMqtt</a> t</li>
</ul>
</blockquote>
<p>In this course you will write your own MQTT client. The next sections show an example of a simple MQTT client using Python that publishes and subscribes to messages.</p>
<h3 id="public-brokers">Public Brokers</h3>
<p>Since a broker is necessary, we can use the following publicly available MQTT brokers:</p>
<ul>
<li><a href="https://test.mosquitto.org">test.mosquitto.org</a> by Eclipse Foundation.</li>
<li><a href="https://www.emqx.com/en/mqtt/public-mqtt5-broker">broker.emqx.io</a> by EMQX.</li>
</ul>
<blockquote>
<p>For the client implementation we will use the <a href="https://github.com/eclipse/paho.mqtt.python">Eclipse Paho MQTT Python Client</a>. It is a popular choice for many IoT Cloud services such as Adafruit IO.</p>
<ul>
<li>Documentation for the <code>paho-mqtt</code> client is available at the <a href="https://pypi.org/project/paho-mqtt/#constructor-reinitialise">Pypi page</a>.</li>
</ul>
</blockquote>
<p>However, there are lots of other implementation options.</p>
<blockquote>
<p>This <a href="https://mqtt.org/software/">link compiles a list</a> of open-source MQTT client and broker implementations you can use in your projects.</p>
</blockquote>
<h3 id="publisher-code">Publisher Code</h3>
<p>The first example will only publish random data to the broker every 3 seconds.</p>
<ol type="1">
<li>Install the <code>paho-python</code> library.</li>
</ol>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><a></a><span class="ex">pip</span> install paho-mqtt</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ol start="2" type="1">
<li>Create your script file. A few notes:</li>
</ol>
<ul>
<li>Create a unique client ID to avoid conflicts with other users (this is a public broker).
<ul>
<li>https://test.mosquitto.org/</li>
<li>Create a unique ID using the <a href="https://www.guidgen.com/">Online GUID generator</a></li>
</ul></li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><a></a>common_key <span class="op">=</span> <span class="st">'329adb05-8b85-4ebe-8309-15c564503a1f'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ul>
<li>To have a unique client name and topic, we will combine the key from above with the desired name and topic.</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><a></a>client_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'publisher'</span></span>
<span id="cb3-2"><a></a>topic_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'/temperature'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ul>
<li>Import <code>paho-python</code> and the built-in <code>json</code> library (we’ll encode our data as JSON).</li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><a></a><span class="im">import</span> paho.mqtt.client <span class="im">as</span> mqtt</span>
<span id="cb4-2"><a></a><span class="im">import</span> json</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ul>
<li>All network operations (incoming and outgoing data) are processed with the <code>loop()</code> method every 3 seconds.</li>
</ul>
<p>Complete code:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><a></a><span class="co"># Publish to data topic (fire &amp; forget)</span></span>
<span id="cb5-2"><a></a></span>
<span id="cb5-3"><a></a><span class="im">import</span> paho.mqtt.client <span class="im">as</span> mqtt</span>
<span id="cb5-4"><a></a><span class="im">import</span> json</span>
<span id="cb5-5"><a></a></span>
<span id="cb5-6"><a></a><span class="im">import</span> time</span>
<span id="cb5-7"><a></a><span class="im">import</span> random</span>
<span id="cb5-8"><a></a></span>
<span id="cb5-9"><a></a>rnd <span class="op">=</span> random.Random()</span>
<span id="cb5-10"><a></a></span>
<span id="cb5-11"><a></a>common_key <span class="op">=</span> <span class="st">'d5a4d5e6-d597-4bd4-8196-5f51d12345'</span></span>
<span id="cb5-12"><a></a>topic_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'/temperature'</span></span>
<span id="cb5-13"><a></a>client_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'publisher'</span></span>
<span id="cb5-14"><a></a></span>
<span id="cb5-15"><a></a>mqtt_client <span class="op">=</span> mqtt.Client(client_name)</span>
<span id="cb5-16"><a></a>mqtt_client.<span class="ex">connect</span>(<span class="st">'test.mosquitto.org'</span>)</span>
<span id="cb5-17"><a></a></span>
<span id="cb5-18"><a></a><span class="bu">print</span>(<span class="st">"MQTT connected!"</span>)</span>
<span id="cb5-19"><a></a></span>
<span id="cb5-20"><a></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb5-21"><a></a></span>
<span id="cb5-22"><a></a>    <span class="co"># Random integer between -10 and 30</span></span>
<span id="cb5-23"><a></a>    temp <span class="op">=</span> rnd.randint(<span class="op">-</span><span class="dv">10</span>, <span class="dv">30</span>)</span>
<span id="cb5-24"><a></a></span>
<span id="cb5-25"><a></a>    <span class="co"># Prepare json payload</span></span>
<span id="cb5-26"><a></a>    payload <span class="op">=</span> json.dumps({<span class="st">'temperature'</span>: temp})</span>
<span id="cb5-27"><a></a>    <span class="bu">print</span>(<span class="st">"Sending telemetry "</span>, payload)</span>
<span id="cb5-28"><a></a></span>
<span id="cb5-29"><a></a>    <span class="co"># Send it off. QoS=0 and Retain=false</span></span>
<span id="cb5-30"><a></a>    info <span class="op">=</span> mqtt_client.publish(topic_name, payload)</span>
<span id="cb5-31"><a></a></span>
<span id="cb5-32"><a></a>    <span class="co"># Process network event. Handles incoming/outgoing data</span></span>
<span id="cb5-33"><a></a>    mqtt_client.loop()</span>
<span id="cb5-34"><a></a></span>
<span id="cb5-35"><a></a>    time.sleep(<span class="dv">3</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<h3 id="subscriber-code">Subscriber Code</h3>
<p>The MQTT client below subscribes to data from the publisher using the <strong>library’s default values</strong>.</p>
<p>A few notes:</p>
<ul>
<li>The subscriber used the same unique key as the publisher in order to subscribe to the same topics. However, the subscriber has its own client name.</li>
</ul>
<div class="sourceCode" id="cb6"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><a></a>common_key <span class="op">=</span> <span class="st">'d5a4d5e6-d597-4bd4-8196-5f51d12345'</span></span>
<span id="cb6-2"><a></a>topic_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'/temperature'</span></span>
<span id="cb6-3"><a></a>client_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'subscriber'</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ul>
<li>Once the client receives a message from the broker, the method <code>on_message</code> is called. This is used as a hook to define our own callback function.</li>
</ul>
<div class="sourceCode" id="cb7"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><a></a><span class="co"># Callback for when a message is received</span></span>
<span id="cb7-2"><a></a><span class="kw">def</span> message_received(mqtt_client, userdata, message):</span>
<span id="cb7-3"><a></a><span class="bu">print</span>(<span class="ss">f'Received message: </span><span class="sc">{</span>message<span class="sc">.</span>payload<span class="sc">}</span><span class="ss">'</span>)</span>
<span id="cb7-4"><a></a></span>
<span id="cb7-5"><a></a><span class="co"># Callback hook</span></span>
<span id="cb7-6"><a></a>mqtt_client.on_message <span class="op">=</span> message_received</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
<ul>
<li>Similarly to the publisher example, the network loop is processed every 1 second.</li>
</ul>
<p>The complete subscriber code:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><a></a><span class="co"># Subscribe to a topic with library's default values.</span></span>
<span id="cb8-2"><a></a></span>
<span id="cb8-3"><a></a><span class="im">import</span> paho.mqtt.client <span class="im">as</span> mqtt</span>
<span id="cb8-4"><a></a><span class="im">import</span> json</span>
<span id="cb8-5"><a></a></span>
<span id="cb8-6"><a></a><span class="im">import</span> time</span>
<span id="cb8-7"><a></a><span class="im">import</span> random</span>
<span id="cb8-8"><a></a></span>
<span id="cb8-9"><a></a>common_key <span class="op">=</span> <span class="st">'d5a4d5e6-d597-4bd4-8196-5f51d12345'</span></span>
<span id="cb8-10"><a></a>client_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'subscriber'</span></span>
<span id="cb8-11"><a></a>topic_name <span class="op">=</span> common_key <span class="op">+</span> <span class="st">'/temperature'</span></span>
<span id="cb8-12"><a></a></span>
<span id="cb8-13"><a></a>mqtt_client <span class="op">=</span> mqtt.Client(client_name)</span>
<span id="cb8-14"><a></a>mqtt_client.<span class="ex">connect</span>(<span class="st">'test.mosquitto.org'</span>)</span>
<span id="cb8-15"><a></a><span class="bu">print</span>(<span class="st">"MQTT connected!"</span>)</span>
<span id="cb8-16"><a></a></span>
<span id="cb8-17"><a></a></span>
<span id="cb8-18"><a></a><span class="co"># Callback for when a message is received</span></span>
<span id="cb8-19"><a></a><span class="kw">def</span> message_received(mqtt_client, userdata, message):</span>
<span id="cb8-20"><a></a>    <span class="bu">print</span>(<span class="ss">f'Received message: </span><span class="sc">{</span>message<span class="sc">.</span>payload<span class="sc">}</span><span class="ss">'</span>)</span>
<span id="cb8-21"><a></a></span>
<span id="cb8-22"><a></a></span>
<span id="cb8-23"><a></a><span class="co"># Callback hook</span></span>
<span id="cb8-24"><a></a>mqtt_client.on_message <span class="op">=</span> message_received</span>
<span id="cb8-25"><a></a></span>
<span id="cb8-26"><a></a>mqtt_client.subscribe(topic_name)</span>
<span id="cb8-27"><a></a></span>
<span id="cb8-28"><a></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb8-29"><a></a></span>
<span id="cb8-30"><a></a>    <span class="co"># Process network event. Handles incoming/outgoing data</span></span>
<span id="cb8-31"><a></a>    mqtt_client.loop()</span>
<span id="cb8-32"><a></a></span>
<span id="cb8-33"><a></a>    time.sleep(<span class="dv">1</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</section>
<section id="connectivity-issues" class="slide level2">
<h2>Connectivity Issues</h2>
<p>Connectivity is not always guaranteed. Things to think about when coding your application:</p>
<p><strong>What happens if:</strong></p>
<ul>
<li>Connection is lost just prior to telemetry being published?</li>
<li>Client connection is lost just prior to broker forwarding messages?</li>
</ul>
<p><strong>How to make sure that:</strong></p>
<ul>
<li>The broker has received the most up to date telemetry data?</li>
<li>Client has the most recent command/data?</li>
</ul>
</section>
<section id="exercises" class="slide level2 scrollable">
<h2>Exercises</h2>
<ol type="1">
<li><p>Use a Graphical MQTT client such as <a href="https://mqttx.app/">MQTT X</a>, <a href="https://mqtt-explorer.com/">MQTT Explorer</a> or the VS Code <a href="https://marketplace.visualstudio.com/items?itemName=rpdswtk.vsmqtt">Extension VSMqtt</a> to publish and subscribe telemetry data to/from one of our Adafruit IO (AIO) feeds.</p>
<ol type="1">
<li>See the <a href="https://io.adafruit.com/api/docs/mqtt.html#adafruit-io-mqtt-api">AIO MQTT API</a> documentation.</li>
<li>Publish a MQTT message with a random value to one of your feeds.</li>
<li>Subscribe to one of your AIO feeds.</li>
<li>Using the AIO Web interface, write a value to feed you subscribed in the previous step. Your MQTT client should receive the new value as a published message</li>
</ol></li>
<li><p>Use a Graphical MQTT client (see previous question) to publish and subscribe to topics using the public <a href="https://test.mosquitto.org/">MQTT Mosquitto broker</a>.</p>
<ol type="1">
<li>Use the <a href="https://www.guidgen.com/">Online GUID generator</a> to generate a unique prefix to your username.</li>
<li>Come-up with new topics and post new messages to them.</li>
<li>Subscribe to the same topics and see the new messages appear.</li>
</ol></li>
</ol>
</section>
<section id="references-resources" class="slide level2">
<h2>References &amp; Resources</h2>
<iframe width="560" height="315" src="https://www.youtube.com/embed/shqLy8XjqAQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/LKz1jYngpcU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p><a href="https://learn.adafruit.com/alltheiot-protocols?view=all#mqtt">All the Internet of Things - Episode Two: Protocols</a>, by Adafruit and Digikey</p>
<p><a href="https://github.com/microsoft/IoT-For-Beginners/tree/main/1-getting-started/lessons/4-connect-internet">Lesson 4: connect your device to the Internet</a>, IoT for Beginners by Microsoft</p>
<p><a href="https://www.hivemq.com/blog/mqtt-essentials-part-3-client-broker-connection-establishment/">MQTT Client and Broker and MQTT Server and Connection Establishment Explained</a> by HiveMQ</p>
<h3 id="diving-deeper">Diving Deeper</h3>
<p><a href="https://openlabpro.com/guide/mqtt-packet-format/">MQTT Packet Format</a> by OpenLab</p>
<p><a href="http://www.steves-internet-guide.com/mqtt-protocol-messages-overview/">Understanding the MQTT Protocol Packet Structure</a> by steves-internet-guide.com</p>


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">
<p>© Copyright 2024-2025 Michael Haaf. All rights reserved.</p>
</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': true,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("https:\/\/john-abbott-college\.github\.io\/6P3-Notes\/");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>