---
title: Git essentials
subtitle: >
  Tips for using git effectively.
  Using a personal access token for authentication
  The core git commands everyone should know.
date: 2025-02-10
categories: [git, lab-0, lab-1, lab-2]
bibliography: references.bib
nocite: |
  @*
draft: false
---

::: {.column-margin}

![](assets/git-logo.png)

:::

## Using personal access tokens

Many `git` operations require authentication to get permission. Some
examples:

- Pushing to a repository
- Pulling from a private repository
- Using [*GitHub CLI*](https://cli.github.com/)

Since July 2021, [*GitHub no longer accepts account
passwords*](https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/#what-you-need-to-do-today)
to authenticate git operations. You have probably run into this error many times when trying to push changes or clone your private repositories on a new machine.

The only reason VSCode works out of the box is because VSCode and GitHub are integrated by default, both being owned by Microsoft.

The following sections gives us more flexible and useful ways to authenticate `git` commands with GitHub.

### Creating a personal access token

Read [*"Managing your personal access tokens"*](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)
on Github, and create a **classic** (not fine-grained) **personal access
token**.

At the very least, select the **repo** scope -- this will give your
token the ability to authenticate using git on the CLI. You can select
all other scopes as well if you like.

Once you're finished, you'll see your token is a string of the following form:

```
ghp_<long string of letters and numbers
```

Copy this string to your clipboard. Then, open your developer terminal:

```bash
$ pass insert github/token
Enter password for github/token: # paste your token here, then press enter
```

Once you've done this, you should be able to access your token using `pass github/token`, or `pass github/token | clip.exe` to place it on your clipboard directly.

### Using a password manager to store your token

*Secrets* like personal access tokens need to be readily accessible to be useful -- but they also should be *secret*, so that others cannot easily impersonate you using the token.

A common method for managing secrets is to use a password manager. In our course we use [*pass*](https://www.passwordstore.org/) to securely manage our personal access tokens on our developer environment.

First, ensure `pass` and some useful related dependencies are installed:

```bash
# On WSL / Linux
sudo apt install pass pass-extension-otp zbar-tools

# On macOS
brew install pass pass-otp zbar
```

You'll need to generated a `gpg` key-pair in order to use `pass`. Follow the instructions below:

> [!NOTE]
> The GitHub instructions mention using `git bash` -- ignore them, you have a developer environment to use instead.
>
> In general, when I link to external instructions, you will need to pay attention to what parts of them may be different
> in our class. This is a good skill in general for making effective use of resources posted online when learning a new skill.

1. Create the gpg key-pair following the instructions on GitHub: [*Generating a new GPG key*](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key)
1. run `gpg --full-generate-key` to get started.
1. Recommended: You can accept the default key type (RSA)
1. Recommended: Choose 4096 bits for the keysize.
1. Recommended: You can accept the default "does not expire" option.
1. Enter user ID information. This information should match what you have provided to GitHub already (username/email address)
1. You have to choose a password for GPG keys. Choose something strong that you can remember.
1. Add the public key to your GitHub account following the instructions: [*Adding a GPG Key to your GitHub account*](https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account).

The name of the key on GitHub does not matter (Personal GPG Key is fine)

The command: `gpg --armor --export` prints your key to the console, you can copy/paste this output for GitHub

Even better: use a pipe to `clip.exe` to put the key in your clipboard automatically with `gpg --armor --export | clip.exe`

- on macOS: use `pbcopy` instead of `clip.exe`
- on Linux: use `xclip` or `wl-copy` instead of `clip.exe`

Once you've created the `gpg` key-pair, we can now set up `pass`:

```bash
pass init <the-email-you-used-for-gpg-key>
```

In the next step, we're going to create a GitHub Personal Access Token and store it in your `pass` store for easy and secure access.

### Troubleshooting

Some common errors that arise with using `gpg`:

#### `No secret key`

```bash {filename=bash}
$ pass github/token
gpg: decryption failed: No secret key
```

Try the following:

```bash {filename=bash}
$ gpgconf --kill gpg-agent

$ pass gitub/token
```

If that doesn't work, try restarting your WSL instance. In powershell:

```powershell {filename=Powershell}
PS > wsl --shutdown <distro-name>
```

After the shutdown attempt, retry using `pass` in the WSL again.
