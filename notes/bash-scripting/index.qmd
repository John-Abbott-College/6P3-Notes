---
title: Bash scripting
subtitle: >
  Tips for scripting in bash effectively.
  Managing environment and permissions in bash.
  The capabilities and limitations of programming in bash.
date: 2025-02-17
categories: [bash, lab-2]
bibliography: references.bib
nocite: |
  @*
image: https://tudoubaba.net/assets/img/shebang.72b91b53.png
---

:::{.column-margin}
![Image source: [tudoubaba.net](https://tudoubaba.net/ProgrammingHandbook/python/python_shebang.html)](https://tudoubaba.net/assets/img/shebang.72b91b53.png)
:::

## Bash theory

Bash (and other shell languages) isn't really a programming language -- it is a *command
interpreter* that's best used for organizing the inputs and outputs of programs written in
other languages. Historically this would be the C programming language. In our class, we will be writing "real" programs in Python. 

But I digress. Despite the fact that Bash isn't a programming language like C or Python,
you can still program in it. What do you need to know to write Bash programs?

These notes will cover the basic programming concepts you need to know to get the most out of writing scripts in Bash.

### Variables

_This section was adapted from [@VariableSubstitution]_

In Bash, there is no concept of "types" -- this is not a compiled language where different
amounts of memory need to be reserved for different types of data.

Rather, all variables in Bash are simply value-placeholders. That is:

- The *name* of a variable is a placeholder for its *value*, which is the data that it holds.
- Referencing/retrieving the value of a variable is called *variable substitution*.

For example, if `variable1` is the `name` of a variable, then `$variable1` is a reference to its `value`, the data it contains.

An equivalent syntax for variable substitution that is generally more robust is to add curly braces, as in: `${variable1}`

Running a command such as `echo $variable1` or `echo ${variable1}` will cause the *value*
referenced by `variable1` to be substituted and passed to the `echo` command.

Here's an example of variable assignment and substitution:

```bash {filename=bash}
# Create a variable with the name "a" and the value "375"
$ a=375

# Create a variable with the name "hello" and the value of the variable "a" (375)
$ hello=$a

# Not a variable reference, just the string "hello" ...
$ echo hello
hello

# This *is* a variable substitution
$ echo $hello
375

# This is another way to do a variable substitution
echo ${hello}
375
```

:::{.callout-note .column-margin}
No spaces are permitted on either side of `=` sign when initializing variables.
:::

#### Variable names

What can you name variables? Here are the rules:

- Variable names must start with a letter (not a number or any other character)
- Variable names cannot contain whitespace or punctuation

#### Environment variables

_This section was adapted from [@WritingShellScripts] and [@ExportManPage]_

Any time a shell session is initialized, some variables are already set by startup files.

To see all the variables that are in the environment, use the `printenv` command:

```bash {filename=bash}
$ printenv
SHELL=/bin/bash
...
```

You can also view environment variables in a bash session using `echo`:

```bash {filename=bash}
$ echo $SHELL
/bin/bash
```

You can create your own environment variables using the `export` command.

```bash {filename=bash}
$ MYDEPT=Sales
$ echo $MYDEPT
Sales
$ export MYDEPT

# In one line:
export SOMEOTHERVAR=Value
```

### Quoting

_This section was adapted from [@Quoting]_

Quoting means just that, bracketing a string in quotes. This has the effect of protecting
**special** characters in the string from reinterpretation or expansion by the shell or
shell script.

> A character is **special** if it has an interpretation other than its literal meaning.
> For example, the asterisk `*` represents a wild card character in globbing and Regular
> Expressions.

```bash {filename=bash}
$ ls -l [Vv]*
-rw-rw-r--    1 bozo  bozo       324 Apr  2 15:05 VIEWDATA.BAT
-rw-rw-r--    1 bozo  bozo       507 May  4 14:25 vartrace.sh
-rw-rw-r--    1 bozo  bozo       539 Apr 14 17:11 viewdata.sh

$ ls -l '[Vv]*'
ls: [Vv]*: No such file or directory

$ ls -l '[vv]*'
ls: [vv]*: no such file or directory
```

#### Quoting variables

When referencing a variable, it is generally advisable to enclose its name in double
quotes, like so:

```bash {filename=bash}
$ local var="string-with-special-characters#*;>,"
$ echo "$var"
string-with-special-characters#*;>,
```

This prevents reinterpretation of all special characters within the quoted string, with
the following exceptions:

- `$` (used for variable dereferencing)
- `\` (escape character)

Keeping `$` as a special character within double quotes permits referencing a quoted
variable (`$variable`), that is, replacing the variable with its value in the resulting
string.

Using double quotes also prevents word splitting. An argument enclosed in double quotes
presents itself as a *single word*, even if it contains whitespace separators.

```bash {filename=bash}
List="one two three"

for a in $List     # Splits the variable in parts at whitespace.
do
  echo "$a"
done
# one
# two
# three

echo "---"

for a in "$List"   # Preserves whitespace in a single variable.
do #     ^     ^
  echo "$a"
done
# one two three
```

#### Escaping

**Escaping** is a method of quoting single characters. The escape `\` preceding a character
tells the shell to interpret that character literally.

```bash {filename=bash}
$ echo "Hello world"
Hello world

$ echo "Hello \"world\""
Hello "world"
```

You can see more examples and information on escaping [here](https://tldp.org/LDP/abs/html/escapingsection.html).

#### Single quotes

Single quotes `'` operate similarly to double quotes, but do not permit referencing
variables, since the special meaning of `$` is turned off.

Within single quotes, *every special character except `'` gets interpreted literally*.
Consider single quotes ('full quoting') to be a stricter method of quoting than double
quotes ("partial quoting").

Since even the escape character `\` gets a literal interpretation within single quotes,
trying to enclose a single quote within single quotes will not yield the expected result.

### Conditionals

### Functions

### Exit codes

## OS theory

### Shell

### Permissions

_This section was adapted from [@HowToSetPermissions]_

#### View permissions with `ls`

The ouptut of `ls -l` will show the current permissions for files and folders:

`-rwxr--rw- 1 user user 0 Jan 19 12:59 file1.txt`

The letters `rwx` stand for Read/Write/Execute permission. These rights are shown three
times, first for the Owner, then the Group and lastly Others (world)

#### Edit permissions with `chmod`

The command to modify permissions is `chmod`. There are two ways to modify permissions,
with numbers or with letters.

Check out this this [chmod](https://ss64.com/bash/chmod.html) documentation for a really
great interactive demo.

##### Numeric

- `chmod 400 file` - Read by owner
- `chmod 040 file` - Read by group
- `chmod 004 file` - Read by world
- `chmod 200 file` - Write by owner
- `chmod 020 file` - Write by group
- `chmod 002 file` - Write by world
- `chmod 100 file` - execute by owner
- `chmod 010 file` - execute by group
- `chmod 001 file` - execute by world

To combine these, just add the numbers together:

- `chmod 444 file` - Allow read permission to owner and group and world
- `chmod 777 file` - Allow everyone to read, write, and execute file

##### Symbolic

`chmod` also accepts symbolic arguments for permission changes, where:

- `rwx`: read/write/execute
- `ugo`: user/group/world

Some examples:

- Deny execute permission to everyone: `$ chmod a-x file`
- Allow read permission to everyone: `$ chmod a+r file`
- Make a file readable and writable by the group and others: `$ chmod go+rw file`
- Make a shell script executable by the user/owner: `$ chmod u+x myscript.sh`
- Allow everyone to read, write, and execute the file and turn on the set group-ID:
    `$ chmod =rwx,g+s file`

Some files are configured to have very restrictive permissions to prevent unauthorized
access. Changing these permissions can create security problems.

To change or edit files that are owned by root, sudo chmod must be used. Note that
changing permissions incorrectly can quickly make your system unusable! Please be careful
when using sudo!

`$ sudo chmod o+x /usr/local/bin/somefile`

#### Recursive Permission Changes

`chmod -R` will change all the permissions of each file and folder under a specified
directory at once.

For example, `$ chmod 777 -R /path/to/Dir` will grant read/write/execute permissions to
all users for ALL files in `/path/to/Dir`.

To assign reasonably secure permissions to files and folders/directories, it’s common to
give files a permission of 644, and directories a 755 permission, using the `find` command
and a pipe we can target just files or just folders as in the following examples.

```
$ sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644`
$ sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755
```

Again if using sudo be careful, in particular watch for extra spaces in your command/path.

#### Changing Ownership and Group membership

A file’s owner can be changed using the `chown` command.

`$ sudo chown kate file1.txt`

A file’s group can also be changed using the `chown` command.

`$ sudo chown :mygroup file1.txt`

chown can also change the owner and group in a single command:

`$ sudo chown tux:mygroup file1.txt`

### Filesystem

## Code reuse

### `source`

_This section was adapted from [@LinuxCommandLine]_

Most programming languages permit programmers to specify external files to be included
within their programs. This is often used to add "boilerplate" code to programs for such
things as defining standard constants and referencing external library function
definitions.

Bash has a builtin command, `source`, that implements this feature. This section will
cover the ways it can make our scripts more powerful and easier to maintain.

`source` reads a specified file and executes the commands within it using the current
shell. It works both with the interactive command line and within a script. Using the
command line for example, we can reload the `.bashrc` file by executing the following
command:

`me@linuxbox: ~$ source ~/.bashrc`

Note that the `source` command can be abbreviated by a single dot character like so:

`me@linuxbox: ~$ . ~/.bashrc`

When source is used on the command line, the commands in the file are treated as if they
are being typed directly at the keyboard. In a shell script, the commands are treated as
though they are part of the script.

#### Function Libraries

`source` is a natural way to share functions and variables across many bash programs. For
example, it makes sense to have a shared function to display error messages:

```bash {filename=bash}
error_msg() {
  printf "%s\n" "$1" >&2
}
```

To share these functions across other scripts, we could build a library of functions and
source that library. As an example, we could put all the common code in a file called
`~/bash-scripts.sh` and add the following code to both scripts to source that file:

```bash {filename=bash}
FUNCLIB=~/bash-scripts.sh

if [[ -r "$FUNCLIB" ]]; then
    source "$FUNCLIB"
else
    echo "Cannot read function library!" >&2
    exit 1
fi
```

If you put `source` statements like this in your `~/.bashrc`, your functions will always
be available each time you open a new terminal instance.

### Scripts

### Shebangs

______________________________________________________________________
