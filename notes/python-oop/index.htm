<!DOCTYPE html>
<html lang="en"><head>
<link href="../../assets/favicon_io/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-8ea72dc5fed832574809a9c94082fbbb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.6.40">

  <meta name="dcterms.date" content="2025-01-24">
  <title>{{&lt; var course.title &gt;}} – OOP in Python</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; background-color: #2a0f15; font-weight: bold; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
    /* CSS for citations */
    div.csl-bib-body { }
    div.csl-entry {
      clear: both;
      margin-bottom: 0em;
    }
    .hanging-indent div.csl-entry {
      margin-left:2em;
      text-indent:-2em;
    }
    div.csl-left-margin {
      min-width:2em;
      float:left;
    }
    div.csl-right-inline {
      margin-left:2em;
      padding-left:1em;
    }
    div.csl-indent {
      margin-left: 2em;
    }  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-ab7a322b4ca39adb1086c9e0171297e3.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="OOP in Python – Connected Objects">
<meta property="og:description" content="How to use object oriented programming techniques in Python.">
<meta property="og:image" content="https://john-abbott-college.github.io/6P3-Notes/notes/python-oop/assets/art_title_path_only.svg">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">OOP in Python</h1>
  <p class="subtitle">How to use object oriented programming techniques in Python.</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2025-01-24</p>
</section>
<section class="slide level2">

<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://files.realpython.com/media/Object-Oriented-Programming-OOP_Watermarked.df1bfba08d93.jpg"></p>
<figcaption>Image: <a href="https://realpython.com/courses/object-oriented-programming-exercises/" class="uri">https://realpython.com/courses/object-oriented-programming-exercises/</a></figcaption>
</figure>
</div>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>These notes have been adapted from <a href="https://realpython.com/python3-object-oriented-programming/" class="uri">https://realpython.com/python3-object-oriented-programming/</a> <span class="citation" data-cites="csik2021">(<a href="#/summary" role="doc-biblioref" onclick="">Csik 2021</a>)</span> with very few modifications.</p>
<p>There is WAY more detail in this document than you need for now. Don’t feel the need to read this whole document, top-to-bottom, unless you are finding it useful. Instead, jump to the parts that are useful to you.</p>
</div>
</div>
</div>
</section>
<section id="overview" class="slide level2">
<h2>Overview</h2>
<p>Object-oriented programming (OOP) in Python helps you structure your code by grouping related data and behaviors into objects. You start by defining classes, which act as blueprints, and then create objects from them. OOP simplifies modeling real-world concepts in your programs and enables you to build systems that are more reusable and scalable.</p>
<p><strong>By the end of this tutorial, you’ll understand that:</strong></p>
<ul>
<li><strong>Object-oriented programming in Python</strong> involves creating classes as blueprints for objects. These objects contain data and the methods needed to manipulate that data.</li>
<li><strong>The four key concepts of OOP in Python</strong> are encapsulation, inheritance, abstraction, and polymorphism.</li>
<li>You <strong>create an object</strong> in Python by <strong>instantiating a class</strong>, which involves calling the class name followed by parentheses.</li>
<li><strong>Class inheritance</strong> in Python allows a class to inherit attributes and methods from another class, known as the parent class.</li>
<li>You use super() in Python to call a method from the parent class, allowing you to <strong>extend or modify</strong> inherited behavior.</li>
</ul>
<p>You’ll explore how to define classes, instantiate classes to create objects, and leverage inheritance to build robust systems in Python.</p>
<p><strong>Note:</strong> This tutorial is adapted from the chapter “Object-Oriented Programming (OOP)” in <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>.</p>
</section>
<section id="what-is-object-oriented-programming-in-python" class="slide level2">
<h2>What Is Object-Oriented Programming in Python?</h2>
<p>Object-oriented programming is a <a href="http://en.wikipedia.org/wiki/Programming_paradigm">programming paradigm</a> that provides a means of structuring programs so that properties and behaviors are bundled into individual <strong>objects</strong>.</p>
<p>For example, an object could represent a person with <strong>properties</strong> like a name, age, and address and <strong>behaviors</strong> such as walking, talking, breathing, and running. Or it could represent an <a href="https://realpython.com/python-send-email/">email</a> with properties like a recipient list, subject, and body and behaviors like adding attachments and sending.</p>
<p>Put another way, object-oriented programming is an approach for modeling concrete, real-world things, like cars, as well as relations between things, like companies and employees or students and teachers. OOP models real-world entities as software objects that have some data associated with them and can perform certain operations.</p>
<p>OOP also exists in other programming languages and is often described to center around the four pillars, or <strong>four tenants of OOP</strong>:</p>
<h3 id="encapsulation">Encapsulation</h3>
<p><strong>Encapsulation</strong> allows you to bundle data (attributes) and behaviors (methods) within a class to create a cohesive unit. By defining methods to control access to attributes and its modification, encapsulation helps maintain data integrity and promotes modular, secure code.</p>
<h3 id="inheritance">Inheritance</h3>
<p><strong>Inheritance</strong> enables the creation of hierarchical relationships between classes, allowing a subclass to inherit attributes and methods from a parent class. This promotes code reuse and reduces duplication.</p>
<h3 id="abstraction">Abstraction</h3>
<p><strong>Abstraction</strong> focuses on hiding implementation details and exposing only the essential functionality of an object. By enforcing a consistent interface, abstraction simplifies interactions with objects, allowing developers to focus on what an object does rather than how it achieves its functionality.</p>
<h3 id="polymorphism">Polymorphism</h3>
<p><strong>Polymorphism</strong> allows you to treat objects of different types as instances of the same base type, as long as they implement a common interface or behavior. Python’s <a href="https://realpython.com/duck-typing-python/">duck typing</a> make it especially suited for polymorphism, as it allows you to access attributes and methods on objects without needing to worry about their actual class.</p>
</section>
<section id="how-do-you-define-a-class-in-python" class="slide level2 scrollable">
<h2>How Do You Define a Class in Python?</h2>
<p>In Python, you define a class by using the <code>class</code> keyword followed by a name and a colon. Then you use <code>.__init__()</code> to declare which attributes each instance of the class should have:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><a></a><span class="kw">class</span> Worker:</span>
<span id="cb1-2"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name, age):</span>
<span id="cb1-3"><a></a>        <span class="va">self</span>.name <span class="op">=</span> name</span>
<span id="cb1-4"><a></a>        <span class="va">self</span>.age <span class="op">=</span> age</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>But what does all of that mean? And why do you even need classes in the first place? Take a step back and consider using built-in, primitive <a href="https://realpython.com/courses/python-data-types/">data structures</a> as an alternative.</p>
<p>Primitive data structures—like <a href="https://realpython.com/python-numbers/">numbers</a>, <a href="https://realpython.com/python-strings/">strings</a>, and <a href="https://realpython.com/python-list/">lists</a>—are designed to represent straightforward pieces of information, such as the cost of an apple, the name of a poem, or your favorite colors, respectively. What if you want to represent something more complex?</p>
<p>For example, you might want to track employees in an organization. You need to store some basic information about each employee, such as their name, age, position, and the year they started working.</p>
<p>One way to do this is to represent each worker as a <a href="https://realpython.com/python-list/">list</a>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><a></a>kirk <span class="op">=</span> [<span class="st">"James Kirk"</span>, <span class="dv">34</span>, <span class="st">"Captain"</span>, <span class="dv">2265</span>]</span>
<span id="cb2-2"><a></a>spock <span class="op">=</span> [<span class="st">"Spock"</span>, <span class="dv">35</span>, <span class="st">"Science Officer"</span>, <span class="dv">2254</span>]</span>
<span id="cb2-3"><a></a>mccoy <span class="op">=</span> [<span class="st">"Leonard McCoy"</span>, <span class="st">"Chief Medical Officer"</span>, <span class="dv">2266</span>]</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>There are a number of issues with this approach.</p>
<p>First, it can make larger code files more difficult to manage. If you reference <code>kirk[0]</code> several lines away from where you declared the <code>kirk</code> list, will you remember that the element with <a href="https://realpython.com/python-strings/#string-indexing">index</a> <code>0</code> is the employee’s name?</p>
<p>Second, it can introduce errors if employees don’t have the same number of elements in their respective lists. In the <code>mccoy</code> list above, the age is missing, so <code>mccoy[1]</code> will return <code>"Chief Medical Officer"</code> instead of <a href="https://en.wikipedia.org/wiki/Leonard_McCoy">Dr.&nbsp;McCoy’s</a> age.</p>
<p>A great way to make this type of code more manageable and more maintainable is to use <strong>classes</strong>.</p>
<h3 id="classes-vs-instances">Classes vs Instances</h3>
<p><a href="https://realpython.com/python-classes/">Classes</a> allow you to create user-defined data structures. Classes define functions called <strong>methods</strong>, which identify the behaviors and actions that an object created from the class can perform with its data.</p>
<p>In this tutorial, you’ll create a <code>Dog</code> class that stores some information about the characteristics and behaviors that an individual dog can have.</p>
<p>A class is a blueprint for how to define something. It doesn’t actually contain any data. The <code>Dog</code> class specifies that a name and an age are necessary for defining a dog, but it doesn’t contain the name or age of any specific dog.</p>
<p>While the class is the blueprint, an <strong>instance</strong> is an object that’s built from a class and contains real data. An instance of the <code>Dog</code> class is not a blueprint anymore. It’s an actual dog with a name, like Miles, who’s four years old.</p>
<p>Put another way, a class is like a form or questionnaire. An instance is like a form that you’ve filled out with information. Just like many people can fill out the same form with their own unique information, you can create many instances from a single class.</p>
<h3 id="class-definition">Class Definition</h3>
<p>You start all class definitions with the <code>class</code> keyword, then add the name of the class and a colon. Python will consider any code that you indent below the class definition as part of the class’s body.</p>
<p>Here’s an example of a <code>Dog</code> class:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb3-2"><a></a>    <span class="cf">pass</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>The body of the <code>Dog</code> class consists of a single statement: the <a href="https://realpython.com/python-pass/"><code>pass</code></a> keyword. Python programmers often use <code>pass</code> as a placeholder indicating where code will eventually go. It allows you to run this code without Python throwing an error.</p>
<blockquote>
<p><strong>Note:</strong> Python class names are written in <a href="https://en.wikipedia.org/wiki/Camel_case#Variations_and_synonyms">CapitalizedWords notation</a> by convention. For example, a class for a specific breed of dog, like the Jack Russell Terrier, would be written as <code>JackRussellTerrier</code>.</p>
</blockquote>
<p>The <code>Dog</code> class isn’t very interesting right now, so you’ll spruce it up a bit by defining some properties that all <code>Dog</code> objects should have. There are several properties that you can choose from, including name, age, coat color, and breed. To keep the example small in scope, you’ll just use name and age.</p>
<p>You define the properties that all <code>Dog</code> objects must have in a method called <code>.__init__()</code>. Every time you create a new <code>Dog</code> object, <code>.__init__()</code> sets the initial <strong>state</strong> of the object by assigning the values of the object’s properties. That is, <code>.__init__()</code> initializes each new instance of the class.</p>
<p>You can give <code>.__init__()</code> any number of parameters, but the first parameter will always be a <a href="https://realpython.com/python-variables/">variable</a> called <code>self</code>. When you create a new class instance, then Python automatically passes the instance to the <code>self</code> parameter in <code>.__init__()</code> so that Python can define the new <strong>attributes</strong> on the object.</p>
<p>Update the <code>Dog</code> class with an <code>.__init__()</code> method that creates <code>.name</code> and <code>.age</code> attributes:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb4-2"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name, age):</span>
<span id="cb4-3"><a></a>        <span class="va">self</span>.name <span class="op">=</span> name</span>
<span id="cb4-4"><a></a>        <span class="va">self</span>.age <span class="op">=</span> age</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Make sure that you indent the <code>.__init__()</code> method’s signature by four spaces, and the body of the method by eight spaces. This indentation is vitally important. It tells Python that the <code>.__init__()</code> method belongs to the <code>Dog</code> class.</p>
<p>In the body of <code>.__init__()</code>, there are two statements using the <code>self</code> variable:</p>
<ol type="1">
<li><strong><code>self.name = name</code></strong> creates an attribute called <code>name</code> and assigns the value of the <code>name</code> parameter to it.</li>
<li><strong><code>self.age = age</code></strong> creates an attribute called <code>age</code> and assigns the value of the <code>age</code> parameter to it.</li>
</ol>
<p>Attributes created in <code>.__init__()</code> are called <strong>instance attributes</strong>. An instance attribute’s value is specific to a particular instance of the class. All <code>Dog</code> objects have a name and an age, but the values for the <code>name</code> and <code>age</code> attributes will vary depending on the <code>Dog</code> instance.</p>
<p>On the other hand, <a href="https://realpython.com/python-classes/#class-attributes">class attributes</a> are attributes that have the same value for all class instances. You can define a class attribute by assigning a value to a <a href="https://realpython.com/python-variables/">variable</a> name outside of <code>.__init__()</code>.</p>
<p>For example, the following <code>Dog</code> class has a class attribute called <code>species</code> with the value <code>"Canis familiaris"</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb5-2"><a></a>    species <span class="op">=</span> <span class="st">"Canis familiaris"</span></span>
<span id="cb5-3"><a></a></span>
<span id="cb5-4"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name, age):</span>
<span id="cb5-5"><a></a>        <span class="va">self</span>.name <span class="op">=</span> name</span>
<span id="cb5-6"><a></a>        <span class="va">self</span>.age <span class="op">=</span> age</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>You define class attributes directly beneath the first line of the class name and indent them by four spaces. You always need to assign them an initial value. When you create an instance of the class, then Python automatically creates and assigns class attributes to their initial values.</p>
<p>Use class attributes to define properties that should have the same value for every class instance. Use instance attributes for properties that vary from one instance to another.</p>
<p>Now that you have a <code>Dog</code> class, it’s time to create some dogs!</p>
</section>
<section id="how-do-you-instantiate-a-class-in-python" class="slide level2 scrollable">
<h2>How Do You Instantiate a Class in Python?</h2>
<p>Creating a new object from a class is called <strong>instantiating</strong> a class. You can create a new object by typing the name of the class, followed by opening and closing parentheses:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; class Dog: ...     pass ... &gt;&gt;&gt; Dog() &lt;__main__.Dog object at 0x106702d30&gt;</code></p>
<p>You first create a new <code>Dog</code> class with no attributes or methods, and then you instantiate the <code>Dog</code> class to create a <code>Dog</code> object.</p>
<p>In the output above, you can see that you now have a new <code>Dog</code> object at <code>0x106702d30</code>. This funny-looking string of letters and numbers is a <strong>memory address</strong> that indicates where Python stores the <code>Dog</code> object in your computer’s memory. Note that the address on your screen will be different.</p>
<p>Now instantiate the <code>Dog</code> class a second time to create another <code>Dog</code> object:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; Dog() &lt;__main__.Dog object at 0x0004ccc90&gt;</code></p>
<p>The new <code>Dog</code> instance is located at a different memory address. That’s because it’s an entirely new instance and is completely unique from the first <code>Dog</code> object that you created.</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; a = Dog() &gt;&gt;&gt; b = Dog() &gt;&gt;&gt; a == b False</code></p>
<p>In this code, you create two new <code>Dog</code> objects and assign them to the variables <code>a</code> and <code>b</code>. When you compare <code>a</code> and <code>b</code> using the <code>==</code> operator, the result is <code>False</code>. Even though <code>a</code> and <code>b</code> are both instances of the <code>Dog</code> class, they represent two distinct objects in memory.</p>
<h3 id="class-and-instance-attributes">Class and Instance Attributes</h3>
<p>Now create a new <code>Dog</code> class with a class attribute called <code>.species</code> and two instance attributes called <code>.name</code> and <code>.age</code>:</p>
<p><code>bash {filename=Python Interpreter}     &gt;&gt;&gt; class Dog:     ...     species = "Canis familiaris"     ...     def __init__(self, name, age):     ...         self.name = name     ...         self.age = age     ...</code></p>
<p>To instantiate this <code>Dog</code> class, you need to provide values for <code>name</code> and <code>age</code>. If you don’t, then Python raises a <code>TypeError</code>:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; Dog() Traceback (most recent call last):   ... TypeError: __init__() missing 2 required positional arguments: 'name' and 'age'</code></p>
<p>To pass arguments to the <code>name</code> and <code>age</code> parameters, put values into the parentheses after the class name:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; miles = Dog("Miles", 4) &gt;&gt;&gt; buddy = Dog("Buddy", 9)</code></p>
<p>This creates two new <code>Dog</code> instances—one for a four-year-old dog named Miles and one for a nine-year-old dog named Buddy.</p>
<p>The <code>Dog</code> class’s <code>.__init__()</code> method has three parameters, so why are you only passing two arguments to it in the example?</p>
<p>When you instantiate the <code>Dog</code> class, Python creates a new instance of <code>Dog</code> and passes it to the first parameter of <code>.__init__()</code>. This essentially removes the <code>self</code> parameter, so you only need to worry about the <code>name</code> and <code>age</code> parameters.</p>
<p><strong>Note:</strong> Behind the scenes, Python both creates and initializes a new object when you use this syntax. If you want to dive deeper, then you can read the dedicated tutorial about the <a href="https://realpython.com/python-class-constructor/">Python class constructor</a>.</p>
<p>After you create the <code>Dog</code> instances, you can access their instance attributes using <strong>dot notation</strong>:</p>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; miles.name ‘Miles’ &gt;&gt;&gt; miles.age 4</p>
<blockquote>
<blockquote>
<blockquote>
<p>buddy.name ‘Buddy’ buddy.age 9</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
You can access class attributes the same way:

```bash {filename=Python Interpreter}
&gt;&gt;&gt; buddy.species
'Canis familiaris'</code></pre>
<p>One of the biggest advantages of using classes to organize data is that instances are guaranteed to have the attributes you expect. All <code>Dog</code> instances have <code>.species</code>, <code>.name</code>, and <code>.age</code> attributes, so you can use those attributes with confidence, knowing that they’ll always return a value.</p>
<p>Although the attributes are guaranteed to exist, their values <em>can</em> change dynamically:</p>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; buddy.age = 10 &gt;&gt;&gt; buddy.age 10</p>
<blockquote>
<blockquote>
<blockquote>
<p>miles.species = “Felis silvestris” miles.species ‘Felis silvestris’</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
In this example, you change the `.age` attribute of the `buddy` object to `10`. Then you
change the `.species` attribute of the `miles` object to `"Felis silvestris"`, which is a
species of cat. That makes Miles a pretty strange dog, but it's valid Python!

The key takeaway here is that custom objects are mutable by default. An object is mutable
if you can alter it dynamically. For example, lists and
[dictionaries](https://realpython.com/python-dicts/) are mutable, but strings and tuples
are [immutable](https://realpython.com/python-mutable-vs-immutable-types/).

### Instance Methods

**Instance methods** are functions that you define inside a class and can only call on an
instance of that class. Just like `.__init__()`, an instance method always takes `self` as
its first parameter.

Open a new editor window in IDLE and type in the following `Dog` class:

```python {filename=Python}
class Dog:
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Instance method
    def description(self):
        return f"{self.name} is {self.age} years old"

    # Another instance method
    def speak(self, sound):
        return f"{self.name} says {sound}"</code></pre>
<p>This <code>Dog</code> class has two instance methods:</p>
<ol type="1">
<li><strong><code>.description()</code></strong> returns a string displaying the name and age of the dog.</li>
<li><strong><code>.speak()</code></strong> has one parameter called <code>sound</code> and returns a string containing the dog’s name and the sound that the dog makes.</li>
</ol>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; miles = Dog(“Miles”, 4)</p>
<blockquote>
<blockquote>
<blockquote>
<p>miles.description() ‘Miles is 4 years old’</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>miles.speak(“Woof Woof”) ‘Miles says Woof Woof’</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>miles.speak(“Bow Wow”) ‘Miles says Bow Wow’</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
In the above `Dog` class, `.description()` returns a string containing information about
the `Dog` instance `miles`. When writing your own classes, it's a good idea to have a
method that returns a string containing useful information about an instance of the class.
However, `.description()` isn't the most
[Pythonic](https://realpython.com/learning-paths/writing-pythonic-code/) way of doing
this.

When you create a `list` object, you can use `print()` to display a string that looks like
the list:

```bash {filename=Python Interpreter}
&gt;&gt;&gt; names = ["Miles", "Buddy", "Jack"]
&gt;&gt;&gt; print(names)
['Miles', 'Buddy', 'Jack']</code></pre>
<p>Go ahead and print the <code>miles</code> object to see what output you get:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; print(miles) &lt;__main__.Dog object at 0x00aeff70&gt;</code></p>
<p>When you print <code>miles</code>, you get a cryptic-looking message telling you that <code>miles</code> is a <code>Dog</code> object at the memory address <code>0x00aeff70</code>. This message isn’t very helpful. You can change what gets printed by defining a special instance method called <code>.__str__()</code>.</p>
<p>In the editor window, change the name of the <code>Dog</code> class’s <code>.description()</code> method to <code>.__str__()</code>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb9-2"><a></a>    <span class="co"># ...</span></span>
<span id="cb9-3"><a></a></span>
<span id="cb9-4"><a></a>    <span class="kw">def</span> <span class="fu">__str__</span>(<span class="va">self</span>):</span>
<span id="cb9-5"><a></a>        <span class="cf">return</span> <span class="ss">f"</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>name<span class="sc">}</span><span class="ss"> is </span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>age<span class="sc">}</span><span class="ss"> years old"</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Methods like <code>.__init__()</code> and <code>.__str__()</code> are called <strong>dunder methods</strong> because they begin and end with <a href="https://realpython.com/python-double-underscore/">double underscores</a>. There are many dunder methods that you can use to customize classes in Python. <a href="https://realpython.com/python-classes/#special-methods-and-protocols">Understanding dunder methods</a> is an important part of mastering object-oriented programming in Python, but for your first exploration of the topic, you’ll stick with these two dunder methods.</p>
<p><strong>Note:</strong> Check out <a href="https://realpython.com/python-repr-vs-str/">When Should You Use <code>.__repr__()</code> vs <code>.__str__()</code> in Python?</a> to learn more about <code>.__str__()</code> and its cousin <code>.__repr__()</code>.</p>
</section>
<section id="how-do-you-inherit-from-another-class-in-python" class="slide level2">
<h2>How Do You Inherit From Another Class in Python?</h2>
<p><a href="https://realpython.com/inheritance-composition-python/">Inheritance</a> is the process by which one class takes on the attributes and methods of another. Newly formed classes are called <strong>child classes</strong>, and the classes that you derive child classes from are called <strong>parent classes</strong>.</p>
<p>You inherit from a parent class by creating a new class and putting the name of the parent class into parentheses:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><a></a><span class="kw">class</span> Parent:</span>
<span id="cb10-2"><a></a>    hair_color <span class="op">=</span> <span class="st">"brown"</span></span>
<span id="cb10-3"><a></a></span>
<span id="cb10-4"><a></a></span>
<span id="cb10-5"><a></a><span class="kw">class</span> Child(Parent):</span>
<span id="cb10-6"><a></a>    <span class="cf">pass</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>In this minimal example, the child class <code>Child</code> inherits from the parent class <code>Parent</code>. Because child classes take on the attributes and methods of parent classes, <code>Child.hair_color</code> is also <code>"brown"</code> without your explicitly defining that.</p>
<p><strong>Note:</strong> This tutorial is adapted from the chapter “Object-Oriented Programming (OOP)” in <a href="https://realpython.com/products/python-basics-book/"><em>Python Basics: A Practical Introduction to Python 3</em></a>. If you enjoy what you’re reading, then be sure to check out <a href="https://realpython.com/products/python-basics-book/">the rest of the book</a> and the <a href="https://realpython.com/learning-paths/python-basics/">learning path</a>.</p>
<p>You can also check out the <a href="https://realpython.com/courses/python-basics-class/">Python Basics: Building Systems With Classes</a> video course to reinforce the skills that you’ll develop in this section of the tutorial.</p>
<p>Child classes can override or extend the attributes and methods of parent classes. In other words, child classes inherit all of the parent’s attributes and methods but can also specify attributes and methods that are unique to themselves.</p>
<p>Although the analogy isn’t perfect, you can think of object inheritance sort of like genetic inheritance.</p>
<p>You may have inherited your hair color from your parents. It’s an attribute that you were born with. But maybe you decide to color your hair purple. Assuming that your parents don’t have purple hair, you’ve just <strong>overridden</strong> the hair color attribute that you inherited from your parents:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><a></a><span class="kw">class</span> Parent:</span>
<span id="cb11-2"><a></a>    hair_color <span class="op">=</span> <span class="st">"brown"</span></span>
<span id="cb11-3"><a></a></span>
<span id="cb11-4"><a></a></span>
<span id="cb11-5"><a></a><span class="kw">class</span> Child(Parent):</span>
<span id="cb11-6"><a></a>    hair_color <span class="op">=</span> <span class="st">"purple"</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>If you change the code example like this, then <code>Child.hair_color</code> will be <code>"purple"</code>.</p>
<p>You also inherit, in a sense, your language from your parents. If your parents speak English, then you’ll also speak English. Now imagine you decide to learn a second language, like German. In this case, you’ve <strong>extended</strong> your attributes because you’ve added an attribute that your parents don’t have:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><a></a><span class="kw">class</span> Parent:</span>
<span id="cb12-2"><a></a>    speaks <span class="op">=</span> [<span class="st">"English"</span>]</span>
<span id="cb12-3"><a></a></span>
<span id="cb12-4"><a></a></span>
<span id="cb12-5"><a></a><span class="kw">class</span> Child(Parent):</span>
<span id="cb12-6"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span>
<span id="cb12-7"><a></a>        <span class="bu">super</span>().<span class="fu">__init__</span>()</span>
<span id="cb12-8"><a></a>        <span class="va">self</span>.speaks.append(<span class="st">"German"</span>)</span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>You’ll learn more about how the code above works in the sections below. But before you dive deeper into inheritance in Python, you’ll take a walk to a dog park to better understand why you might want to use inheritance in your own code.</p>
<h3 id="example-dog-park">Example: Dog Park</h3>
<p>Pretend for a moment that you’re at a dog park. There are many dogs of different breeds at the park, all engaging in various dog behaviors.</p>
<p>Suppose now that you want to model the dog park with Python classes. The <code>Dog</code> class that you wrote in the previous section can distinguish dogs by name and age but not by breed.</p>
<p>You could modify the <code>Dog</code> class in the editor window by adding a <code>.breed</code> attribute:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb13" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb13-2"><a></a>    species <span class="op">=</span> <span class="st">"Canis familiaris"</span></span>
<span id="cb13-3"><a></a></span>
<span id="cb13-4"><a></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name, age, breed):</span>
<span id="cb13-5"><a></a>        <span class="va">self</span>.name <span class="op">=</span> name</span>
<span id="cb13-6"><a></a>        <span class="va">self</span>.age <span class="op">=</span> age</span>
<span id="cb13-7"><a></a>        <span class="va">self</span>.breed <span class="op">=</span> breed</span>
<span id="cb13-8"><a></a></span>
<span id="cb13-9"><a></a>    <span class="kw">def</span> <span class="fu">__str__</span>(<span class="va">self</span>):</span>
<span id="cb13-10"><a></a>        <span class="cf">return</span> <span class="ss">f"</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>name<span class="sc">}</span><span class="ss"> is </span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>age<span class="sc">}</span><span class="ss"> years old"</span></span>
<span id="cb13-11"><a></a></span>
<span id="cb13-12"><a></a>    <span class="kw">def</span> speak(<span class="va">self</span>, sound):</span>
<span id="cb13-13"><a></a>        <span class="cf">return</span> <span class="ss">f"</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>name<span class="sc">}</span><span class="ss"> says </span><span class="sc">{</span>sound<span class="sc">}</span><span class="ss">"</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p><code>bash {filename=Python interpreter} &gt;&gt;&gt; miles = Dog("Miles", 4, "Jack Russell Terrier") &gt;&gt;&gt; buddy = Dog("Buddy", 9, "Dachshund") &gt;&gt;&gt; jack = Dog("Jack", 3, "Bulldog") &gt;&gt;&gt; jim = Dog("Jim", 5, "Bulldog")</code></p>
<p>Each breed of dog has slightly different behaviors. For example, bulldogs have a low bark that sounds like <em>woof</em>, but dachshunds have a higher-pitched bark that sounds more like <em>yap</em>.</p>
<p>Using just the <code>Dog</code> class, you must supply a string for the <code>sound</code> argument of <code>.speak()</code> every time you call it on a <code>Dog</code> instance:</p>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; buddy.speak(“Yap”) ‘Buddy says Yap’</p>
<blockquote>
<blockquote>
<blockquote>
<p>jim.speak(“Woof”) ‘Jim says Woof’</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>jack.speak(“Woof”) ‘Jack says Woof’</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
Passing a string to every call to `.speak()` is repetitive and inconvenient. Moreover, the
`.breed` attribute should determine the string representing the sound that each `Dog`
instance makes, but here you have to manually pass the correct string to `.speak()` every
time you call it.

You can simplify the experience of working with the `Dog` class by creating a child class
for each breed of dog. This allows you to extend the functionality that each child class
inherits, including specifying a default argument for `.speak()`.

(/account/join/){.small .text-muted rel="nofollow"}

### Parent Classes vs Child Classes

In this section, you'll create a child class for each of the three breeds mentioned above:
Jack Russell terrier, dachshund, and bulldog.

For reference, here's the full definition of the `Dog` class that you're currently working
with:

```python {filename=Python}
class Dog:
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name} is {self.age} years old"

    def speak(self, sound):
        return f"{self.name} says {sound}"</code></pre>
<p>After doing the <a href="#/example-dog-park">dog park example</a> in the previous section, you’ve removed <code>.breed</code> again. You’ll now write code to keep track of a dog’s breed using child classes instead.</p>
<p>To create a child class, you create a new class with its own name and then put the name of the parent class in parentheses. Add the following to the <code>dog.py</code> file to create three new child classes of the <code>Dog</code> class:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb15" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><a></a><span class="co"># ...</span></span>
<span id="cb15-2"><a></a></span>
<span id="cb15-3"><a></a></span>
<span id="cb15-4"><a></a><span class="kw">class</span> JackRussellTerrier(Dog):</span>
<span id="cb15-5"><a></a>    <span class="cf">pass</span></span>
<span id="cb15-6"><a></a></span>
<span id="cb15-7"><a></a></span>
<span id="cb15-8"><a></a><span class="kw">class</span> Dachshund(Dog):</span>
<span id="cb15-9"><a></a>    <span class="cf">pass</span></span>
<span id="cb15-10"><a></a></span>
<span id="cb15-11"><a></a></span>
<span id="cb15-12"><a></a><span class="kw">class</span> Bulldog(Dog):</span>
<span id="cb15-13"><a></a>    <span class="cf">pass</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; miles = JackRussellTerrier("Miles", 4) &gt;&gt;&gt; buddy = Dachshund("Buddy", 9) &gt;&gt;&gt; jack = Bulldog("Jack", 3) &gt;&gt;&gt; jim = Bulldog("Jim", 5)</code></p>
<p>Instances of child classes inherit all of the attributes and methods of the parent class:</p>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; miles.species ‘Canis familiaris’</p>
<blockquote>
<blockquote>
<blockquote>
<p>buddy.name ‘Buddy’</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>print(jack) Jack is 3 years old</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>jim.speak(“Woof”) ‘Jim says Woof’</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
To determine which class a given object belongs to, you can use the built-in `type()`:

```bash {filename=Python Interpreter}
&gt;&gt;&gt; type(miles)
&lt;class '__main__.JackRussellTerrier'&gt;</code></pre>
<p>What if you want to determine if <code>miles</code> is also an instance of the <code>Dog</code> class? You can do this with the built-in <code>isinstance()</code>:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; isinstance(miles, Dog) True</code></p>
<p>Notice that <code>isinstance()</code> takes two arguments, an object and a class. In the example above, <code>isinstance()</code> checks if <code>miles</code> is an instance of the <code>Dog</code> class and returns <code>True</code>.</p>
<p>The <code>miles</code>, <code>buddy</code>, <code>jack</code>, and <code>jim</code> objects are all <code>Dog</code> instances, but <code>miles</code> isn’t a <code>Bulldog</code> instance, and <code>jack</code> isn’t a <code>Dachshund</code> instance:</p>
<p>```bash {filename=Python Interpreter} &gt;&gt;&gt; isinstance(miles, Bulldog) False</p>
<blockquote>
<blockquote>
<blockquote>
<p>isinstance(jack, Dachshund) False</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code>
More generally, all objects created from a child class are instances of the parent class,
although they may not be instances of other child classes.

Now that you've created child classes for some different breeds of dogs, you can give each
breed its own sound.

### Parent Class Functionality Extension

Since different breeds of dogs have slightly different barks, you want to provide a
default value for the `sound` argument of their respective `.speak()` methods. To do this,
you need to override `.speak()` in the class definition for each breed.

To override a method defined on the parent class, you define a method with the same name
on the child class. Here's what that looks like for the `JackRussellTerrier` class:

```python {filename=Python}
# ...


class JackRussellTerrier(Dog):
    def speak(self, sound="Arf"):
        return f"{self.name} says {sound}"


# ...</code></pre>
<p>Now <code>.speak()</code> is defined on the <code>JackRussellTerrier</code> class with the default argument for <code>sound</code> set to <code>"Arf"</code>.</p>
<p>Update <code>dog.py</code> with the new <code>JackRussellTerrier</code> class. You can now call <code>.speak()</code> on a <code>JackRussellTerrier</code> instance without passing an argument to <code>sound</code>:</p>
<p><code>bash {filename=Python interpreter} &gt;&gt;&gt; miles = JackRussellTerrier("Miles", 4) &gt;&gt;&gt; miles.speak() 'Miles says Arf'</code></p>
<p>Sometimes dogs make different noises, so if Miles gets angry and growls, you can still call <code>.speak()</code> with a different sound:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; miles.speak("Grrr") 'Miles says Grrr'</code></p>
<p>One thing to keep in mind about class inheritance is that changes to the parent class automatically propagate to child classes. This occurs as long as the attribute or method being changed isn’t overridden in the child class.</p>
<p>For example, in the editor window, change the string returned by <code>.speak()</code> in the <code>Dog</code> class:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb18" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><a></a><span class="kw">class</span> Dog:</span>
<span id="cb18-2"><a></a>    <span class="co"># ...</span></span>
<span id="cb18-3"><a></a></span>
<span id="cb18-4"><a></a>    <span class="kw">def</span> speak(<span class="va">self</span>, sound):</span>
<span id="cb18-5"><a></a>        <span class="cf">return</span> <span class="ss">f"</span><span class="sc">{</span><span class="va">self</span><span class="sc">.</span>name<span class="sc">}</span><span class="ss"> barks: </span><span class="sc">{</span>sound<span class="sc">}</span><span class="ss">"</span></span>
<span id="cb18-6"><a></a></span>
<span id="cb18-7"><a></a></span>
<span id="cb18-8"><a></a><span class="co"># ...</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>Now, when you create a new <code>Bulldog</code> instance named <code>jim</code>, <code>jim.speak()</code> returns the new string:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; jim = Bulldog("Jim", 5) &gt;&gt;&gt; jim.speak("Woof") 'Jim barks: Woof'</code></p>
<p>However, calling <code>.speak()</code> on a <code>JackRussellTerrier</code> instance won’t show the new style of output:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; miles = JackRussellTerrier("Miles", 4) &gt;&gt;&gt; miles.speak() 'Miles says Arf'</code></p>
<p>Sometimes it makes sense to completely override a method from a parent class. But in this case, you don’t want the <code>JackRussellTerrier</code> class to lose any changes that you might make to the formatting of the <code>Dog.speak()</code> output string.</p>
<p>To do this, you still need to define a <code>.speak()</code> method on the child <code>JackRussellTerrier</code> class. But instead of explicitly defining the output string, you need to call the <code>Dog</code> class’s <code>.speak()</code> from <em>inside</em> the child class’s <code>.speak()</code> using the same arguments that you passed to <code>JackRussellTerrier.speak()</code>.</p>
<p>You can access the parent class from inside a method of a child class by using <a href="https://realpython.com/python-super/"><code>super()</code></a>:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Python</strong></pre>
</div>
<div class="sourceCode" id="cb19" data-filename="Python"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><a></a><span class="co"># ...</span></span>
<span id="cb19-2"><a></a></span>
<span id="cb19-3"><a></a></span>
<span id="cb19-4"><a></a><span class="kw">class</span> JackRussellTerrier(Dog):</span>
<span id="cb19-5"><a></a>    <span class="kw">def</span> speak(<span class="va">self</span>, sound<span class="op">=</span><span class="st">"Arf"</span>):</span>
<span id="cb19-6"><a></a>        <span class="cf">return</span> <span class="bu">super</span>().speak(sound)</span>
<span id="cb19-7"><a></a></span>
<span id="cb19-8"><a></a></span>
<span id="cb19-9"><a></a><span class="co"># ...</span></span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
<p>When you call <code>super().speak(sound)</code> inside <code>JackRussellTerrier</code>, Python searches the parent class, <code>Dog</code>, for a <code>.speak()</code> method and calls it with the variable <code>sound</code>.</p>
<p>Update <code>dog.py</code> with the new <code>JackRussellTerrier</code> class:</p>
<p><code>bash {filename=Python Interpreter} &gt;&gt;&gt; miles = JackRussellTerrier("Miles", 4) &gt;&gt;&gt; miles.speak() 'Miles barks: Arf'</code></p>
<p>Now when you call <code>miles.speak()</code>, you’ll see output reflecting the new formatting in the <code>Dog</code> class.</p>
<p><strong>Note:</strong> In the above examples, the <strong>class hierarchy</strong> is very straightforward. The <code>JackRussellTerrier</code> class has a single parent class, <code>Dog</code>. In real-world examples, the class hierarchy can get quite complicated.</p>
<p>The <code>super()</code> function does much more than just search the parent class for a method or an attribute. It traverses the entire class hierarchy for a matching method or attribute. If you aren’t careful, <code>super()</code> can have surprising results.</p>
</section>
<section id="summary" class="slide level2 smaller scrollable">
<h2>Summary</h2>
<p>In this tutorial, you learned about object-oriented programming (OOP) in Python. Many modern programming languages, such as <a href="https://go.java/">Java</a>, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/">C#</a>, and <a href="https://www.cplusplus.com/info/description/">C++</a>, follow OOP principles, so the knowledge that you gained here will be applicable no matter where your programming career takes you.</p>
<p>In Python, you learned how to:</p>
<ul>
<li>Define a <strong>class</strong>, which is a sort of blueprint for an object</li>
<li>Instantiate a class to create an <strong>object</strong></li>
<li>Use <strong>attributes</strong> and <strong>methods</strong> to define the <strong>properties</strong> and <strong>behaviors</strong> of an object</li>
<li>Use <strong>inheritance</strong> to create <strong>child classes</strong> from a <strong>parent class</strong></li>
<li>Reference a method on a parent class using <strong><code>super()</code></strong></li>
<li>Check if an object inherits from another class using <strong><code>isinstance()</code></strong></li>
</ul>


<div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0" role="list">
<div id="ref-csik2021" class="csl-entry" role="listitem">
Csik, Samantha. 2021. <span>“Why Create Presentation Slides about Blogging When You Can Just Blog about It Instead?”</span> September 24, 2021. <a href="https://samanthacsik.github.io/posts/2021-09-21-distill-blogs/">https://samanthacsik.github.io/posts/2021-09-21-distill-blogs/</a>.
</div>
</div>
</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">
<p>© Copyright 2024-2025 Michael Haaf. All rights reserved.</p>
</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': true,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
    window.document.addEventListener("DOMContentLoaded", function (event) {
      const toggleBodyColorMode = (bsSheetEl) => {
        const mode = bsSheetEl.getAttribute("data-mode");
        const bodyEl = window.document.querySelector("body");
        if (mode === "dark") {
          bodyEl.classList.add("quarto-dark");
          bodyEl.classList.remove("quarto-light");
        } else {
          bodyEl.classList.add("quarto-light");
          bodyEl.classList.remove("quarto-dark");
        }
      }
      const toggleBodyColorPrimary = () => {
        const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
        if (bsSheetEl) {
          toggleBodyColorMode(bsSheetEl);
        }
      }
      toggleBodyColorPrimary();  
      const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
      tabsets.forEach(function(tabset) {
        const tabby = new Tabby('#' + tabset.id);
      });
      const isCodeAnnotation = (el) => {
        for (const clz of el.classList) {
          if (clz.startsWith('code-annotation-')) {                     
            return true;
          }
        }
        return false;
      }
      const onCopySuccess = function(e) {
        // button target
        const button = e.trigger;
        // don't keep focus
        button.blur();
        // flash "checked"
        button.classList.add('code-copy-button-checked');
        var currentTitle = button.getAttribute("title");
        button.setAttribute("title", "Copied!");
        let tooltip;
        if (window.bootstrap) {
          button.setAttribute("data-bs-toggle", "tooltip");
          button.setAttribute("data-bs-placement", "left");
          button.setAttribute("data-bs-title", "Copied!");
          tooltip = new bootstrap.Tooltip(button, 
            { trigger: "manual", 
              customClass: "code-copy-button-tooltip",
              offset: [0, -8]});
          tooltip.show();    
        }
        setTimeout(function() {
          if (tooltip) {
            tooltip.hide();
            button.removeAttribute("data-bs-title");
            button.removeAttribute("data-bs-toggle");
            button.removeAttribute("data-bs-placement");
          }
          button.setAttribute("title", currentTitle);
          button.classList.remove('code-copy-button-checked');
        }, 1000);
        // clear code selection
        e.clearSelection();
      }
      const getTextToCopy = function(trigger) {
          const codeEl = trigger.previousElementSibling.cloneNode(true);
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
      }
      const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
        text: getTextToCopy
      });
      clipboard.on('success', onCopySuccess);
      if (window.document.getElementById('quarto-embedded-source-code-modal')) {
        const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
          text: getTextToCopy,
          container: window.document.getElementById('quarto-embedded-source-code-modal')
        });
        clipboardModal.on('success', onCopySuccess);
      }
        var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
        var mailtoRegex = new RegExp(/^mailto:/);
          var filterRegex = new RegExp("https:\/\/john-abbott-college\.github\.io\/6P3-Notes\/");
        var isInternal = (href) => {
            return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
        }
        // Inspect non-navigation links and adorn them if external
     	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
        for (var i=0; i<links.length; i++) {
          const link = links[i];
          if (!isInternal(link.href)) {
            // undo the damage that might have been done by quarto-nav.js in the case of
            // links that we want to consider external
            if (link.dataset.originalHref !== undefined) {
              link.href = link.dataset.originalHref;
            }
          }
        }
      function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
        const config = {
          allowHTML: true,
          maxWidth: 500,
          delay: 100,
          arrow: false,
          appendTo: function(el) {
              return el.closest('section.slide') || el.parentElement;
          },
          interactive: true,
          interactiveBorder: 10,
          theme: 'light-border',
          placement: 'bottom-start',
        };
        if (contentFn) {
          config.content = contentFn;
        }
        if (onTriggerFn) {
          config.onTrigger = onTriggerFn;
        }
        if (onUntriggerFn) {
          config.onUntrigger = onUntriggerFn;
        }
          config['offset'] = [0,0];
          config['maxWidth'] = 700;
        window.tippy(el, config); 
      }
      const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
      for (var i=0; i<noterefs.length; i++) {
        const ref = noterefs[i];
        tippyHover(ref, function() {
          // use id or data attribute instead here
          let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
          try { href = new URL(href).hash; } catch {}
          const id = href.replace(/^#\/?/, "");
          const note = window.document.getElementById(id);
          if (note) {
            return note.innerHTML;
          } else {
            return "";
          }
        });
      }
      const findCites = (el) => {
        const parentEl = el.parentElement;
        if (parentEl) {
          const cites = parentEl.dataset.cites;
          if (cites) {
            return {
              el,
              cites: cites.split(' ')
            };
          } else {
            return findCites(el.parentElement)
          }
        } else {
          return undefined;
        }
      };
      var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
      for (var i=0; i<bibliorefs.length; i++) {
        const ref = bibliorefs[i];
        const citeInfo = findCites(ref);
        if (citeInfo) {
          tippyHover(citeInfo.el, function() {
            var popup = window.document.createElement('div');
            citeInfo.cites.forEach(function(cite) {
              var citeDiv = window.document.createElement('div');
              citeDiv.classList.add('hanging-indent');
              citeDiv.classList.add('csl-entry');
              var biblioDiv = window.document.getElementById('ref-' + cite);
              if (biblioDiv) {
                citeDiv.innerHTML = biblioDiv.innerHTML;
              }
              popup.appendChild(citeDiv);
            });
            return popup.innerHTML;
          });
        }
      }
    });
    </script>
    

</body></html>