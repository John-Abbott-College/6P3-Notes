---
title: "reTerminal Sensors"
subtitle: Installing initial reTerminal packages. Reading and controlling the reTerminal hardware interfaces, e.g. LEDs, light sensor, screen backlight, etc.
order: 1
date: 2024-02-19
---

## Lab 1 Review

After Lab 1, you have taken the following steps:

1. Install the Raspberry Pi OS image.
 - disassemble, flip the memory switch and use `usbboot/rpiboot` script to prepare internal memory for firmware flash.
 - use Raspberry Pi Imager to flash new image 64bit "Bookworm" Raspberry OS with chosen username/password and SSH enabled
 - fix the "black screen" issue by installing the latest seeed overlay drivers

2. Update system packages
 - update system repositories with `sudo apt update` and `sudo apt upgrade`
 - install kernel headers with `sudo apt install raspberrypi-kernel-headers`
 - install `git` and `docker`, deploy simple Python webserver docker container

3. Set up remote connection interfaces
 - determine your assigned IP address on the class LAN
 - determine your device MAC address
 - enable VNC interface

It's time to take a deeper look at the hardware and software our reTerminal offers.

## Hardware

*This section is adapted directly from the reTerminal wiki: ["Getting Started with reTerminal"](https://wiki.seeedstudio.com/reTerminal/#features)*

The reTerminal is powered by a Raspberry Pi Compute Module 4 (CM4) which is
a Quad-Core Cortex-A72 CPU running at 1.5GHz and a 5-inch IPS capacitive
multi-touch screen with a resolution of 1280 x 720. It has sufficient
amount of RAM (4GB) to perform multitasking and also has sufficient
amount of eMMC storage (32GB) to install an operating system, enabling
fast boot up times and smooth overall experience. It has wireless
connectivity with dual-band 2.4GHz/5GHz Wi-Fi and Bluetooth 5.0 BLE.

reTerminal consists of a high-speed expansion interface and rich I/O for
more expandability. This device has security features such as a
cryptographic co-processor with secure hardware-based key storage. It
also has built-in modules such as an accelerometer, light sensor and an
RTC (Real-Time Clock). reTerminal has a Gigabit Ethernet Port for faster
network connections and also has dual USB 2.0 Type-A ports. The 40-pin
header on the reTerminal opens it for a wide range of IoT applications.

### Firmware & Version

------------------------------------------------------------------------------------
Released Date  Pre-Installed OS                       Pre-Installed   Board Version  
                                                      STM32 Firmware                 
-------------- -------------------------------------- --------------- --------------
06/15/2021     2021-06-02-Raspbian(modified)-32-bit   V1.0            v1.3          

08/03/2021     2021-06-02-Raspbian(modified)-32-bit   V1.1            v1.4          

09/03/2021     2021-06-02-Raspbian(modified)-32-bit   V1.6            v1.6          

11/02/2021     2021-09-14-Raspbian(modified)-32-bit   V1.8            v1.6          

**Winter 2024**   **What OS did we install in Lab 1?**       V1.8            v1.6
------------------------------------------------------------------------------------

**You can find a complete list of the reTerminal specifications here: [reTerminal Specifications](https://wiki.seeedstudio.com/reTerminal/#specifications)**

## Raspberry Pi OS

In Lab 1, we re-imaged the reTerminal Operating System to run the latest, recommended version of 64-bit Raspberry Pi OS. 

Raspberry Pi OS (previously called *Raspbian OS*) is a variation of the [**Debian OS**](https://en.wikipedia.org/wiki/Debian), with optimizations for the Raspberry Pi hardware.

You can see more about Raspberry Pi OS and Debian in the [Linux](/topics/linux/docs/package-management-debian.qmd) set of lessons.

## Programmable Sensors

*This section is based on the official documentation for the reTerminal: [Hardware and Interfaces Usage](https://wiki.seeedstudio.com/reTerminal-hardware-interfaces-usage/#3-user-programmable-leds)*

> In Linux, everything is a file stream that can be read and/or written to.

For example, keyboard inputs and communication over web-sockets are all read as a file streams.

The reTerminal has 3 programmable LED's and a light sensor that can be **controlled like a regular file**.

![](../assets/5-reterminal-buttons-light-sensor.png)

You can see, there are 3 programmable LEDs in the reTerminal:

- **STA** light can be turned on as **red or green**.
- **USR** light can only be turned on as **green**.

![](../assets/5-reterminal_leds.png ':size=400')

The lights can be controlled at the OS level by editing files in the `/sys/class/leds/` directory. Use `ls -al` to list the files in this directory:

```bash
username@hostname:/sys/class/leds/usr_led0 $ ls -al
total 0            
drwxr-xr-x 3 root root    0 Jan 25 20:33 .               
drwxr-xr-x 8 root root    0 Jan 25 20:33 ..                                                                                                                                                                         
-rw-r--r-- 1 root root 4096 Jan 26 22:02 brightness                                                                                                                                                                 
```
![Unix Permissions cheatsheet by Julia Evans](../assets/5-unix-permissions-cheatsheet.png)

The `brightness` file inide the `usr_led0` controls the brightness of LED0. But, because only `root` has write permissions to this file, we will likely run into permissions errors if we try to edit the value directly:

```bash
$ nano /sys/class/leds/usr_led0/brightness
Permission denied

$ echo 255 > /sys/class/leds/usr_led0/brightness
Permission denied

$ sudo echo 255 > /sys/class/leds/usr_led0/brightness
Permission denied
```

There are a few possible approaches to this problem:

### Use sudo + text-editor

You can open a text-editor with `root` permissions using `sudo`:

```bash
# nano text editor
sudo nano /sys/class/leds/usr_led0/brightness

# or, you can use vi/vim text editor
sudo vi /sys/class/leds/usr_led0/brightness
```

Edit the `brightness` file to a value between 0-255 using the editor. When you save, you should see the change immediately.

### Use sudo + su

Using an editor is perfectly reasonable for a one-off change, but annoying if you want to make the change more often.

We can use the `echo value > /path/to/file` pattern, but only if we have permissions to write to `/path/to/file` -- we can obtain these permissions if we run the entire command as the `root` user.

> **NOTE:** Running commands as the root user can have unintended consequences,  ranging from annoying/tedious to fix, to completely devastating/permanently ruinous for your machine. You should avoid being `root` wherever possible (see **Use sudo + tee** section below for how to avoid it for this problem). 

You can enter a `root` shell instance using the command `su` (switch user), or by using `sudo -i` or `sudo -s`:

```bash
user@hostname $ sudo su
root@hostname # 

user@hostname $ sudo -i
root@hostname # 

user@hostname $ sudo -s
root@hostname # 
```

Your shell should now display `root@hostname:~# `. 

Turn on the LED with maximum brightness

```bash
# echo 255 > brightness
```

Turn off the LED

```bash
# echo 0 > brightness
```

Similarly, you can control  `usr_led1` and `usr_led2` and even the buzzer on `/sys/class/leds/usr_buzzer`

When done working as root, you can exit the root shell and return to your user shell using the `exit` command (or Ctrl-D as a hotkey):

```bash
root@hostname # exit
user@hostname $
```

### Use sudo + `tee`

If we want to avoid using a text editor, AND avoid logging into a `root` shell instance, it would be great if something like this worked:

```bash
$ sudo echo 255 > /sys/class/leds/usr_led0/brightness
```

But it doesn't! Can you understand why? Consider which part of the instruction `sudo` applies to. Unfortunately, there is no way to `sudo >` or `sudo filename` since `sudo` executes **commands** as the root user, NOT filenames/redirects.

What if there were a command that we could put after the redirect, and `sudo` that command? What would that command need to do? It's time to introduce a "new" command: `tee`.

To be clear, [`tee`](https://en.wikipedia.org/wiki/Tee_(command)) is a 50 year old program and an absolute classic -- it is as ubiquitous/essential as the other OG unix programs like `ls`, `cat`, `echo`. We will see why in the following example.

Try running `man tee` in your reTerminal. You should see something like the following: 

```bash
TEE(1)

NAME
       tee - read from standard input and write to standard output and files

SYNOPSIS
       tee [OPTION]... [FILE]...

DESCRIPTION
       Copy standard input to each FILE, and also to standard output.
```

We have here a command that will read from standard input, and *write that same content from standard input into BOTH standard output AND files* -- the files we can specify as arguments.

**Challenge for Lab 2:** where would you put `tee` and `sudo` in the command below, to fix our permissions problems?

```bash
$ echo 255 | /sys/class/leds/usr-led0/brightness 
# this command is missing `tee` and `sudo`.... find where to put them, and you've learned a very important unix pattern!
```

### Luminosity Sensor

The digital light sensor can read the surrounding light levels.

1. Enter the following directory

```bash
cd /sys/bus/iio/devices/iio:device0
```

2. Read the following file to obtain the light intensity value in **Lux**

```bash
cat in_illuminance_input 
```

Output:
```bash
pi@raspberrypi:/sys/bus/iio/devices/iio:device0 $ cat in_illuminance_input 
2719
```

**Note:** We don't need to be root to read this file. Its permissions are set to let all users read it, even-though it belongs to the root user:

```bash
rw-r--r-- 1 root root 4096 Jan 30 22:16 in_illuminance_input
```

## Python Library for reTerminal

Seeed Studio provided a python library to access most of the sensors and actuators of the reTerminal.

Install the library `seeed-python-reterminal` (see official [Github repo](https://github.com/Seeed-Studio/Seeed_Python_ReTerminal)) using `pip`:

**NOTE:** See [Package Management in Python](/topics/python/docs/package-management-python.qmd) for a clear explanation of how to use `venv` and `pip`, particularly for [apps requiring root permissions](/topics/python/docs/package-management-python.qmd#root-permissions) consumer

```bash
pip install seeed-python-reterminal
```

Now you can import it to a test script (eg. *buzz.py*)

```python
import seeed_python_reterminal.core as rt
import time

print("BUZZER ON")
rt.buzzer = True
time.sleep(1)

print("BUZZER OFF")
rt.buzzer = False
```

This will sound the buzzer of the reTerminal for 1 second.

To run the script:
```bash
sudo $(which python) buzz.py
```

Alternatively, first elevate your shell, then execute the script normally:
```bash
user@hostname:~ $ sudo -i
root@hostname:~# python buzz.py
```
> **Note:** this library is simply a wrapper to the OS operations we did in the previous section.

See the official `seeed-python-reterminal` [Github repo](https://github.com/Seeed-Studio/Seeed_Python_ReTerminal) for API reference on how to control:

- LED's
- Accelerometer
- Programmable Buttons
- Light Sensor
